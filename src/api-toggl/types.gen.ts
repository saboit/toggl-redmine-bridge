// This file is auto-generated by @hey-api/openapi-ts

export type AccountsLinkedSsoProfile = {
    domain?: string;
    name?: string;
    sso_profile_id?: number;
};

export type BaseBillableHourlyRate = {
    billable_seconds?: number;
    currency?: string;
    hourly_rate_in_cents?: number;
};

export type BaseDataTrendsPost = {
    billable?: boolean;
    currency?: string;
    end_date?: string;
    ids?: UtilsInt64Slice;
    resolution?: string;
    rounding?: number;
    rounding_minutes?: number;
    start_date?: string;
};

export type BasePost = {
    /**
     * Whether the time entry is set as billable, optional, premium feature.
     */
    billable?: boolean;
    /**
     * Client IDs, optional, filtering attribute. To filter records with no clients, use [null].
     */
    client_ids?: Array<number>;
    /**
     * Description, optional, filtering attribute.
     */
    description?: string;
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    /**
     * Group IDs, optional, filtering attribute.
     */
    group_ids?: Array<number>;
    /**
     * Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.
     */
    max_duration_seconds?: number;
    /**
     * Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.
     */
    min_duration_seconds?: number;
    /**
     * Project IDs, optional, filtering attribute. To filter records with no projects, use [null].
     */
    project_ids?: Array<number>;
    /**
     * Whether time should be rounded, optional, default from user preferences.
     */
    rounding?: number;
    /**
     * Rounding minutes value, optional, default from user preferences. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.
     */
    rounding_minutes?: number;
    startTime?: string;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
    /**
     * Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].
     */
    tag_ids?: Array<number>;
    /**
     * Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].
     */
    task_ids?: Array<number>;
    /**
     * TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.
     */
    time_entry_ids?: Array<number>;
    /**
     * User IDs, optional, filtering attribute.
     */
    user_ids?: Array<number>;
};

export type BaseRangePost = {
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    startTime?: string;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
};

export type BetafeaturesAlphaFeatureAddInputData = {
    code?: string;
    description?: string;
};

export type BetafeaturesAlphaFeatureRolloutInputData = {
    description?: string;
    has_no_paid_plans?: boolean;
    max_workspace_user_count?: number;
    other_alpha_feature_id?: number;
    run_at?: string;
    strategy?: string;
    user_limit?: number;
    workspace_ids?: Array<number>;
};

export type BetafeaturesBetaFeatureRolloutRollbackInputData = {
    description?: string;
};

export type BillingFancyPlan = {
    name?: string;
    plan_id?: number;
    pricing_plans?: Array<BillingFancyPricingPlan>;
};

export type BillingPricingStruct = {
    currency_id?: number;
    discount_percentage?: number;
    discount_to?: string;
    plans?: Array<BillingFancyPlan>;
    tax_included?: boolean;
    tax_percentage?: number;
    tax_type?: string;
    user_count?: number;
};

export type BillingFancyPricingPlan = {
    actual_price_in_usd_cents?: number;
    campaign?: ModelsCampaign;
    list_price_in_usd_cents?: number;
    name?: string;
    period?: number;
    price_point_handle?: string;
    prices_month?: BillingPricesStruct;
    prices_period?: BillingPricesStruct;
    pricing_plan_id?: number;
};

export type BillingPricesStruct = {
    actual?: number;
    base?: number;
    with_tax?: number;
};

export type BonotificationsWebAppNotification = {
    content?: string;
    created_at?: string;
    img_url?: string;
    notification_id?: number;
    notification_type?: string;
    primary_btn_label?: string;
    primary_btn_url?: string;
    published_at?: string;
    secondary_btn_label?: string;
    secondary_btn_url?: string;
    target?: string;
    title?: string;
    tracking_id?: string;
    visible_until?: string;
};

export type BonotificationsWebAppNotificationSummary = {
    notification_id?: number;
    notification_type?: string;
    published_at?: string;
    target?: string;
    title?: string;
    visible_until?: string;
};

export type ClientPayload = {
    external_reference?: string;
    /**
     * Client name
     */
    name?: string;
    notes?: string;
};

export type ClientsArchiveClientsResponse = {
    client_ids?: Array<number>;
    project_ids?: Array<number>;
};

export type ClientsDataTrendsGraph = {
    data?: Array<ClientsDataTrendsGraphData>;
    resolution?: string;
};

export type ClientsDataTrendsGraphData = {
    clients?: Array<ClientsReportClient>;
    date?: string;
};

export type ClientsDataTrendsReport = {
    currency?: string;
    graph?: ClientsDataTrendsGraph;
};

export type ClientsReportClient = {
    billable_seconds?: number;
    client_id?: number;
    earnings?: number;
    name?: string;
    total_seconds?: number;
};

export type ComparativeComparativePost = {
    billable?: boolean;
    client_ids?: Array<number>;
    end_date?: string;
    group_ids?: Array<number>;
    project_ids?: Array<number>;
    resolution?: string;
    rounding?: number;
    rounding_minutes?: number;
    start_date?: string;
    tag_ids?: Array<number>;
    task_ids?: Array<number>;
    user_ids?: Array<number>;
};

export type ComparativeGraphData = {
    date?: string;
    total_seconds?: number;
};

export type ComparativeReport = {
    graph?: ComparativeReportGraph;
};

export type ComparativeReportGraph = {
    data?: Array<ComparativeGraphData>;
    resolution?: string;
};

export type CustomerCoupon = {
    amount_off?: number;
    deleted?: boolean;
    duration?: string;
    duration_in_months?: number;
    id?: string;
    name?: string;
    percent_off?: number;
    valid?: boolean;
};

export type CustomerDiscountResponse = {
    coupon?: CustomerCoupon;
    promotion_code?: CustomerPromotionCode;
};

export type CustomerPaymentMethod = {
    card?: CustomerPaymentMethodCard;
    sepa_debit?: CustomerPaymentMethodSepaDebit;
    type?: string;
    us_bank_account?: CustomerPaymentMethodUsBankAccount;
};

export type CustomerPaymentMethodCard = {
    brand?: string;
    country?: string;
    exp_month?: number;
    exp_year?: number;
    last4?: string;
};

export type CustomerPaymentMethodSepaDebit = {
    bank_code?: string;
    country?: string;
    last4?: string;
};

export type CustomerPaymentMethodUsBankAccount = {
    bank_name?: string;
    blocked?: boolean;
    blocked_reason?: string;
    last4?: string;
};

export type CustomerPromotionCode = {
    active?: boolean;
    code?: string;
    expires_at?: string;
    id?: string;
};

export type CustomerUnifiedCustomerResponse = {
    address_line?: string;
    country_id?: string;
    currency?: string;
    customer_name?: string;
    default_payment_method?: CustomerPaymentMethod;
    discount?: CustomerDiscountResponse;
    id?: string;
    postal_code?: string;
    site?: string;
    state?: string;
    tax_number?: string;
    toggl_user_email?: string;
    toggl_user_id?: number;
};

export type DashboardAllActivities = {
    description?: string;
    duration?: number;
    project_id?: number;
    stop?: string;
    tid?: number;
    user_id?: number;
};

export type DesktopLoginToken = {
    login_token?: string;
};

export type DetailedExportPdfPost = {
    /**
     * Whether the time entry is set as billable, optional, premium feature.
     */
    billable?: boolean;
    cents_separator?: string;
    /**
     * Client IDs, optional, filtering attribute. To filter records with no clients, use [null].
     */
    client_ids?: Array<number>;
    date_format?: 'MM/DD/YYYY' | 'DD-MM-YYYY' | 'MM-DD-YYYY' | 'YYYY-MM-DD' | 'DD/MM/YYYY' | 'DD.MM.YYYY';
    /**
     * Description, optional, filtering attribute.
     */
    description?: string;
    display_mode?: string;
    /**
     * Duration format, optional, default "classic". Can be "classic", "decimal" or "improved".
     */
    duration_format?: string;
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    /**
     * EnrichResponse, optional, default false. It will force the detailed report to return as much information as possible,
     * as it does for the export.
     */
    enrich_response?: boolean;
    first_id?: number;
    first_row_number?: number;
    first_timestamp?: number;
    /**
     * Group IDs, optional, filtering attribute.
     */
    group_ids?: Array<number>;
    /**
     * Whether time entries should be grouped, optional, default false.
     */
    grouped?: boolean;
    /**
     * Whether amounts should be hidden, optional, default false.
     */
    hide_amounts?: boolean;
    hour_format?: string;
    /**
     * Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.
     */
    max_duration_seconds?: number;
    /**
     * Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.
     */
    min_duration_seconds?: number;
    /**
     * Order by field, optional, default "date". Can be "date", "user", "duration", "description" or "last_update".
     */
    order_by?: string;
    /**
     * Order direction, optional. Can be ASC or DESC.
     */
    order_dir?: string;
    /**
     * PageSize defines the number of items per page, optional, default 50.
     */
    page_size?: number;
    /**
     * Project IDs, optional, filtering attribute. To filter records with no projects, use [null].
     */
    project_ids?: Array<number>;
    /**
     * Whether time should be rounded, optional, default from user preferences.
     */
    rounding?: number;
    /**
     * Rounding minutes value, optional, default from user preferences. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.
     */
    rounding_minutes?: number;
    startTime?: string;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
    /**
     * Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].
     */
    tag_ids?: Array<number>;
    /**
     * Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].
     */
    task_ids?: Array<number>;
    /**
     * TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.
     */
    time_entry_ids?: Array<number>;
    /**
     * User IDs, optional, filtering attribute.
     */
    user_ids?: Array<number>;
};

export type DetailedGroupedTimeEntry = {
    billable?: boolean;
    billable_amount_in_cents?: number;
    client_name?: string;
    currency?: string;
    description?: string;
    email?: string;
    hourly_rate_in_cents?: number;
    project_color?: string;
    project_hex?: string;
    project_id?: number;
    project_name?: string;
    row_number?: number;
    tag_ids?: Array<number>;
    tag_names?: Array<string>;
    task_id?: number;
    task_name?: string;
    time_entries?: Array<DetailedSingleTimeEntry>;
    user_id?: number;
    username?: string;
};

export type DetailedPost = {
    /**
     * Whether the time entry is set as billable, optional, premium feature.
     */
    billable?: boolean;
    /**
     * Client IDs, optional, filtering attribute. To filter records with no clients, use [null].
     */
    client_ids?: Array<number>;
    /**
     * Description, optional, filtering attribute.
     */
    description?: string;
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    /**
     * EnrichResponse, optional, default false. It will force the detailed report to return as much information as possible,
     * as it does for the export.
     */
    enrich_response?: boolean;
    first_id?: number;
    first_row_number?: number;
    first_timestamp?: number;
    /**
     * Group IDs, optional, filtering attribute.
     */
    group_ids?: Array<number>;
    /**
     * Whether time entries should be grouped, optional, default false.
     */
    grouped?: boolean;
    /**
     * Whether amounts should be hidden, optional, default false.
     */
    hide_amounts?: boolean;
    /**
     * Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.
     */
    max_duration_seconds?: number;
    /**
     * Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.
     */
    min_duration_seconds?: number;
    /**
     * Order by field, optional, default "date". Can be "date", "user", "duration", "description" or "last_update".
     */
    order_by?: string;
    /**
     * Order direction, optional. Can be ASC or DESC.
     */
    order_dir?: string;
    /**
     * PageSize defines the number of items per page, optional, default 50.
     */
    page_size?: number;
    /**
     * Project IDs, optional, filtering attribute. To filter records with no projects, use [null].
     */
    project_ids?: Array<number>;
    /**
     * Whether time should be rounded, optional, default from user preferences.
     */
    rounding?: number;
    /**
     * Rounding minutes value, optional, default from user preferences. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.
     */
    rounding_minutes?: number;
    startTime?: string;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
    /**
     * Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].
     */
    tag_ids?: Array<number>;
    /**
     * Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].
     */
    task_ids?: Array<number>;
    /**
     * TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.
     */
    time_entry_ids?: Array<number>;
    /**
     * User IDs, optional, filtering attribute.
     */
    user_ids?: Array<number>;
};

export type DetailedSearchExportPost = {
    /**
     * Whether the time entry is set as billable, optional, premium feature.
     */
    billable?: boolean;
    /**
     * Client IDs, optional, filtering attribute. To filter records with no clients, use [null].
     */
    client_ids?: Array<number>;
    /**
     * Description, optional, filtering attribute.
     */
    description?: string;
    /**
     * Duration format, optional, default "classic". Can be "classic", "decimal" or "improved".
     */
    duration_format?: string;
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    /**
     * EnrichResponse, optional, default false. It will force the detailed report to return as much information as possible,
     * as it does for the export.
     */
    enrich_response?: boolean;
    first_id?: number;
    first_row_number?: number;
    first_timestamp?: number;
    /**
     * Group IDs, optional, filtering attribute.
     */
    group_ids?: Array<number>;
    /**
     * Whether time entries should be grouped, optional, default false.
     */
    grouped?: boolean;
    /**
     * Whether amounts should be hidden, optional, default false.
     */
    hide_amounts?: boolean;
    /**
     * Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.
     */
    max_duration_seconds?: number;
    /**
     * Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.
     */
    min_duration_seconds?: number;
    /**
     * Order by field, optional, default "date". Can be "date", "user", "duration", "description" or "last_update".
     */
    order_by?: string;
    /**
     * Order direction, optional. Can be ASC or DESC.
     */
    order_dir?: string;
    /**
     * PageSize defines the number of items per page, optional, default 50.
     */
    page_size?: number;
    /**
     * Project IDs, optional, filtering attribute. To filter records with no projects, use [null].
     */
    project_ids?: Array<number>;
    /**
     * Whether time should be rounded, optional, default from user preferences.
     */
    rounding?: number;
    /**
     * Rounding minutes value, optional, default from user preferences. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.
     */
    rounding_minutes?: number;
    startTime?: string;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
    /**
     * Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].
     */
    tag_ids?: Array<number>;
    /**
     * Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].
     */
    task_ids?: Array<number>;
    /**
     * TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.
     */
    time_entry_ids?: Array<number>;
    /**
     * User IDs, optional, filtering attribute.
     */
    user_ids?: Array<number>;
};

export type DetailedSingleTimeEntry = {
    at?: string;
    /**
     * used by reports v2 proxy
     */
    at_tz?: string;
    id?: number;
    seconds?: number;
    start?: string;
    stop?: string;
};

export type DictionaryGeneralDictionary = {
    [key: string]: DictionaryReportDict;
};

export type DictionaryProjectDictionary = {
    [key: string]: DictionaryProjectUserDict;
};

export type DictionaryProjectUserDict = {
    actual_hours?: number;
    actual_seconds?: number;
    client_id?: number;
    color?: string;
    currency?: string;
    end_date?: string;
    estimated_hours?: number;
    estimated_seconds?: number;
    fixed_fee?: number;
    id?: number;
    name?: string;
    start_date?: string;
};

export type DictionaryReportDict = {
    id?: number;
    name?: string;
};

export type DictionaryReportDictionaries = {
    clients?: DictionaryGeneralDictionary;
    filters?: DictionaryReportDictionariesData;
    projects?: DictionaryProjectDictionary;
    tags?: DictionaryGeneralDictionary;
    tasks?: DictionaryTaskDictionary;
    user_groups?: DictionaryGeneralDictionary;
    users?: DictionaryUserDictionary;
};

export type DictionaryReportDictionariesData = {
    clients?: DictionaryGeneralDictionary;
    projects?: DictionaryProjectDictionary;
    tags?: DictionaryGeneralDictionary;
    tasks?: DictionaryTaskDictionary;
    user_groups?: DictionaryGeneralDictionary;
    users?: DictionaryUserDictionary;
};

export type DictionaryReportUserDict = {
    avatar_url?: string;
    email?: string;
    group_ids?: string;
    id?: number;
    labour_cost?: number;
    name?: string;
};

export type DictionaryTaskDict = {
    estimated_seconds?: number;
    id?: number;
    name?: string;
    project_id?: number;
    tracked_seconds?: number;
};

export type DictionaryTaskDictionary = {
    [key: string]: DictionaryTaskDict;
};

export type DictionaryUserDictionary = {
    [key: string]: DictionaryReportUserDict;
};

export type DtoClientFilterParamsRequest = {
    /**
     * Client IDs for filtering.
     */
    ids?: Array<number>;
    /**
     * Client name for filtering.
     */
    name?: string;
    /**
     * Start is the client ID cursor for pagination.
     */
    start?: number;
};

export type DtoClientFilterResponse = {
    /**
     * Client ID.
     */
    id?: number;
    /**
     * Client name.
     */
    name?: string;
};

export type DtoEmployeeProfitability = {
    currency: string;
    end_date?: string;
    group_ids?: UtilsInt64Slice;
    resolution?: string;
    rounding?: number;
    rounding_minutes?: number;
    start_date?: string;
    user_ids?: UtilsInt64Slice;
};

export type DtoProjectFilterParamRequest = {
    /**
     * Client IDs, optional.
     */
    client_ids?: Array<number>;
    /**
     * Currency, optional, example "EUR".
     */
    currency?: string;
    /**
     * Project IDs, optional.
     */
    ids?: Array<number>;
    /**
     * Whether the wanted projects are archived, optional, default false.
     */
    is_active?: boolean;
    /**
     * Whether the wanted projects are billable, optional, premium feature, default false.
     */
    is_billable?: boolean;
    /**
     * Whether the wanted projects are private, optional, default false.
     */
    is_private?: boolean;
    /**
     * Project name, optional.
     */
    name?: string;
    /**
     * PageSize is the number of records returned per page. If unset, the default value of 201 will be used.
     */
    page_size?: number;
    /**
     * Start is used for pagination, optional, default 0. The api will return the next projects page with id >= Start.
     */
    start?: number;
};

export type DtoProjectFilterResponse = {
    active?: boolean;
    billable?: boolean;
    client_id?: number;
    color?: string;
    currency?: string;
    id?: number;
    name?: string;
};

export type DtoProjectGroupParamsRequest = {
    /**
     * Group IDs, optional. At least Projects IDs or Group IDs should be informed.
     */
    group_ids?: Array<number>;
    /**
     * Project IDs, optional. At least Projects IDs or Group IDs should be informed.
     */
    project_ids?: Array<number>;
    start_id?: number;
};

export type DtoProjectGroupResponse = {
    group_id?: number;
    id?: number;
    name?: string;
    project_id?: number;
};

export type DtoProjectProfitability = {
    /**
     * Whether the project is set as billable, optional, premium feature.
     */
    billable?: boolean;
    /**
     * Client IDs, optional. A nil entry on this list means that only projects without client will be selected.
     */
    client_ids?: Array<number>;
    /**
     * Currency, example: "usd".
     */
    currency: string;
    /**
     * End date, optional, example: time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    /**
     * Project IDS, optional.
     */
    project_ids?: Array<number>;
    /**
     * Resolution, optional. Can be "day", "week" or "month".
     */
    resolution?: string;
    /**
     * Rounding, optional, duration rounding settings, premium feature.
     */
    rounding?: number;
    /**
     * RoundingMinutes, optional, duration rounding minutes settings, premium feature.
     */
    rounding_minutes?: number;
    /**
     * Start date, optional, example: time.DateOnly. Should be less than End date.
     */
    start_date?: string;
};

export type DtoProjectStatusParamsRequest = {
    /**
     * Whether the wanted projects statuses are archived, optional, default false.
     */
    active?: boolean;
    /**
     * Project IDs.
     */
    ids?: Array<number>;
};

export type DtoProjectStatusResponse = {
    billable_amount?: number;
    billable_seconds?: number;
    currency?: string;
    estimated_seconds?: number;
    id?: number;
    tracked_seconds?: number;
};

export type DtoProjectUserParamsRequest = {
    /**
     * Client IDs, optional.
     */
    client_ids?: Array<number>;
    /**
     * Project IDs, optional.
     */
    project_ids?: Array<number>;
    start_id?: number;
};

export type DtoProjectUserResponse = {
    /**
     * Group ID.
     */
    group_id?: number;
    /**
     * Hourly rate.
     */
    hourly_rate?: number;
    /**
     * Project user ID.
     */
    id?: number;
    /**
     * Labor cost.
     */
    labour_cost?: number;
    /**
     * Project ID.
     */
    project_id?: number;
    /**
     * User ID.
     */
    user_id?: number;
};

export type DtoProjectUsersRequest = {
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    startTime?: string;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
};

export type DtoUserFilterParamsRequest = {
    /**
     * Whether the wanted users are active, optional, default true.
     */
    active?: boolean;
    /**
     * User IDs, optional.
     */
    ids?: Array<number>;
    /**
     * Cursor to point from where to start the search, it should be a user ID, optional.
     */
    start?: number;
};

export type DtoUserFilterResponse = {
    deleted_at?: string;
    id?: number;
    name?: string;
};

export type ExportPayload = {
    profile?: boolean;
    timeline?: boolean;
};

export type FavoritesCreatePayload = {
    billable?: boolean;
    description?: string;
    project_id?: number;
    public?: boolean;
    rank?: number;
    tag_ids?: Array<number>;
    task_id?: number;
};

export type FavoritesUpdatePayload = {
    billable?: boolean;
    description?: string;
    favorite_id?: number;
    project_id?: number;
    public?: boolean;
    rank?: number;
    tag_ids?: Array<number>;
    task_id?: number;
};

export type FeatureUpsellResponse = {
    feature_id?: number;
    is_default_feature?: boolean;
    name?: string;
    upsell_plan_handle?: string;
    upsell_plan_id?: number;
};

export type GroupNamePayload = {
    name?: string;
};

export type GroupOrganizationGroupResponse = {
    at?: string;
    group_id?: number;
    name?: string;
    permissions?: string;
    users?: Array<ModelsOrganizationUserSimple>;
    workspaces?: Array<number>;
};

export type GroupPayload = {
    /**
     * Group name
     */
    name?: string;
    /**
     * Group users, optional
     */
    users?: Array<number>;
    /**
     * Group workspaces
     */
    workspaces?: Array<number>;
};

export type GroupProjectGroupPayload = {
    /**
     * Group ID
     */
    group_id?: number;
    /**
     * Project ID
     */
    project_id?: number;
};

export type GroupsPatchFailure = {
    message?: string;
    patch?: GroupsPatchInput;
};

export type GroupsPatchInput = {
    op?: string;
    path?: string;
    value?: Array<number>;
};

export type GroupsPatchOutput = {
    failure?: Array<GroupsPatchFailure>;
    success?: Array<GroupsPatchInput>;
};

export type HandlercalendarCalendarsResponse = {
    calendars?: Array<ModelsCalendar>;
    next_page_token?: string;
};

export type HandlercalendarEventsResponse = {
    events?: Array<ModelsEvent>;
    next_page_token?: string;
};

export type HandlercalendarFetchedCalendarsResponse = {
    fetched_calendars?: number;
};

export type HandlercalendarPatchCalendar = {
    default_planned_task_id?: number;
    default_project_id?: number;
    default_workspace_id?: number;
    /**
     * The following fields are deprecated but we need to keep them for backward compatibility with previous versions
     * of mobile apps
     */
    remind_tracking?: boolean;
    selected?: boolean;
};

export type HandlercalendarPostDetailsSuggestionRequest = {
    event_ids?: Array<number>;
    workspace_id?: number;
};

export type HandlercalendarPostDetailsSuggestionResponse = {
    suggestions?: Array<HandlercalendarPostDetailsSuggestionResponseItem>;
};

export type HandlercalendarPostDetailsSuggestionResponseItem = {
    event_id?: number;
    suggestion?: ModelsSuggestion;
};

export type HandlercalendarResponse = {
    fetched_events?: number;
};

export type HandlerfavoritesPayload = {
    billable?: boolean;
    description?: string;
    project_id?: number;
    tag_ids?: Array<number>;
    task_id?: number;
    workspace_id?: number;
};

export type HandlergoalsApiResponse = {
    active?: boolean;
    billable?: boolean;
    comparison?: string;
    creator_user_id?: number;
    creator_user_name?: string;
    current_recurrence_end_date?: string;
    current_recurrence_start_date?: string;
    current_recurrence_tracked_seconds?: number;
    end_date?: string;
    goal_id?: number;
    icon?: string;
    last_completed_recurrence_end_date?: string;
    last_notified_at?: string;
    name?: string;
    permissions?: string;
    project_ids?: Array<number>;
    recurrence?: string;
    start_date?: string;
    status?: string;
    streak?: number;
    tag_ids?: Array<number>;
    tags?: Array<string>;
    target_seconds?: number;
    task_ids?: Array<number>;
    team_goal?: boolean;
    user_id?: number;
    user_name?: string;
    workspace_id?: number;
};

export type HandlergoalsCreatePayload = {
    billable?: boolean;
    comparison?: string;
    end_date?: string;
    icon?: string;
    name?: string;
    project_ids?: Array<number>;
    recurrence?: string;
    start_date?: string;
    tag_ids?: Array<number>;
    target_seconds?: number;
    task_ids?: Array<number>;
    user_id?: number;
};

export type HandlergoalsUpdatePayload = {
    active?: boolean;
    comparison?: string;
    end_date?: string;
    icon?: string;
    last_notified_at?: string;
    name?: string;
    target_seconds?: number;
};

export type HelpersValidateTaxRequest = {
    country_id?: number;
    tax_number?: string;
};

export type HelpersValidateTaxResponse = {
    tax_number_valid?: boolean;
    tax_number_validated_at?: string;
};

export type InvitationInfo = {
    email?: string;
    invitation_id?: number;
    invite_url?: string;
    organization_id?: number;
    recipient_id?: number;
    sender_id?: number;
    workspaces?: Array<InvitationWorkspaceInfo>;
};

export type InvitationIntegrationData = {
    external_id?: string;
    external_type?: string;
    provider?: string;
};

export type InvitationPost = {
    emails?: Array<string>;
    groups?: Array<number>;
    project_invite?: InvitationProjectInvite;
    skip_email?: boolean;
    workspaces?: Array<InvitationPostWorkspaces>;
};

export type InvitationPostWorkspaces = {
    admin?: boolean;
    integration_data?: InvitationIntegrationData;
    role?: string;
    role_id?: number;
    workspace_id?: number;
};

export type InvitationProjectInvite = {
    manager?: boolean;
    project_id?: number;
    workspace_id?: number;
};

export type InvitationResult = {
    data?: Array<InvitationInfo>;
    invitations?: Array<ModelsInvitation>;
    messages?: Array<string>;
};

export type InvitationWorkspaceInfo = {
    user_id?: number;
    workspace_id?: number;
    workspace_user_id?: number;
};

export type JwkSet = {
    [key: string]: unknown;
};

export type MeFeature = {
    enabled?: boolean;
    feature_id?: number;
    name?: string;
};

export type MeUserLocationResponse = {
    city?: string;
    city_lat_long?: string;
    country_code?: string;
    country_name?: string;
    state?: string;
};

export type MeWorkspace = {
    features?: Array<MeFeature>;
    workspace_id?: number;
};

export type MePayload = {
    /**
     * User's first day of the week. Sunday: 0, Monday:1, etc.
     */
    beginning_of_week?: number;
    /**
     * User's country ID
     */
    country_id?: number;
    /**
     * User's current password (used to change the current password)
     */
    current_password?: string;
    /**
     * User's default workspace ID
     */
    default_workspace_id?: number;
    /**
     * User's email address
     */
    email?: string;
    /**
     * User's full name
     */
    fullname?: string;
    /**
     * User's new password (current one must also be provided)
     */
    password?: string;
    /**
     * User's timezone
     */
    timezone?: string;
};

export type ModelUser = {
    /**
     * Whether the user is active or not.
     */
    active?: boolean;
    /**
     * Avatar file name
     */
    avatar?: string;
    /**
     * Whether the user is deactivated or not.
     */
    deactivated?: boolean;
    /**
     * Deleted at date.
     */
    deleted_at?: string;
    /**
     * Email
     */
    email?: string;
    /**
     * Full name
     */
    fullname?: string;
    /**
     * User ID
     */
    id?: number;
    /**
     * Workspace User ID
     */
    workspace_user_id?: number;
};

export type ModelsAdmin = {
    api_token?: string;
    calendar?: string;
    email?: string;
    github?: string;
    google_apps?: string;
    id?: number;
    job_name?: string;
    mobile?: string;
    name?: string;
    permissions?: Array<string>;
    role_id?: number;
    secondary_email?: string;
    skype?: string;
};

export type ModelsAlertError = {
    code?: string;
    message?: string;
};

export type ModelsAlertWithMeta = {
    billable?: boolean;
    client_id?: number;
    client_name?: string;
    errors?: Array<ModelsAlertError>;
    estimatedHours?: number;
    id?: number;
    isFixedFee?: boolean;
    isPrivate?: boolean;
    object_type?: number;
    project_color?: string;
    project_id?: number;
    project_name?: string;
    receiver_groups?: string;
    receiver_roles?: string;
    receiver_users?: string;
    receiver_users_name?: string;
    receivers?: number;
    source_kind?: string;
    threshold?: number;
    threshold_type?: string;
    /**
     * using pq types is a workaround to enable reading postgres arrays into go types
     * we should wrap these pq types to avoid polluting our domain
     */
    thresholds?: string;
    wid?: number;
};

export type ModelsAllPreferences = {
    activity_timeline_display_activity?: boolean;
    activity_timeline_grouping_interval?: string;
    activity_timeline_grouping_method?: string;
    activity_timeline_recording_level?: string;
    activity_timeline_sync_events?: boolean;
    /**
     * will be omitted if empty
     */
    alpha_features?: Array<ModelsAlphaFeature>;
    /**
     * will be omitted if empty
     */
    analyticsAdvancedFilters?: boolean;
    auto_tracker_delay_enabled?: boolean;
    auto_tracker_delay_in_seconds?: number;
    automatic_tagging?: boolean;
    autotracking_enabled?: boolean;
    /**
     * will be omitted if empty
     */
    beginningOfWeek?: number;
    calendar_snap_duration?: string;
    calendar_snap_initial_location?: string;
    calendar_visible_hours_end?: number;
    calendar_visible_hours_start?: number;
    calendar_zoom_level?: string;
    cell_swipe_actions_enabled?: boolean;
    charts_view_type?: string;
    /**
     * will be omitted if empty
     */
    collapseDetailedReportEntries?: boolean;
    /**
     * will be omitted if empty
     */
    collapseTimeEntries?: boolean;
    dashboards_view_type?: string;
    date_format?: string;
    /**
     * will be omitted if empty
     */
    decimal_separator?: string;
    default_project_id?: number;
    default_task_id?: number;
    /**
     * will be omitted if empty
     */
    displayDensity?: string;
    /**
     * will be omitted if empty
     */
    distinctRates?: string;
    duration_format?: string;
    duration_format_on_timer_duration_field?: boolean;
    edit_popup_integration_timer?: boolean;
    extension_send_error_reports?: boolean;
    extension_send_usage_statistics?: boolean;
    /**
     * will be omitted if empty
     */
    firstSeenBusinessPromo?: number;
    focus_app_on_time_entry_started?: boolean;
    focus_app_on_time_entry_stopped?: boolean;
    haptic_feedback_enabled?: boolean;
    /**
     * will be omitted if empty
     */
    hide_keyboard_shortcut?: boolean;
    idle_detection_enabled?: boolean;
    idle_detection_interval_in_minutes?: number;
    inactivity_behavior?: string;
    ios_is_goals_view_shown?: boolean;
    is_goals_view_expanded?: boolean;
    is_goals_view_shown?: boolean;
    is_summary_total_view_visible?: boolean;
    keep_mini_timer_on_top?: boolean;
    keep_window_on_top?: boolean;
    keyboard_increment_timer_page?: number;
    /**
     * will be omitted if empty
     */
    keyboard_shortcuts_enabled?: boolean;
    keyboard_shortcuts_share_time_entries?: boolean;
    mac_is_goals_view_shown?: boolean;
    macos_auto_tracking_rules?: UtilsMacOsAutoTrackingRules;
    macos_show_hide_toggl_keyboard_shortcut?: UtilsKeyboardShortcut;
    macos_stop_continue_keyboard_shortcut?: UtilsKeyboardShortcut;
    /**
     * will be omitted if empty
     */
    manualEntryMode?: string;
    /**
     * will be omitted if empty
     */
    manualMode?: boolean;
    /**
     * will be omitted if empty
     */
    manualModeOverlaySeen?: boolean;
    modify_on_start_time_change?: string;
    /**
     * will be omitted if empty
     */
    offlineMode?: string;
    pg_time_zone_name?: string;
    pomodoro_auto_start_break?: boolean;
    pomodoro_auto_start_focus?: boolean;
    pomodoro_break_interval_in_minutes?: number;
    pomodoro_break_project_id?: number;
    pomodoro_break_start_sound_enabled?: boolean;
    pomodoro_break_tag_id?: number;
    pomodoro_countdown_timer?: boolean;
    pomodoro_enabled?: boolean;
    pomodoro_focus_interval_in_minutes?: number;
    pomodoro_focus_sound?: string;
    pomodoro_global_sound_enabled?: boolean;
    pomodoro_interval_end_sound?: boolean;
    pomodoro_interval_end_volume?: number;
    pomodoro_longer_break_duration_in_minutes?: number;
    pomodoro_prevent_screen_lock?: boolean;
    pomodoro_rounds_before_longer_break?: number;
    pomodoro_session_start_sound_enabled?: boolean;
    pomodoro_show_notifications?: boolean;
    pomodoro_stop_timer_at_interval_end?: boolean;
    pomodoro_track_breaks_as_time_entries?: boolean;
    /**
     * will be omitted if empty
     */
    projectDashboardActivityMode?: string;
    project_shortcut_enabled?: boolean;
    record_timeline?: boolean;
    remember_last_project?: string;
    reminder_days?: string;
    reminder_enabled?: boolean;
    reminder_interval_in_minutes?: number;
    reminder_period?: string;
    reminder_snoozing_in_minutes?: number;
    /**
     * will be omitted if empty
     */
    reportRounding?: boolean;
    /**
     * will be omitted if empty
     */
    reportRoundingDirection?: string;
    /**
     * will be omitted if empty
     */
    reportRoundingStepInMinutes?: number;
    /**
     * will be omitted if empty
     */
    reportsHideWeekends?: boolean;
    run_app_on_startup?: boolean;
    running_entry_warning?: string;
    running_timer_notification_enabled?: boolean;
    /**
     * will be omitted if empty
     */
    seenFollowModal?: boolean;
    /**
     * will be omitted if empty
     */
    seenFooterPopup?: boolean;
    /**
     * will be omitted if empty
     */
    seenProjectDashboardOverlay?: boolean;
    /**
     * will be omitted if empty
     */
    seenTogglButtonModal?: boolean;
    send_added_to_project_notification?: boolean;
    send_daily_project_invites?: boolean;
    send_product_emails?: boolean;
    send_product_release_notification?: boolean;
    send_system_message_notification?: boolean;
    send_timer_notifications?: boolean;
    send_weekly_report?: boolean;
    sharing_shortcut_enabled?: boolean;
    /**
     * will be omitted if empty
     */
    showTimeInTitle?: boolean;
    show_all_entries?: boolean;
    show_changelog?: boolean;
    show_description_in_menu_bar?: boolean;
    show_dock_icon?: boolean;
    show_events_in_calendar?: boolean;
    show_project_in_menu_bar?: boolean;
    show_qr_scanner?: boolean;
    show_seconds_in_menu_bar?: boolean;
    show_sidebar_right?: boolean;
    /**
     * will be omitted if empty
     */
    show_timeline_in_day_view?: boolean;
    show_timer_in_menu_bar?: boolean;
    show_today_total_in_menu_bar?: boolean;
    /**
     * will be omitted if empty
     */
    show_total_billable_hours?: boolean;
    /**
     * will be omitted if empty
     */
    show_weekend_on_timer_page?: boolean;
    show_workouts_in_calendar?: boolean;
    sleep_behaviour?: string;
    smart_alerts_option?: string;
    /**
     * will be omitted if empty
     */
    snowballReportRounding?: string;
    stack_times_on_manual_mode_after?: string;
    start_automatically?: boolean;
    start_shortcut_mode?: string;
    stop_at_specific_time?: boolean;
    stop_automatically?: boolean;
    stop_entry_on_shutdown?: boolean;
    stop_specified_time?: string;
    stopped_timer_notification_enabled?: boolean;
    suggestions_enabled?: boolean;
    /**
     * will be omitted if empty
     */
    summaryReportAmounts?: string;
    /**
     * will be omitted if empty
     */
    summaryReportDistinctRates?: boolean;
    /**
     * will be omitted if empty
     */
    summaryReportGrouping?: string;
    /**
     * will be omitted if empty
     */
    summaryReportSortAsc?: boolean;
    /**
     * will be omitted if empty
     */
    summaryReportSortField?: string;
    /**
     * will be omitted if empty
     */
    summaryReportSubGrouping?: string;
    summary_total_mode?: string;
    tags_shortcut_enabled?: boolean;
    /**
     * will be omitted if empty
     */
    theme?: string;
    time_entry_display_mode?: string;
    time_entry_ghost_suggestions_enabled?: boolean;
    time_entry_invitations_notification_enabled?: boolean;
    time_entry_start_stop_input_mode?: string;
    timeofday_format?: string;
    /**
     * will be omitted if empty
     */
    timerView?: string;
    /**
     * will be omitted if empty
     */
    timerViewMobile?: string;
    /**
     * ToSAcceptNeeded represents the trigger for new ToS accept dialog
     */
    toSAcceptNeeded?: boolean;
    use_mini_timer?: boolean;
    /**
     * will be omitted if empty
     */
    visibleFooter?: string;
    /**
     * will be omitted if empty
     */
    webTimeEntryStarted?: boolean;
    /**
     * will be omitted if empty
     */
    webTimeEntryStopped?: boolean;
    /**
     * will be omitted if empty
     */
    weeklyReportGrouping?: string;
    /**
     * will be omitted if empty
     */
    weeklyReportValueToShow?: string;
    windows_auto_tracking_rules?: UtilsWindowsAutoTrackingRules;
    windows_show_hide_toggl_keyboard_shortcut?: UtilsKeyboardShortcut;
    windows_stop_continue_keyboard_shortcut?: UtilsKeyboardShortcut;
    windows_stop_start_keyboard_shortcut?: UtilsKeyboardShortcut;
    windows_theme?: string;
    workout_default_project_id?: number;
    workout_default_tag_id?: number;
};

export type ModelsAlphaFeature = {
    /**
     * Feature ID
     */
    alpha_feature_id?: number;
    /**
     * Feature code
     */
    code?: string;
    /**
     * Time of deletion, omitted if empty
     */
    deleted_at?: string;
    /**
     * Feature description, omitted if empty
     */
    description?: string;
    /**
     * Whether the feature is enabled
     */
    enabled?: boolean;
};

export type ModelsAvatar = {
    avatar_urls?: ModelsImageUrls;
    fileType?: string;
    name?: string;
};

export type ModelsCalendar = {
    background_color?: string;
    calendar_id?: number;
    calendar_integration_id?: number;
    created_at?: string;
    default_planned_task_id?: number;
    default_project_id?: number;
    default_workspace_id?: number;
    deleted_at?: string;
    external_id?: string;
    foreground_color?: string;
    name?: string;
    /**
     * The following fields are deprecated but we need to keep them for backward compatibility with previous versions
     * of mobile apps
     */
    remind_tracking?: boolean;
    selected?: boolean;
    updated_at?: string;
};

export type ModelsCampaign = {
    discount?: number;
    end?: string;
    key?: string;
    name?: string;
    start?: string;
};

export type ModelsCardDetails = {
    added_at?: string;
    card_number?: string;
    card_type?: string;
    creator_id?: number;
    creator_name?: string;
    expiry_date?: string;
    holder_name?: string;
};

export type ModelsClient = {
    /**
     * IsArchived is true if the client is archived
     */
    archived?: boolean;
    /**
     * When was the last update
     */
    at?: string;
    /**
     * CreatorID is the ID of the user who created the client
     */
    creator_id?: number;
    /**
     * ExternalReference can be used to store an external reference to the Track Client entity.
     */
    external_reference?: string;
    /**
     * Client ID
     */
    id?: number;
    /**
     * The external ID of the linked entity in the external system (e.g. JIRA/SalesForce)
     */
    integration_ext_id?: string;
    /**
     * The external type of the linked entity in the external system (e.g. JIRA/SalesForce)
     */
    integration_ext_type?: string;
    /**
     * The provider (e.g. JIRA/SalesForce) that has an entity linked to this Toggl Track entity
     */
    integration_provider?: string;
    /**
     * Name of the client
     */
    name?: string;
    notes?: string;
    /**
     * List of authorization permissions for this client.
     */
    permissions?: string;
    /**
     * Total field to store the total count
     */
    total_count?: number;
    /**
     * Workspace ID
     */
    wid?: number;
};

export type ModelsContactDetail = {
    company_address?: string;
    company_city?: string;
    company_name?: string;
    contact_detail_id?: number;
    contact_email?: string;
    contact_person?: string;
    country_id?: number;
    country_subdivision_id?: number;
    created_at?: string;
    customer_id?: number;
    is_eu_resident?: boolean;
    updated_at?: string;
    user_id?: number;
    vat_number?: string;
    /**
     * DEPRECATED
     */
    vat_number_valid?: boolean;
    /**
     * DEPRECATED
     */
    vat_number_validated_at?: string;
    zip_code?: string;
};

export type ModelsCountry = {
    country_code?: string;
    default_currency_id?: number;
    id?: number;
    name?: string;
    requires_postal_code?: boolean;
    vat_applicable?: boolean;
    vat_percentage?: number;
    vat_regex?: string;
};

export type ModelsCsvUpload = {
    at?: string;
    log_id?: number;
};

export type ModelsCurrency = {
    currency_id?: number;
    iso_code?: string;
    symbol?: string;
};

export type ModelsDiscountRequestResponses = {
    negative_answers: Array<string>;
    negative_feedback?: string;
    positive_answers: Array<string>;
    positive_feedback?: string;
};

export type ModelsDownloadRequestRecord = {
    error_message?: string;
    state?: string;
    token?: string;
};

export type ModelsEvent = {
    all_day?: boolean;
    background?: string;
    calendar_event_id?: number;
    calendar_id?: number;
    created_at?: string;
    deleted_at?: string;
    end_time?: string;
    external_id?: string;
    foreground?: string;
    html_link?: string;
    /**
     * This is an unique ID used to avoid duplicate events when getting information
     * from multiple sources. E. G. the mobile may get calendar events without BE integration,
     * so they should be able to tell if an event is repeated.
     */
    ical_uid?: string;
    meeting_link?: string;
    start_time?: string;
    title?: string;
    updated?: string;
    updated_at?: string;
};

export type ModelsFavorite = {
    billable?: boolean;
    /**
     * Related entities meta fields - if requested
     */
    client_name?: string;
    created_at?: string;
    deleted_at?: string;
    description?: string;
    favorite_id?: number;
    permissions?: string;
    project_active?: boolean;
    project_billable?: boolean;
    project_color?: string;
    project_id?: number;
    project_name?: string;
    public?: boolean;
    rank?: number;
    tag_ids?: ModelsIntArray;
    tags?: UtilsStringSlice;
    task_id?: number;
    task_name?: string;
    user_id?: number;
    was_public_at?: string;
    workspace_id?: number;
};

export type ModelsGoal = {
    active?: boolean;
    billable?: boolean;
    comparison?: string;
    creatorUserID?: number;
    creatorUserName?: string;
    currentRecurrenceEndDate?: string;
    currentRecurrenceStartDate?: string;
    currentRecurrenceTrackedSeconds?: number;
    endDate?: string;
    icon?: string;
    id?: number;
    lastCompletedRecurrenceEndDate?: string;
    lastNotifiedAt?: string;
    name?: string;
    permissions?: string;
    projectIDs?: UtilsInt64Slice;
    recurrence?: string;
    startDate?: string;
    status?: string;
    streak?: number;
    tagIDs?: UtilsInt64Slice;
    tags?: UtilsStringSlice;
    targetSeconds?: number;
    taskIDs?: UtilsInt64Slice;
    teamGoal?: boolean;
    userID?: number;
    userName?: string;
    workspaceID?: number;
};

export type ModelsGroup = {
    at?: string;
    id?: number;
    name?: string;
    permissions?: string;
    workspace_id?: number;
};

export type ModelsGroupDict = {
    group_id?: number;
    name?: string;
};

export type ModelsImageUrls = {
    [key: string]: string;
};

export type ModelsIntArray = Array<number>;

export type ModelsIntegration = {
    auto_track?: boolean;
    calendar_integration_id?: number;
    created_at?: string;
    email?: string;
    error_status?: string;
    provider?: string;
};

export type ModelsInvitation = {
    code?: string;
    email?: string;
    organization_id?: number;
    organization_name?: string;
    sender_email?: string;
    sender_name?: string;
};

export type ModelsLogo = {
    logo?: string;
};

export type ModelsMeOrganization = {
    /**
     * Whether the requester is an admin of the organization
     */
    admin?: boolean;
    admins?: Array<ModelsOrganizationUserWithEmail>;
    all_preferences?: {
        [key: string]: string;
    };
    /**
     * Organization's creation date
     */
    created_at?: string;
    /**
     * Organization's delete date
     */
    deleted_at?: string;
    /**
     * Organization ID
     */
    id?: number;
    /**
     * Is true when the organization option is_multi_workspace_enabled is set
     */
    is_multi_workspace_enabled?: boolean;
    is_unified?: boolean;
    /**
     * How far back free workspaces in this org can access data.
     */
    max_data_retention_days?: number;
    /**
     * Maximum number of workspaces allowed for the organization
     */
    max_workspaces?: number;
    /**
     * Organization Name
     */
    name?: string;
    /**
     * Whether the requester is a the owner of the organization
     */
    owner?: boolean;
    /**
     * The subscription plan is an enterprise plan
     */
    pricing_plan_enterprise?: boolean;
    /**
     * Organization plan ID
     */
    pricing_plan_id?: number;
    /**
     * The subscription plan name the org is currently on. Free or any plan name coming from payment provider
     */
    pricing_plan_name?: string;
    subscription?: ModelsOrganizationSubscription;
    /**
     * Whether the organization is currently suspended
     */
    suspended_at?: string;
    trial_info?: ModelsTrialInfo;
    /**
     * Organization's last modification date
     */
    updated_at?: string;
    /**
     * Number of organization users
     */
    user_count?: number;
};

export type ModelsMobileFeedback = {
    attachment?: Array<number>;
    attachment_name?: string;
    data?: Array<ModelsMobileFeedbackData>;
    email?: string;
    intercomEnabled?: boolean;
    message?: string;
    userID?: number;
};

export type ModelsMobileFeedbackData = {
    key?: string;
    value?: string;
};

export type ModelsMostActiveUser = {
    duration?: number;
    user_id?: number;
};

export type ModelsOptions = {
    [key: string]: string;
};

export type ModelsOrgUser = {
    '2fa_enabled'?: boolean;
    /**
     * Deprecated, to be removed. Use RoleID, or IsAdmin method if you must access this field.
     */
    admin?: boolean;
    avatar_url?: string;
    can_edit_email?: boolean;
    created_at?: string;
    email?: string;
    groups?: Array<ModelsGroupDict>;
    id?: number;
    inactive?: boolean;
    invitation_id?: number;
    joined?: boolean;
    name?: string;
    organization_id?: number;
    /**
     * Deprecated, to be removed. Use RoleID, or IsOwner method if you must access this field.
     */
    owner?: boolean;
    role_id?: number;
    updated_at?: string;
    user_id?: number;
    workspace_count?: number;
    workspaces?: Array<ModelsOrgUserWorkspace>;
};

export type ModelsOrgUserWorkspace = {
    active?: boolean;
    /**
     * Deprecated, to be removed.  Use RoleID, or IsAdmin method if you must access this field.
     */
    admin?: boolean;
    cost?: number;
    default_currency?: string;
    groups?: Array<ModelsGroupDict>;
    inactive?: boolean;
    rate?: number;
    /**
     * Deprecated, to be removed
     */
    role?: string;
    role_id?: number;
    view_edit_billable_rates?: boolean;
    view_edit_labor_costs?: boolean;
    working_hours?: number;
    workspace_id?: number;
    workspace_name?: string;
    workspace_user_id?: number;
};

export type ModelsOrganization = {
    admins?: Array<ModelsOrganizationUserWithEmail>;
    all_preferences?: {
        [key: string]: string;
    };
    /**
     * Organization's creation date
     */
    created_at?: string;
    /**
     * Organization's delete date
     */
    deleted_at?: string;
    /**
     * Organization ID
     */
    id?: number;
    /**
     * Is true when the organization option is_multi_workspace_enabled is set
     */
    is_multi_workspace_enabled?: boolean;
    is_unified?: boolean;
    /**
     * How far back free workspaces in this org can access data.
     */
    max_data_retention_days?: number;
    /**
     * Maximum number of workspaces allowed for the organization
     */
    max_workspaces?: number;
    /**
     * Organization Name
     */
    name?: string;
    owner?: ModelsOrganizationUserWithEmail;
    /**
     * Organization plan ID
     */
    pricing_plan_id?: number;
    subscription?: ModelsOrganizationSubscription;
    /**
     * Whether the organization is currently suspended
     */
    suspended_at?: string;
    trial_info?: ModelsTrialInfo;
    /**
     * Organization's last modification date
     */
    updated_at?: string;
    /**
     * Number of organization users
     */
    user_count?: number;
};

export type ModelsOrganizationOwner = {
    avatar_url?: string;
    email?: string;
    id?: number;
    name?: string;
    organization_id?: number;
    organization_user_created_at?: string;
    organization_user_id?: number;
    organization_user_updated_at?: string;
    user_id?: number;
};

export type ModelsOrganizationSegmentation = {
    demo_requested?: boolean;
    full_name?: string;
    heard?: string;
    industries?: string;
    members_range?: string;
    organization_id?: number;
    reasons?: string;
    skipped_step?: string;
    user_id?: number;
    user_segments?: string;
};

export type ModelsOrganizationSimple = {
    created_at?: string;
    deleted_at?: string;
    id?: number;
    name?: string;
    suspended_at?: string;
    updated_at?: string;
};

export type ModelsOrganizationSubscription = {
    cancels_at?: string;
    created_at?: string;
    current_period_ends_at?: string;
    current_period_starts_at?: string;
    deleted_at?: string;
    enterprise?: boolean;
    organization_id?: number;
    plan_id?: number;
    plan_name?: string;
    pricing_plan_id?: number;
    seatsUpdatedAt?: string;
    site?: string;
    state?: string;
    trial_ended_at?: string;
    trial_plan_id?: number;
    trial_plan_name?: string;
    trial_pricing_plan_id?: number;
    trial_started_at?: string;
    updated_at?: string;
};

export type ModelsOrganizationUserSimple = {
    avatar_url?: string;
    inactive?: boolean;
    joined?: boolean;
    name?: string;
    user_id?: number;
};

export type ModelsOrganizationUserWithEmail = {
    email?: string;
    user_id?: number;
};

export type ModelsPaymentDetail = {
    created_at?: string;
    currency?: string;
    customer_id?: number;
    payment_type?: string;
    reference?: string;
    user_id?: number;
};

export type ModelsPaymentFailedResponse = {
    code?: string;
    decline_code?: string;
    doc_url?: string;
    invoice_total_amount?: number;
    message?: string;
    next_payment_attempt?: string;
    organization_id?: number;
};

export type ModelsPaymentInfo = {
    created_at?: string;
    description?: string;
    id?: number;
    status?: string;
};

export type ModelsPeriod = {
    created_at?: string;
    finished_on?: string;
    started_on?: string;
    subscription_id?: number;
    subscription_period_id?: number;
    trial?: boolean;
    user_count?: number;
};

export type ModelsPlan = {
    id?: number;
    max_user_count?: number;
    name?: string;
    pricing_plans?: Array<ModelsPricingPlan>;
    product_handle?: string;
};

export type ModelsPlanFeature = {
    description?: string;
    feature_id?: number;
    is_default_feature?: boolean;
    name?: string;
    trial_only?: boolean;
};

export type ModelsPlanWithFeatures = {
    active_at?: string;
    features?: Array<ModelsPlanFeature>;
    inactive_at?: string;
    max_user_count?: number;
    name?: string;
    plan_at?: string;
    plan_id?: number;
    prices?: Array<ModelsPricingPlan>;
    product_handle?: string;
    toggl_product_name?: string;
};

export type ModelsPostPayload = {
    /**
     * Name of the organization
     */
    name?: string;
    /**
     * Name of the workspace
     */
    workspace_name?: string;
};

export type ModelsPricingPlan = {
    amount_in_cents?: number;
    currency?: string;
    period?: number;
    plan?: ModelsPlan;
    plan_id?: number;
    price_point_handle?: string;
    pricing_plan_id?: number;
};

export type ModelsProject = {
    active_tasks?: number;
    archived?: boolean;
    billable?: boolean;
    client_name?: string;
    created_at?: string;
    creator?: string;
    deleted_at?: string;
    fixed_fee?: boolean;
    id?: number;
    project_name?: string;
    recurring?: boolean;
    visibility?: string;
};

export type ModelsProjectGroup = {
    group_id?: number;
    id?: number;
    pid?: number;
    wid?: number;
};

export type ModelsProjectSearchResult = {
    data?: Array<ModelsProject>;
    page?: number;
    page_size?: number;
    total_pages?: number;
};

export type ModelsProjectStatistics = {
    earliest_time_entry?: string;
    latest_time_entry?: string;
};

export type ModelsProjectUser = {
    /**
     * When was last modified
     */
    at?: string;
    /**
     * Group ID, legacy field
     */
    gid?: number;
    /**
     * Group ID
     */
    group_id?: number;
    /**
     * Project User ID
     */
    id?: number;
    /**
     * Custom labor cost for project user
     */
    labor_cost?: number | null;
    /**
     * Date for labor cost last updated
     */
    labor_cost_last_updated?: string;
    /**
     * Whether the user is manager of the project
     */
    manager?: boolean;
    /**
     * Project ID
     */
    project_id?: number;
    /**
     * Custom rate for project user
     */
    rate?: number | null;
    /**
     * Date for rate last updated
     */
    rate_last_updated?: string;
    /**
     * User ID
     */
    user_id?: number;
    /**
     * Workspace ID
     */
    workspace_id?: number;
};

export type ModelsProjectUserWithMeta = {
    /**
     * When was last modified
     */
    at?: string;
    avatar_url?: string;
    /**
     * Group ID, legacy field
     */
    gid?: number;
    /**
     * Group ID
     */
    group_id?: number;
    /**
     * Project User ID
     */
    id?: number;
    is_active?: boolean;
    /**
     * Custom labor cost for project user
     */
    labor_cost?: number | null;
    /**
     * Date for labor cost last updated
     */
    labor_cost_last_updated?: string;
    /**
     * Whether the user is manager of the project
     */
    manager?: boolean;
    /**
     * Project ID
     */
    project_id?: number;
    /**
     * Custom rate for project user
     */
    rate?: number | null;
    /**
     * Date for rate last updated
     */
    rate_last_updated?: string;
    /**
     * User ID
     */
    user_id?: number;
    user_name?: string;
    /**
     * Workspace ID
     */
    workspace_id?: number;
};

export type ModelsPutPayload = {
    /**
     * Name of the organization
     */
    name?: string;
};

export type ModelsRate = {
    /**
     * Amount of the rate
     */
    amount?: number;
    /**
     * Creation date of the rate
     */
    created_at?: string;
    creator_id?: number;
    /**
     * Deletion date of the rate, in case that is null it means the rates is active
     */
    deleted_at?: string;
    /**
     * End date time of the rate
     */
    end?: string;
    /**
     * Identifier of the rate
     */
    id?: number;
    /**
     * Planned task ID which the rate is applied
     */
    planned_task_id?: number;
    /**
     * Project ID which the rate is applied
     */
    project_id?: number;
    /**
     * Project user ID which the rate is applied
     */
    project_user_id?: number;
    rate_change_mode?: string;
    /**
     * Start date time of the rate
     */
    start?: string;
    type?: string;
    /**
     * Last update date of the rate
     */
    updated_at?: string;
    /**
     * Workspace ID which the rate is applied
     */
    workspace_id?: number;
    /**
     * Workspace user ID which the rate is applied
     */
    workspace_user_id?: number;
};

export type ModelsRecurringPeriod = {
    end_date?: string;
    start_date?: string;
};

export type ModelsSsoInvitation = {
    /**
     * AccountsSignupURL is a legacy field, should be removed one more after
     * this issue gets done https://github.com/toggl/accounts-fe/issues/704
     */
    accounts_signup_url?: string;
    code?: string;
    email?: string;
    organization_id?: number;
    organization_name?: string;
    sender_email?: string;
    sender_name?: string;
    sso?: boolean;
    token?: string;
};

export type ModelsSavedReport = {
    deleted_at?: string;
    fixed_daterange?: boolean;
    id?: number;
    isNAResource?: boolean;
    is_commenting_enabled?: boolean;
    name?: string;
    params?: string;
    public?: boolean;
    scheduled_email_gids?: UtilsInt64Slice;
    scheduled_email_uids?: UtilsInt64Slice;
    token?: string;
    uid?: number;
    updated_at?: string;
    updated_by?: number;
};

export type ModelsScheduledReport = {
    bookmark_id?: number;
    created_at?: string;
    creator_id?: number;
    deleted_at?: string;
    frequency?: number;
    group_ids?: Array<number>;
    report_id?: number;
    user_ids?: Array<number>;
    workspace_id?: number;
};

export type ModelsSimpleWorkspaceUser = {
    /**
     * Email of the user
     */
    email?: string;
    /**
     * Name of the user
     */
    fullname?: string;
    /**
     * Global user identifier
     */
    id?: number;
    /**
     * internal
     */
    inactive?: boolean;
    /**
     * internal
     */
    is_active?: boolean;
    /**
     * Flag indicating if user is admin
     * Deprecated
     */
    is_admin?: boolean;
    /**
     * Role of the user
     */
    role?: string;
};

export type ModelsStatistics = {
    admins?: Array<ModelsUserData>;
    groups_count?: number;
    members_count?: number;
};

export type ModelsSubdivision = {
    company_id?: number;
    country_id?: number;
    country_subdivision_id?: number;
    iso_code?: string;
    name?: string;
};

export type ModelsSubscription = {
    auto_renew?: boolean;
    card_details?: ModelsCardDetails;
    company_id?: number;
    contact_detail?: ModelsContactDetail;
    created_at?: string;
    currency?: string;
    customer_id?: number;
    deleted_at?: string;
    last_pricing_plan_id?: number;
    organization_id?: number;
    payment_details?: ModelsPaymentDetail;
    pricing_plan_id?: number;
    renewal_at?: string;
    subscription_id?: number;
    subscription_period?: ModelsPeriod;
    workspace_id?: number;
};

export type ModelsSuggestion = {
    accuracy?: number;
    billable?: boolean;
    description_match?: boolean;
    last_seen?: string;
    project_id?: number;
    tag_ids?: Array<number>;
    task_id?: number;
    workspace_id?: number;
};

export type ModelsTag = {
    /**
     * When was created/last modified
     */
    at?: string;
    /**
     * CreatorID the user who created the tag
     */
    creator_id?: number;
    /**
     * When was deleted
     */
    deleted_at?: string;
    /**
     * Tag ID
     */
    id?: number;
    /**
     * The external ID of the linked entity in the external system (e.g. JIRA/SalesForce)
     */
    integration_ext_id?: string;
    /**
     * The external type of the linked entity in the external system (e.g. JIRA/SalesForce)
     */
    integration_ext_type?: string;
    /**
     * The provider (e.g. JIRA/SalesForce) that has an entity linked to this Toggl Track entity
     */
    integration_provider?: string;
    /**
     * Tag name
     */
    name?: string;
    permissions?: string;
    /**
     * Workspace ID
     */
    workspace_id?: number;
};

export type ModelsTask = {
    /**
     * False when the task has been done
     */
    active?: boolean;
    /**
     * When the task was created/last modified
     */
    at?: string;
    avatar_url?: string | null;
    client_name?: string | null;
    /**
     * Estimation time for this task in seconds
     */
    estimated_seconds?: number | null;
    /**
     * Task ID
     */
    id?: number;
    /**
     * The external ID of the linked entity in the external system (e.g. JIRA/SalesForce)
     */
    integration_ext_id?: string;
    /**
     * The external type of the linked entity in the external system (e.g. JIRA/SalesForce)
     */
    integration_ext_type?: string;
    /**
     * The provider (e.g. JIRA/SalesForce) that has an entity linked to this Toggl Track entity
     */
    integration_provider?: string;
    /**
     * Task Name
     */
    name?: string;
    permissions?: string;
    project_billable?: boolean;
    /**
     * Metadata
     */
    project_color?: string;
    /**
     * Project ID
     */
    project_id?: number;
    project_is_private?: boolean | null;
    project_name?: string;
    /**
     * Rate for this task
     */
    rate?: number;
    /**
     * Last date for rate change
     */
    rate_last_updated?: string | null;
    /**
     * Whether this is a recurring task
     */
    recurring?: boolean;
    /**
     * Task assignee, if set above this will be the toggl_account_id for that user
     */
    toggl_accounts_id?: string | null;
    /**
     * The value tracked_seconds is in milliseconds, not in seconds.
     */
    tracked_seconds?: number;
    /**
     * Task assignee, if available
     */
    user_id?: number | null;
    user_name?: string | null;
    /**
     * Workspace ID
     */
    workspace_id?: number;
};

export type ModelsTimeEntry = {
    billable?: boolean;
    client_id?: number;
    client_name?: string;
    created_at?: string;
    created_with?: string;
    deleted_at?: string;
    description?: string;
    duration?: number;
    id?: number;
    project_id?: number;
    project_name?: string;
    start?: string;
    tags?: Array<string>;
    task_id?: number;
    task_name?: string;
    workspace_id?: number;
    workspace_name?: string;
};

export type ModelsTimeEntryChecklist = {
    time_entries_count_check?: boolean;
    time_entries_created_check?: boolean;
};

export type ModelsTimeEntryConstraints = {
    description_present?: boolean;
    project_present?: boolean;
    tag_present?: boolean;
    task_present?: boolean;
    time_entry_constraints_enabled?: boolean;
};

export type ModelsTimeEntryNotes = {
    /**
     * Time Entry ID
     */
    id?: number;
    /**
     * Notes
     */
    notes?: string;
};

export type ModelsTimeEntrySearchResult = {
    data?: Array<ModelsTimeEntry>;
    page?: number;
    page_size?: number;
    total_pages?: number;
};

export type ModelsTimelineEvent = {
    desktop_id?: string;
    end_time?: number;
    filename?: string;
    id?: number;
    idle?: boolean;
    start_time?: number;
    title?: string;
};

export type ModelsTimelineSettings = {
    record_timeline?: boolean;
};

export type ModelsTimesheet = {
    approved_or_rejected_at?: string;
    approved_or_rejected_id?: number;
    created_at?: string;
    deleted_at?: string;
    rejection_comment?: string;
    reminder_sent_at?: string;
    start_date?: string;
    status?: string;
    submitted_at?: string;
    timesheet_id?: number;
    timesheet_setup_id?: number;
    timezone?: string;
    updated_at?: string;
    working_hours_in_minutes?: number;
    workspace_id?: number;
};

export type ModelsTimesheetSetupError = {
    code?: string;
    message?: string;
};

export type ModelsTimezone = {
    name?: string;
    utc?: string;
};

export type ModelsTogglUser = {
    '2fa_enabled'?: boolean;
    /**
     * will be omitted if empty
     */
    api_token?: string;
    at?: string;
    beginning_of_week?: number;
    country_id?: number;
    created_at?: string;
    default_workspace_id?: number;
    email?: string;
    fullname?: string;
    has_password?: boolean;
    id?: number;
    image_url?: string;
    openid_email?: string;
    openid_enabled?: boolean;
    options?: ModelsOptions;
    timezone?: string;
    updated_at?: string;
};

export type ModelsTogglUserSimple = {
    active?: boolean;
    created_at?: string;
    default_workspace_id?: number;
    default_workspace_name?: string;
    deleted_at?: string;
    email?: string;
    fullname?: string;
    id?: number;
    updated_at?: string;
};

export type ModelsTrackReminder = {
    /**
     * Reminder creation time
     */
    created_at?: string;
    /**
     * Frequency of the reminder in days, should be either 1 or 7
     */
    frequency?: number;
    /**
     * Groups IDs to send the reminder to
     */
    group_ids?: Array<number>;
    /**
     * Reminder ID
     */
    reminder_id?: number;
    /**
     * Threshold is the number of hours after which the reminder will be sent
     */
    threshold?: number;
    /**
     * User IDs to send the reminder to
     */
    user_ids?: Array<number>;
    /**
     * Workspace ID
     */
    workspace_id?: number;
};

export type ModelsTransfer = {
    created_at?: string;
    current_owner_accepted?: boolean;
    current_owner_answered_at?: string;
    current_owner_id?: number;
    finished_at?: string;
    new_owner_accepted?: boolean;
    new_owner_answered_at?: string;
    new_owner_id?: number;
    organization_id?: number;
    outcome_name?: string;
    owner_transfer_id?: number;
    requester_id?: number;
};

export type ModelsTrialInfo = {
    /**
     * CanHaveInitialTrial is true if neither the organization nor the owner has never had a trial before
     */
    can_have_trial?: boolean;
    /**
     * What was the previous plan before the trial
     */
    last_pricing_plan_id?: number | null;
    /**
     * When the trial payment is due
     */
    next_payment_date?: string | null;
    /**
     * Whether the organization's subscription is currently on trial
     */
    trial?: boolean;
    /**
     * When a trial is available for this organization
     */
    trial_available?: boolean;
    /**
     * When the trial ends
     */
    trial_end_date?: string | null;
    trial_plan_id?: number | null;
};

export type ModelsUnifiedSubscriptionInvoice = {
    creation_date?: string;
    currency?: string;
    description?: string;
    hosted_url?: string;
    id?: string;
    invoice_number?: string;
    pdf_url?: string;
    status?: string;
    total_amount?: number;
};

export type ModelsUnifiedSubscriptionInvoiceList = {
    items?: Array<ModelsUnifiedSubscriptionInvoice>;
    next?: string;
};

export type ModelsUserData = {
    name?: string;
    user_id?: number;
};

export type ModelsUserInvoice = {
    billing_address?: string;
    created_at?: string;
    currency?: string;
    date?: string;
    deleted_at?: string;
    document_id?: string;
    due_date?: string;
    /**
     * The external ID of the linked entity in the external system (e.g. JIRA/SalesForce)
     */
    integration_ext_id?: string;
    /**
     * The external type of the linked entity in the external system (e.g. JIRA/SalesForce)
     */
    integration_ext_type?: string;
    /**
     * The provider (e.g. JIRA/SalesForce) that has an entity linked to this Toggl Track entity
     */
    integration_provider?: string;
    items?: Array<ModelsUserInvoiceItem>;
    message?: string;
    payment_terms?: string;
    purchase_number?: string;
    taxes?: Array<ModelsUserInvoiceTax>;
    updated_at?: string;
    user_id?: number;
    user_invoice_id?: number;
    workspace_address?: string;
    workspace_id?: number;
    workspace_logo?: string;
};

export type ModelsUserInvoiceItem = {
    amount?: number;
    description?: string;
    item_id?: number;
    quantity?: number;
};

export type ModelsUserInvoiceTax = {
    amount?: number;
    name?: string;
    tax_id?: number;
};

export type ModelsWorkspace = {
    /**
     * Current user is workspace admin
     * Deprecated
     */
    admin?: boolean;
    /**
     * deprecated
     */
    api_token?: string;
    /**
     * Timestamp of last workspace change
     */
    at?: string;
    /**
     * Workspace on Premium subscription
     */
    business_ws?: boolean;
    csv_upload?: ModelsCsvUpload;
    /**
     * Default currency, premium feature, optional, only for existing WS, will be 'USD' initially
     */
    default_currency?: string;
    /**
     * The default hourly rate, premium feature, optional, only for existing WS, will be 0.0 initially
     */
    default_hourly_rate?: number;
    /**
     * Disable timesheet view in the workspace
     */
    disable_timesheet_view?: boolean;
    hide_start_end_times?: boolean;
    /**
     * Calendar integration enabled
     */
    ical_enabled?: boolean;
    /**
     * URL of calendar
     */
    ical_url?: string;
    /**
     * Identifier of the workspace
     */
    id?: number;
    /**
     * Last modification of data in the workspace
     */
    last_modified?: string;
    /**
     * Limit public projects data in reports to admins.
     */
    limit_public_project_data?: boolean;
    /**
     * URL of workspace logo
     */
    logo_url?: string;
    /**
     * How far back free workspaces can access data.
     */
    max_data_retention_days?: number;
    /**
     * Name of the workspace
     */
    name?: string;
    /**
     * Only admins will be able to create projects, optional, only for existing WS, will be false initially
     */
    only_admins_may_create_projects?: boolean;
    /**
     * Only admins will be able to create tags, optional, only for existing WS, will be false initially
     */
    only_admins_may_create_tags?: boolean;
    /**
     * Only admins will be able to see the team dashboard, optional, only for existing WS, will be false initially
     */
    only_admins_see_team_dashboard?: boolean;
    /**
     * Identifier of the organization
     */
    organization_id?: number;
    /**
     * Permissions list
     */
    permissions?: string;
    /**
     * Workspace on Starter subscription
     */
    premium?: boolean;
    /**
     * New projects billable by default
     */
    projects_billable_by_default?: boolean;
    /**
     * Whether tracking time to projects will enforce billable setting to be respected.
     */
    projects_enforce_billable?: boolean;
    /**
     * Workspace setting for default project visbility.
     */
    projects_private_by_default?: boolean;
    /**
     * Timestamp of last workspace rate update
     */
    rate_last_updated?: string;
    /**
     * Whether reports should be collapsed by default, optional, only for existing WS, will be true initially
     */
    reports_collapse?: boolean;
    /**
     * Role of the current user in the workspace
     */
    role?: string;
    /**
     * Default rounding, premium feature, optional, only for existing WS. 0 - nearest, 1 - round up, -1 - round down
     */
    rounding?: number;
    /**
     * Default rounding in minutes, premium feature, optional, only for existing WS
     */
    rounding_minutes?: number;
    subscription?: ModelsSubscription;
    /**
     * Timestamp of suspension
     */
    suspended_at?: string;
    te_constraints?: ModelsTimeEntryConstraints;
    /**
     * Working hours in minutes
     */
    working_hours_in_minutes?: number;
};

export type ModelsWorkspacePreferences = {
    /**
     * Whether timesheet view is disabled for this workspace
     */
    disable_timesheet_view?: boolean;
    /**
     * This workspace works with duration only time entries
     */
    hide_start_end_times?: boolean;
    /**
     * Time of acceptance of the terms of service
     */
    inc_tos_accepted_at?: string;
    /**
     * User ID who accepted the terms of service
     */
    inc_tos_accepted_by?: number;
    /**
     * Pricing plan ID
     */
    initial_pricing_plan?: number;
    /**
     * Date on which "Lock Time Entries" feature was enabled
     */
    report_locked_at?: string;
    /**
     * Whether SSO is enabled for this workspace
     */
    single_sign_on?: boolean;
    /**
     * Date on which SSO was requested
     */
    sso_requested_at?: string;
};

export type ModelsWorkspaceSimple = {
    /**
     * Timestamp of workspace creation
     */
    created_at?: string;
    /**
     * Timestamp of workspace deletion
     */
    deleted_at?: string;
    /**
     * Identifier of the workspace
     */
    id?: number;
    /**
     * Name of the workspace
     */
    name?: string;
    /**
     * Identifier of the organization
     */
    organization_id?: number;
    /**
     * Name of the organization
     */
    organization_name?: string;
    total_users?: number;
    /**
     * Timestamp of last workspace update
     */
    updated_at?: string;
};

export type ModelsWorkspaceUser = {
    /**
     * Flag indicating whether use has 2FA enabled or not.
     */
    '2fa_enabled'?: boolean;
    /**
     * Flag indicating if user accepted the invitation
     */
    active?: boolean;
    /**
     * Flag indicating if user is admin
     */
    admin?: boolean;
    /**
     * Timestamp of the last update
     */
    at?: string;
    /**
     * URL of avatar
     */
    avatar_file_name?: string;
    /**
     * Email of the user
     */
    email?: string;
    group_ids?: UtilsInt64Slice;
    /**
     * Identifier of the user  workspace
     */
    id?: number;
    /**
     * Flag indicating if user was deactivated by admin of the workspace
     */
    inactive?: boolean;
    /**
     * internal
     */
    invitation_code?: string;
    /**
     * internal
     */
    invite_url?: string;
    /**
     * Flag indicating if user is a direct member of the workspace (is not assigned to the workspace using the group)
     */
    is_direct?: boolean;
    /**
     * Labor cost assigned to the user
     */
    labor_cost?: number;
    /**
     * Timestamp of the last labor cost update
     */
    labor_cost_last_updated?: string;
    /**
     * Name of the user
     */
    name?: string;
    /**
     * Flag indicating if user is admin inside organization
     */
    organization_admin?: boolean;
    /**
     * Rate assigned to the user
     */
    rate?: number;
    /**
     * Timestamp of the last rate update
     */
    rate_last_updated?: string;
    /**
     * Role of the user
     */
    role?: string;
    role_id?: number;
    /**
     * Timezone of the user
     */
    timezone?: string;
    /**
     * Global user identifier
     */
    uid?: number;
    /**
     * UserID alternative JSON field, only used by get-organization-workspaces-workspaceusers
     */
    user_id?: number;
    /**
     * Granular rate permission flags
     * Only takes effect on roles with conditional rate permissions
     */
    view_edit_billable_rates?: boolean;
    view_edit_labor_costs?: boolean;
    /**
     * Workspace identifier
     */
    wid?: number;
    /**
     * Working hours value in minutes
     */
    working_hours_in_minutes?: number;
    /**
     * Flag indicating if user is admin inside workspace
     */
    workspace_admin?: boolean;
    /**
     * UserID alternative JSON field, only used by get-organization-workspaces-workspaceusers
     */
    workspace_id?: number;
};

export type NotificationsRespDoc = {
    notifications?: unknown;
    page?: number;
    rows?: number;
    total?: number;
};

export type OauthProfile = {
    email?: string;
    id?: string;
    name?: string;
    provider?: string;
};

export type OrganizationBlacklistBody = {
    operation?: string;
};

export type OrganizationNewCustomerResponse = unknown;

export type OrganizationPostOrganizationReply = {
    id?: number;
    name?: string;
    permissions?: string;
    workspace_id?: number;
    workspace_name?: string;
};

export type OrganizationPremiumTrialPayload = {
    trial_end_date: string;
    trial_plan_id: number;
    trial_start_date: string;
};

export type OrganizationSubscriptionResponse = unknown;

export type OrganizationOption = {
    key?: string;
    value?: string;
};

export type OrganizationTrialInterval = {
    end_date?: string;
    start_date?: string;
};

export type ProjectPatchInput = {
    /**
     * Patch operation to perform, one of "add", "remove", "replace"
     */
    op?: string;
    /**
     * Path to the field to patch, example: "/color"
     */
    path?: string;
    /**
     * Value to set when operation is "add" or "replace", example: "#000000". The value type actually depends on the field being patched.
     */
    value?: {
        [key: string]: unknown;
    };
};

export type ProjectPayload = {
    /**
     * Whether the project is active or archived
     */
    active?: boolean;
    /**
     * Whether estimates are based on task hours, optional, premium feature
     */
    auto_estimates?: boolean;
    /**
     * Whether the project is set as billable, optional, premium feature
     */
    billable?: boolean;
    /**
     * Client ID, legacy
     */
    cid?: number;
    /**
     * Client ID, optional
     */
    client_id?: number;
    /**
     * Client name, optional
     */
    client_name?: string;
    /**
     * Project color
     */
    color?: string;
    /**
     * Project currency, optional, premium feature
     */
    currency?: string;
    /**
     * End date of a project timeframe
     */
    end_date?: string;
    /**
     * Estimated hours, optional, premium feature
     */
    estimated_hours?: number;
    external_reference?: string;
    /**
     * Project fixed fee, optional, premium feature
     */
    fixed_fee?: number;
    /**
     * Whether the project is private or not
     */
    is_private?: boolean;
    /**
     * Shared
     */
    is_shared?: boolean;
    /**
     * Project name
     */
    name?: string;
    /**
     * Hourly rate, optional, premium feature
     */
    rate?: number;
    /**
     * Rate change mode, optional, premium feature. Can be "start-today", "override-current", "override-all"
     */
    rate_change_mode?: string;
    /**
     * Project is recurring, optional, premium feature
     */
    recurring?: boolean;
    recurring_parameters?: ProjectRecurringParameters;
    /**
     * Start date of a project timeframe
     */
    start_date?: string;
    /**
     * Project is template, optional, premium feature
     */
    template?: boolean;
    /**
     * Template ID, optional
     */
    template_id?: number;
};

export type ProjectRecurringParameters = {
    /**
     * Recurring custom period, the "period" field must be "custom"
     */
    custom_period?: number;
    /**
     * Recurring period, example "monthly"
     */
    period?: string;
    /**
     * Recurring start date
     */
    project_start_date?: string;
};

export type ProjectRestoreParams = {
    projects?: Array<number>;
    restore_all_projects?: boolean;
};

export type ProjectsPatchFailure = {
    id?: number;
    message?: string;
};

export type ProjectsPatchOutput = {
    failure?: Array<ProjectsPatchFailure>;
    success?: Array<number>;
};

export type ProjectsPayload = {
    project_ids?: Array<number>;
};

export type ProjectsProjectTrend = {
    /**
     * Whether the project is set as billable, optional, premium feature.
     */
    billable?: boolean;
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    /**
     * Previous start date, example time.DateOnly.
     */
    previous_period_start?: string;
    /**
     * Project IDs, optional.
     */
    project_ids?: Array<number>;
    /**
     * Rounding, optional, duration rounding settings, premium feature.
     */
    rounding?: number;
    /**
     * RoundingMinutes, optional, duration rounding minutes settings, premium feature.
     */
    rounding_minutes?: number;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
};

export type ProjectsProjectTrends = {
    current_period_seconds?: Array<number>;
    previous_period_seconds?: Array<number>;
    project_id?: number;
    start?: string;
    user_ids?: Array<number>;
};

export type ProjectsReport = {
    currency?: string;
    graph?: ProjectsReportGraph;
    table?: ProjectsReportTable;
};

export type ProjectsReportTable = Array<ProjectsReportTableRow>;

export type ProjectsReportTableRow = {
    billable_seconds?: number;
    color?: string;
    currency?: string;
    earnings?: number;
    labour_cost?: number;
    name?: string;
    project_id?: number;
    total_seconds?: number;
};

export type ProjectsDataTrendsGraph = {
    data?: Array<ProjectsDataTrendsGraphData>;
    resolution?: string;
};

export type ProjectsDataTrendsGraphData = {
    date?: string;
    projects?: Array<ProjectsDataTrendsProject>;
};

export type ProjectsDataTrendsProject = {
    billable_seconds?: number;
    color?: string;
    currency?: string;
    earnings?: number;
    name?: string;
    project_id?: number;
    total_seconds?: number;
};

export type ProjectsDataTrendsReport = {
    currency?: string;
    graph?: ProjectsDataTrendsGraph;
};

export type ProjectsGraphArray = Array<ProjectsGraphItem>;

export type ProjectsGraphItem = {
    date?: string;
    earnings?: number;
    labour_cost?: number;
};

export type ProjectsPatchPost = Array<ProjectPatchInput>;

export type ProjectsPinnedProjectPayload = {
    pin?: boolean;
};

export type ProjectsReportGraph = {
    data?: ProjectsGraphArray;
    resolution?: string;
};

export type ProjectsTaskCountPayload = {
    project_ids?: Array<number>;
};

export type PushDeletePushServicesUnsubscribe = {
    fcm_registration_token?: string;
};

export type PushPostPushServicesSubscribe = {
    fcm_registration_token?: string;
};

export type RatesCreationRequest = {
    /**
     * Amount of the rate, required, must be greater than 0
     */
    amount?: number;
    /**
     * Level of the rate, required, must be one of: 'workspace', 'workspace_user', 'project', 'project_user', 'task'
     */
    level: string;
    /**
     * Identifier of the level, required
     */
    level_id: number;
    /**
     * Mode of the rate, required if Start is not informed, must be one of: 'override-all', 'override-current', 'start-today'
     */
    mode?: string;
    /**
     * Start date time of the rate, required if Mode is not informed, must be a valid date time
     */
    start?: string;
    /**
     * Type of the rate, required, must be one of 'billable_rates', 'labor_rates'
     */
    type?: string;
};

export type RelatedUserWithRelated = {
    '2fa_enabled'?: boolean;
    /**
     * will be omitted if empty
     */
    api_token?: string;
    at?: string;
    /**
     * AuthorizationUpdatedAt timestamp when the authorization user session object was last updated.
     */
    authorization_updated_at?: string;
    beginning_of_week?: number;
    /**
     * Clients, null if with_related_data was not set to true or if the user does not have any clients
     */
    clients?: Array<ModelsClient>;
    country_id?: number;
    created_at?: string;
    default_workspace_id?: number;
    email?: string;
    fullname?: string;
    has_password?: boolean;
    id?: number;
    image_url?: string;
    /**
     * will be omitted if empty
     */
    intercom_hash?: string;
    oauth_providers?: Array<string>;
    openid_email?: string;
    openid_enabled?: boolean;
    options?: ModelsOptions;
    /**
     * Projects, null if with_related_data was not set to true or if the user does not have any projects
     */
    projects?: Array<ModelsProject>;
    /**
     * Tags, null if with_related_data was not set to true, or if the user does not have any tags
     */
    tags?: Array<ModelsTag>;
    /**
     * Tasks, null if with_related_data was not set to true or if the user does not have any tasks
     */
    tasks?: Array<ModelsTask>;
    /**
     * TimeEntries, null if with_related_data was not set to true or if the user does not have any time entries
     */
    time_entries?: Array<ModelsTimeEntry>;
    timezone?: string;
    updated_at?: string;
    /**
     * Workspaces, null if with_related_data was not set to true or if the user does not have any workspaces
     */
    workspaces?: Array<ModelsWorkspace>;
};

export type RemindersPayload = {
    /**
     * Frequency of the reminder in days, should be either 1 or 7
     */
    frequency?: number;
    /**
     * Group IDs to send the reminder to, can be omitted if user_ids is provided
     */
    group_ids?: Array<number>;
    /**
     * Threshold is the number of hours after which the reminder will be sent
     */
    threshold?: number;
    /**
     * User IDs to send the reminder to, can be omitted if group_ids is provided
     */
    user_ids?: Array<number>;
};

export type RemindersPayload2 = {
    /**
     * Frequency of the reminder in days, should be either 1 or 7
     */
    frequency?: number;
    /**
     * Group IDs to send the reminder to, can be omitted if user_ids is provided
     */
    group_ids?: Array<number>;
    /**
     * Threshold is the number of hours after which the reminder will be sent
     */
    threshold?: number;
    /**
     * User IDs to send the reminder to, can be omitted if group_ids is provided
     */
    user_ids?: Array<number>;
};

export type RolesPermission = {
    description?: string;
    entity?: string;
    name?: string;
    permission_id?: number;
};

export type RolesRole = {
    code?: string;
    description?: string;
    entity?: string;
    name?: string;
    organization_id?: number;
    permissions?: Array<RolesPermission>;
    role_id?: number;
};

export type RolesCreateOrganizationRoleParams = {
    code?: string;
    description?: string;
    entity?: string;
    name?: string;
};

export type RolesDuplicateOrganizationRoleParams = {
    code?: string;
};

export type RolesFindRoleParams = {
    code?: string;
    organization_id?: number;
};

export type RolesGetOrganizationRolesForUsersBody = {
    user_ids?: Array<number>;
};

export type RolesUpdateOrganizationRoleParams = {
    description?: string;
    entity?: string;
    name?: string;
    permissions?: Array<number>;
};

export type Saml2LoginResponse = {
    sso_url?: string;
};

export type SavedDetailedReportData = {
    report?: Array<DetailedGroupedTimeEntry>;
    totals?: TotalsReportData;
};

export type SavedListParams = {
    fixed_dates?: boolean;
    name?: string;
    page?: number;
    per_page?: number;
    public?: boolean;
    requestingUserID?: number;
    scheduled?: boolean;
    sort_direction?: string;
    sort_field?: string;
};

export type SavedPayload = {
    fixed_daterange?: boolean;
    id?: number;
    name?: string;
    params?: {
        [key: string]: unknown;
    };
    public?: boolean;
    regenerate_token?: boolean;
};

export type SavedReportOutput = {
    detailed_results?: SavedDetailedReportData;
    dictionaries?: DictionaryReportDictionaries;
    features?: {
        [key: string]: boolean;
    };
    fixed_daterange?: boolean;
    hide_amounts?: boolean;
    input_params?: {
        [key: string]: unknown;
    };
    is_commenting_enabled?: boolean;
    public?: boolean;
    report_name?: string;
    report_type?: string;
    saved_params?: {
        [key: string]: unknown;
    };
    summary_results?: SavedSummaryReportData;
    weekly_results?: SavedWeeklyReportData;
    workspace_logo?: string;
};

export type SavedSummaryReportData = {
    report?: SummaryReportData;
    totals?: TotalsReportData;
};

export type SavedWeeklyReportData = {
    report?: Array<WeeklyDataRow>;
    totals?: TotalsReportData;
};

export type ScheduledPayload = {
    bookmark_id?: number;
    frequency?: number;
    group_ids?: Array<number>;
    user_ids?: Array<number>;
};

export type SeatslogsOrganizationSeatsLog = {
    created_at?: string;
    organization_id?: number;
    organization_seat_log_id?: number;
    organization_user_ids?: UtilsInt64Slice;
    reserved_seats?: number;
};

export type SeatslogsPaginatedOrganizationSeatsLogs = {
    data?: Array<SeatslogsOrganizationSeatsLog>;
    page?: number;
    per_page?: number;
    total_count?: number;
};

export type ServiceNotification = {
    actions?: string;
    content?: string;
    created_at?: string;
    dismissed_at?: string;
    expires_at?: string;
    metadata?: string;
    notification_id?: number;
    notification_type?: string;
    organization_id?: number;
    product_id?: number;
    project_id?: number;
    read_at?: string;
    title?: string;
    user_id?: number;
    workspace_id?: number;
};

export type SessionCheckWorkspaceUsersPayload = {
    /**
     * If true, then it includes the inactive users in the check.
     */
    include_inactive?: boolean;
    /**
     * List of users to check.
     */
    users?: Array<number>;
};

export type SharedBulkDeleteInputData = {
    ids?: Array<number>;
};

export type SmailContactPayload = {
    Email?: string;
    Message?: string;
    Name?: string;
};

export type SmailDemoPayload = {
    Email?: string;
    FirstName?: string;
    LastName?: string;
    Phone?: string;
    Purpose?: string;
    Source?: string;
    TeamSize?: string;
};

export type SmailMeetPayload = {
    email?: string;
    location?: string;
};

export type SsoConfirmation = {
    confirmation_code?: string;
};

export type SubscriptionOutData = {
    auto_renew?: boolean;
    billing_period_in_months?: number;
    campaign_available?: boolean;
    cancel_date?: string;
    card_details?: ModelsCardDetails;
    company_id?: number;
    contact_details?: ModelsContactDetail;
    currency?: string;
    current_period_ends_at?: string;
    current_period_starts_at?: string;
    customer_id?: number;
    /**
     * Deprecated: this field will be replaced by CurrentPeriodEndsAt
     */
    end_date?: string;
    enterprise?: boolean;
    /**
     * temporary flag which is true iff there is at least one admin in the organization,
     * who has the `multi_workspace_payments` beta flag enabled
     */
    is_subscription_beta?: boolean;
    is_unified?: boolean;
    last_invoice?: SubscriptionInvoiceInfo;
    last_payment?: ModelsPaymentInfo;
    last_pricing_plan_id?: number;
    new_signup_trial?: boolean;
    next_payment_date?: string;
    payment_failed?: boolean;
    payment_method?: string;
    plan_name?: string;
    /**
     * Legacy fields (kept for compatibility with FE)
     */
    pricing_plan_id?: number;
    renewal_at?: string;
    renewal_date?: string;
    seat_cost_in_cents?: number;
    seats?: number;
    site?: string;
    /**
     * Deprecated: this field will be replaced by CurrentPeriodStartsAt
     */
    start_date?: string;
    state?: string;
    subscription_created_at?: string;
    subscription_period?: ModelsPeriod;
    trial_available?: boolean;
    trial_end_date?: string;
    trial_start_date?: string;
};

export type SubscriptionCreateUnifiedSubsRequest = {
    pricing_plan_tag?: string;
};

export type SubscriptionInvoiceInfo = {
    amount?: number;
    created_at?: string;
    currency_id?: number;
    due?: string;
    id?: number;
    paid_at?: string;
    tax_percentage?: number;
    total_amount?: number;
};

export type SubscriptionPayload = {
    data: {
        [key: string]: unknown;
    };
};

export type SubscriptionResponsesSubmittedPayload = {
    responses_submitted?: ModelsDiscountRequestResponses;
};

export type SubscriptionUpdateUnifiedSubsRequest = {
    pricing_plan_tag?: string;
};

export type SummaryAudit = {
    group_filter?: SummaryAuditGroupFilter;
    /**
     * Whether empty groups should be displayed, default false, premium feature.
     */
    show_empty_groups?: boolean;
    /**
     * Whether tacked groups should be displayed, default true, premium feature.
     */
    show_tracked_groups?: boolean;
};

export type SummaryAuditGroupFilter = {
    /**
     * Audit currency, optional, example "USD", premium feature.
     */
    currency?: string;
    /**
     * Audit max amount in cents, optional, premium feature.
     */
    max_amount_cents?: number;
    /**
     * Audit max duration in seconds, optional, premium feature.
     */
    max_duration_seconds?: number;
    /**
     * Audit min amount in cents, optional, premium feature.
     */
    min_amount_cents?: number;
    /**
     * Audit min duration in seconds, optional, premium feature.
     */
    min_duration_seconds?: number;
};

export type SummaryExportPdfPost = {
    audit?: SummaryAudit;
    /**
     * Whether the time entry is set as billable, optional, premium feature.
     */
    billable?: boolean;
    cents_separator?: string;
    /**
     * Client IDs, optional, filtering attribute. To filter records with no clients, use [null].
     */
    client_ids?: Array<number>;
    /**
     * Whether collapse others, optional, default false.
     */
    collapse?: boolean;
    /**
     * Date format, optional, default "MM/DD/YYYY". Can be "MM/DD/YYYY", "DD-MM-YYYY", "MM-DD-YYYY", "YYYY-MM-DD", "DD/MM/YYYY" or "DD.MM.YYYY".
     */
    date_format?: string;
    /**
     * Description, optional, filtering attribute.
     */
    description?: string;
    /**
     * DistinguishRates will create new subgroups for each rate, optional, default false.
     */
    distinguish_rates?: boolean;
    /**
     * Duration format, optional, default "classic". Can be "classic", "decimal" or "improved".
     */
    duration_format?: 'classic' | 'decimal' | 'improved';
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    /**
     * Group IDs, optional, filtering attribute.
     */
    group_ids?: Array<number>;
    /**
     * Grouping option, optional.
     */
    grouping?: string;
    /**
     * Whether amounts should be hidden, optional, default false.
     */
    hide_amounts?: boolean;
    /**
     * Whether rates should be hidden, optional, default false.
     */
    hide_rates?: boolean;
    /**
     * Whether time entry IDs should be included in the results, optional, default false. Not applicable for export.
     */
    include_time_entry_ids?: boolean;
    /**
     * Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.
     */
    max_duration_seconds?: number;
    /**
     * Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.
     */
    min_duration_seconds?: number;
    /**
     * Order by option, optional, default title. Can be title or duration.
     */
    order_by?: string;
    /**
     * Order direction, optional. Can be ASC or DESC.
     */
    order_dir?: string;
    /**
     * Project IDs, optional, filtering attribute. To filter records with no projects, use [null].
     */
    project_ids?: Array<number>;
    /**
     * Graph resolution, optional. Allow clients to explicitly request a resolution.
     */
    resolution?: string;
    /**
     * Whether time should be rounded, optional, default from user preferences.
     */
    rounding?: number;
    /**
     * Rounding minutes value, optional, default from user preferences. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.
     */
    rounding_minutes?: number;
    startTime?: string;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
    /**
     * SubGrouping option, optional.
     */
    sub_grouping?: string;
    /**
     * Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].
     */
    tag_ids?: Array<number>;
    /**
     * Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].
     */
    task_ids?: Array<number>;
    /**
     * TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.
     */
    time_entry_ids?: Array<number>;
    /**
     * User IDs, optional, filtering attribute.
     */
    user_ids?: Array<number>;
};

export type SummaryExportPost = {
    audit?: SummaryAudit;
    /**
     * Whether the time entry is set as billable, optional, premium feature.
     */
    billable?: boolean;
    /**
     * Client IDs, optional, filtering attribute. To filter records with no clients, use [null].
     */
    client_ids?: Array<number>;
    /**
     * Whether collapse others, optional, default false.
     */
    collapse?: boolean;
    /**
     * Description, optional, filtering attribute.
     */
    description?: string;
    /**
     * DistinguishRates will create new subgroups for each rate, optional, default false.
     */
    distinguish_rates?: boolean;
    /**
     * Duration format, optional, default "classic". Can be "classic", "decimal" or "improved".
     */
    duration_format?: 'classic' | 'decimal' | 'improved';
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    /**
     * Group IDs, optional, filtering attribute.
     */
    group_ids?: Array<number>;
    /**
     * Grouping option, optional.
     */
    grouping?: string;
    /**
     * Whether amounts should be hidden, optional, default false.
     */
    hide_amounts?: boolean;
    /**
     * Whether rates should be hidden, optional, default false.
     */
    hide_rates?: boolean;
    /**
     * Whether time entry IDs should be included in the results, optional, default false. Not applicable for export.
     */
    include_time_entry_ids?: boolean;
    /**
     * Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.
     */
    max_duration_seconds?: number;
    /**
     * Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.
     */
    min_duration_seconds?: number;
    /**
     * Order by option, optional, default title. Can be title or duration.
     */
    order_by?: string;
    /**
     * Order direction, optional. Can be ASC or DESC.
     */
    order_dir?: string;
    /**
     * Project IDs, optional, filtering attribute. To filter records with no projects, use [null].
     */
    project_ids?: Array<number>;
    /**
     * Whether time should be rounded, optional, default from user preferences.
     */
    rounding?: number;
    /**
     * Rounding minutes value, optional, default from user preferences. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.
     */
    rounding_minutes?: number;
    startTime?: string;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
    /**
     * SubGrouping option, optional.
     */
    sub_grouping?: string;
    /**
     * Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].
     */
    tag_ids?: Array<number>;
    /**
     * Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].
     */
    task_ids?: Array<number>;
    /**
     * TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.
     */
    time_entry_ids?: Array<number>;
    /**
     * User IDs, optional, filtering attribute.
     */
    user_ids?: Array<number>;
};

export type SummaryReportData = {
    groups?: Array<unknown>;
};

export type SummaryReportPost = {
    audit?: SummaryAudit;
    /**
     * Whether the time entry is set as billable, optional, premium feature.
     */
    billable?: boolean;
    /**
     * Client IDs, optional, filtering attribute. To filter records with no clients, use [null].
     */
    client_ids?: Array<number>;
    /**
     * Description, optional, filtering attribute.
     */
    description?: string;
    /**
     * DistinguishRates will create new subgroups for each rate, optional, default false.
     */
    distinguish_rates?: boolean;
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    /**
     * Group IDs, optional, filtering attribute.
     */
    group_ids?: Array<number>;
    /**
     * Grouping option, optional.
     */
    grouping?: string;
    /**
     * Whether time entry IDs should be included in the results, optional, default false. Not applicable for export.
     */
    include_time_entry_ids?: boolean;
    /**
     * Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.
     */
    max_duration_seconds?: number;
    /**
     * Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.
     */
    min_duration_seconds?: number;
    /**
     * Project IDs, optional, filtering attribute. To filter records with no projects, use [null].
     */
    project_ids?: Array<number>;
    /**
     * Whether time should be rounded, optional, default from user preferences.
     */
    rounding?: number;
    /**
     * Rounding minutes value, optional, default from user preferences. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.
     */
    rounding_minutes?: number;
    startTime?: string;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
    /**
     * SubGrouping option, optional.
     */
    sub_grouping?: string;
    /**
     * Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].
     */
    tag_ids?: Array<number>;
    /**
     * Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].
     */
    task_ids?: Array<number>;
    /**
     * TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.
     */
    time_entry_ids?: Array<number>;
    /**
     * User IDs, optional, filtering attribute.
     */
    user_ids?: Array<number>;
};

export type TagsPayload = {
    /**
     * Tag name
     */
    name?: string;
};

export type TaskPatchFailure = {
    id?: number;
    message?: string;
};

export type TaskPatchInput = {
    op?: string;
    path?: string;
    value?: unknown;
};

export type TaskPatchOutput = {
    failure?: Array<TaskPatchFailure>;
    success?: Array<number>;
};

export type TaskPayload = {
    /**
     * Use false to mark the task as done
     */
    active?: boolean;
    /**
     * Task estimation in seconds
     */
    estimated_seconds?: number;
    /**
     * Name
     */
    name?: string;
    /**
     * Creator ID, if omitted, will use requester user ID
     */
    user_id?: number;
};

export type TaskResponse = {
    data?: Array<ModelsTask>;
    page?: number;
    per_page?: number;
    sort_field?: string;
    sort_order?: string;
    total_count?: number;
};

export type TasksTaskStatus = {
    billable_amount?: number;
    billable_seconds?: number;
    currency?: string;
    estimated_seconds?: number;
    id?: number;
    tracked_seconds?: number;
};

export type TasksTasksPost = {
    active?: boolean;
    ids?: Array<number>;
    name?: string;
    page_size?: number;
    project_active?: boolean;
    project_ids?: Array<number>;
    start?: number;
    user_ids?: Array<number>;
};

export type TasksTasksStatusPost = {
    /**
     * Time entries IDs.
     */
    ids?: Array<number>;
};

export type TimeentriesBulkGetSharingRequest = {
    time_entry_id?: number;
    workspace_id?: number;
};

export type TimeentriesBulkGetSharingResponse = {
    is_accepted?: boolean;
    time_entry_id?: number;
    time_entry_invitation_id?: number;
    user_id?: number;
    user_name?: string;
    workspace_id?: number;
};

export type TimeentriesGetTimEntryInvitationsResponse = {
    shared_by_user_id?: number;
    shared_by_user_name?: string;
    time_entry?: ModelsTimeEntry;
    time_entry_invitation_id?: number;
    workspace_id?: number;
};

export type TimeentryEventMetadata = {
    origin_feature?: string;
    visible_goals_count?: number;
};

export type TimeentryPatchFailure = {
    /**
     * The ID for which the patch operation failed.
     */
    id?: number;
    /**
     * The operation failure reason.
     */
    message?: string;
};

export type TimeentryPatchInput = {
    /**
     * Operation (add/remove/replace)
     */
    op?: string;
    /**
     * The path to the entity to patch (e.g. /description)
     */
    path?: string;
    /**
     * The new value for the entity in path.
     */
    value?: {
        [key: string]: unknown;
    };
};

export type TimeentryPatchOutput = {
    failure?: Array<TimeentryPatchFailure>;
    /**
     * The IDs for which the patch was succesful.
     */
    success?: Array<number>;
};

export type TimeentryPayload = {
    /**
     * Whether the time entry is marked as billable, optional, default false
     */
    billable?: boolean;
    /**
     * Must be provided when creating a time entry and should identify the service/application used to create it
     */
    created_with?: string;
    /**
     * Time entry description, optional
     */
    description?: string;
    /**
     * Time entry duration. For running entries should be negative, preferable -1
     */
    duration?: number;
    /**
     * Deprecated: Used to create a time entry with a duration but without a stop time. This parameter can be ignored.
     */
    duronly?: boolean;
    event_metadata?: TimeentryEventMetadata;
    /**
     * Project ID, legacy field
     */
    pid?: number;
    /**
     * Project ID, optional
     */
    project_id?: number;
    /**
     * List of user IDs to share this time entry with
     */
    shared_with_user_ids?: Array<number>;
    /**
     * Start time in UTC, required for creation. Format: 2006-01-02T15:04:05Z
     */
    start?: string;
    /**
     * If provided during creation, the date part will take precedence over the date part of "start". Format: 2006-11-07
     */
    start_date?: string;
    /**
     * Stop time in UTC, can be omitted if it's still running or created with "duration".
     * If "stop" and "duration" are provided, values must be consistent (start + duration == stop)
     */
    stop?: string;
    /**
     * Can be "add" or "delete". Used when updating an existing time entry
     */
    tag_action?: string;
    /**
     * IDs of tags to add/remove
     */
    tag_ids?: Array<number>;
    /**
     * Names of tags to add/remove. If name does not exist as tag, one will be created automatically
     */
    tags?: Array<string>;
    /**
     * Task ID, optional
     */
    task_id?: number;
    /**
     * Task ID, legacy field
     */
    tid?: number;
    /**
     * Time Entry creator ID, legacy field
     */
    uid?: number;
    /**
     * Time Entry creator ID, if omitted will use the requester user ID
     */
    user_id?: number;
    /**
     * Workspace ID, legacy field
     */
    wid?: number;
    /**
     * Workspace ID, required
     */
    workspace_id?: number;
};

export type TimesheetsApiTimesheet = {
    approved_or_rejected_at?: string;
    approved_or_rejected_id?: number;
    approved_or_rejected_name?: string;
    approver_avatar_url?: string;
    approver_id?: number;
    approver_name?: string;
    approvers?: Array<TimesheetsApprover>;
    end_date?: string;
    errors?: Array<TimesheetsTimesheetError>;
    member_avatar_url?: string;
    member_id?: number;
    member_name?: string;
    period_editable?: boolean;
    period_end?: string;
    period_locked?: boolean;
    period_start?: string;
    periodicity?: string;
    permissions?: string;
    rejection_comment?: string;
    reminder_day?: string;
    reminder_sent_at?: string;
    reminder_time?: string;
    reviews?: Array<TimesheetsReview>;
    start_date?: string;
    status?: string;
    submitted_at?: string;
    timesheet_setup_id?: number;
    working_hours_in_minutes?: number;
    workspace_id?: number;
};

export type TimesheetsApprover = {
    avatar_url?: string;
    name?: string;
    user_id?: number;
};

export type TimesheetsGetPaginatedResponse = {
    data?: Array<TimesheetsApiTimesheet>;
    page?: number;
    per_page?: number;
    total_count?: number;
};

export type TimesheetsPutBatchTimesheetPayload = {
    rejection_comment?: string;
    start_date?: string;
    status?: string;
    timesheet_setup_id?: number;
};

export type TimesheetsReview = {
    approved?: boolean;
    avatar_url?: string;
    name?: string;
    rejection_comment?: string;
    user_id?: number;
};

export type TimesheetsTimesheetError = {
    code?: string;
    message?: string;
};

export type TimesheetsTimesheetHoursResponse = {
    start_date?: string;
    timesheet_setup_id?: number;
    total_seconds?: number;
    working_hours_in_minutes?: number;
};

export type TimesheetsPostTimesheetHoursPayload = {
    start_date?: string;
    timesheet_setup_id?: number;
};

export type TimesheetsPutTimesheetPayload = {
    rejection_comment?: string;
    status?: string;
};

export type TimesheetsetupsApiTimesheetSetup = {
    approver_avatar_url?: string;
    approver_id?: number;
    approver_name?: string;
    approvers?: Array<TimesheetsetupsApprovers>;
    end_date?: string;
    errors?: Array<ModelsTimesheetSetupError>;
    id?: number;
    member_avatar_url?: string;
    member_id?: number;
    member_name?: string;
    periodicity?: string;
    permissions?: string;
    reminder_day?: string;
    reminder_time?: string;
    start_date?: string;
    workspace_id?: number;
};

export type TimesheetsetupsApprovers = {
    avatar_url?: string;
    name?: string;
    user_id?: number;
};

export type TimesheetsetupsGetPaginatedResponse = {
    data?: Array<TimesheetsetupsApiTimesheetSetup>;
};

export type TimesheetsetupsCreatePayload = {
    approver_id?: number;
    approver_ids?: Array<number>;
    member_ids?: Array<number>;
    periodicity?: string;
    reminder_day?: string;
    reminder_time?: string;
    start_date?: string;
};

export type TimesheetsetupsUpdatePayload = {
    approver_id?: number;
    approver_ids?: Array<number>;
    end_date?: string;
    reminder_day?: string;
    reminder_time?: string;
};

export type TotalsGraph = {
    billable_amount_in_cents?: number;
    by_rate?: {
        [key: string]: number;
    };
    labour_cost_in_cents?: number;
    seconds?: number;
};

export type TotalsReportData = {
    billable_amount_in_cents?: number;
    graph?: Array<TotalsGraph>;
    labour_cost_in_cents?: number;
    rates?: Array<BaseBillableHourlyRate>;
    resolution?: string;
    seconds?: number;
    tracked_days?: number;
};

export type TotalsReportPost = {
    /**
     * Whether the time entry is set as billable, optional, premium feature.
     */
    billable?: boolean;
    /**
     * Client IDs, optional, filtering attribute. To filter records with no clients, use [null].
     */
    client_ids?: Array<number>;
    /**
     * Description, optional, filtering attribute.
     */
    description?: string;
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    /**
     * Totals granularity, optional, overrides resolution values. Possible values: day, week and month.
     */
    granularity?: string;
    /**
     * Group IDs, optional, filtering attribute.
     */
    group_ids?: Array<number>;
    /**
     * Whether time entries should be grouped, optional, default false.
     */
    grouped?: boolean;
    /**
     * Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.
     */
    max_duration_seconds?: number;
    /**
     * Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.
     */
    min_duration_seconds?: number;
    /**
     * Project IDs, optional, filtering attribute. To filter records with no projects, use [null].
     */
    project_ids?: Array<number>;
    /**
     * Graph resolution, optional. Allow clients to explicitly request a resolution.
     */
    resolution?: string;
    /**
     * Whether time should be rounded, optional, default from user preferences.
     */
    rounding?: number;
    /**
     * Rounding minutes value, optional, default from user preferences. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.
     */
    rounding_minutes?: number;
    startTime?: string;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
    /**
     * Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].
     */
    tag_ids?: Array<number>;
    /**
     * Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].
     */
    task_ids?: Array<number>;
    /**
     * Time entry IDs, optional.
     */
    time_entry_ids?: Array<number>;
    /**
     * User IDs, optional, filtering attribute.
     */
    user_ids?: Array<number>;
    /**
     * Whether results should be returned in line, optional, default false.
     */
    withInlineRates?: boolean;
    /**
     * Whether Graph information should be loaded, optional,  default false.
     */
    with_graph?: boolean;
};

export type TrialOrganizationTrialPlan = {
    endDate?: string;
    organizationID?: number;
    planID?: number;
    startDate?: string;
};

export type TypesRole = {
    code?: string;
    description?: string;
    entity?: string;
    name?: string;
    organization_id?: number;
    permissions?: Array<unknown>;
    role_id?: number;
};

export type TypesUserRole = {
    is_active?: boolean;
    organization_id?: number;
    project_id?: number;
    role_id?: number;
    user_id?: number;
    workspace_id?: number;
};

export type UserAssignmentsPayload = {
    group_id?: number;
    joined?: boolean;
    operation?: string;
    user_id?: number;
};

export type UserFailure = {
    /**
     * Organization user ID
     */
    id?: number;
    /**
     * Found error message
     */
    message?: string;
};

export type UserFlags = {
    [key: string]: unknown;
};

export type UserOutput = {
    /**
     * List of found errors
     */
    failure?: Array<UserFailure>;
    /**
     * List of org user IDs that were successfully patched
     */
    success?: Array<number>;
};

export type UserPatchParams = {
    /**
     * Organization user IDs to be deleted
     */
    delete?: Array<number>;
};

export type UserPayload = {
    /**
     * deprecated
     */
    admin?: boolean;
    inactive?: boolean;
    /**
     * Custom labor cost for project user
     */
    labor_cost?: number;
    labor_cost_change_mode?: string;
    /**
     * for explicit NULL-s, add field name here
     */
    postedFields?: Array<string>;
    /**
     * Paid feature
     */
    rate?: number;
    /**
     * Paid feature
     */
    rate_change_mode?: string;
    /**
     * Allowed inputs: "admin", "user", "projectlead" and "teamlead"
     */
    role?: string;
    role_id?: number;
    view_edit_billable_rates?: boolean;
    view_edit_labor_costs?: boolean;
    /**
     * Paid feature
     */
    working_hours_in_minutes?: number;
};

export type UserPostPayload = {
    /**
     * Labor cost for this project user
     */
    labor_cost?: number;
    /**
     * Labor cost change mode for this project user. Can be "start-today", "override-current", "override-all"
     */
    labor_cost_change_mode?: string;
    /**
     * Whether the user will be manager of the project
     */
    manager?: boolean;
    /**
     * Project ID
     */
    project_id?: number;
    /**
     * Rate for this project user
     */
    rate?: number;
    /**
     * Rate change mode for this project user. Can be "start-today", "override-current", "override-all"
     */
    rate_change_mode?: string;
    /**
     * User ID
     */
    user_id?: number;
};

export type UserPutPayload = {
    /**
     * Labor cost for this project user
     */
    labor_cost?: number;
    /**
     * Labor cost change mode for this project user. Can be "start-today", "override-current", "override-all"
     */
    labor_cost_change_mode?: string;
    /**
     * Whether the user will be manager of the project
     */
    manager?: boolean;
    /**
     * Rate for this project user
     */
    rate?: number;
    /**
     * Rate change mode for this project user. Can be "start-today", "override-current", "override-all"
     */
    rate_change_mode?: string;
};

export type UserrolesUserRoleChange = {
    active?: boolean;
    organization_id?: number;
    project_id?: number;
    role?: string;
    role_id?: number;
    type?: string;
    user_id?: number;
    workspace_id?: number;
};

export type UsersProjectUsersSummaryRow = {
    billable_seconds?: number;
    project_id?: number;
    tracked_seconds?: number;
    user_id?: number;
};

export type UsersDataTrendsGraph = {
    data?: Array<UsersDataTrendsGraphData>;
    resolution?: string;
};

export type UsersDataTrendsGraphData = {
    date?: string;
    users?: Array<UsersDataTrendsUser>;
};

export type UsersDataTrendsReport = {
    currency?: string;
    graph?: UsersDataTrendsGraph;
};

export type UsersDataTrendsUser = {
    billable_seconds?: number;
    earnings?: number;
    name?: string;
    total_seconds?: number;
    user_id?: number;
};

export type UsersEntityRole = {
    group_id?: number;
    is_active?: boolean;
    metadata?: UsersMetaData;
    organization_id?: number;
    project_id?: number;
    role_id?: number;
    user_id?: number;
    workspace_id?: number;
};

export type UsersGetOrganizationUsersForRolesBody = {
    role_ids?: Array<number>;
};

export type UsersMetaData = {
    /**
     * Data key value prop should match the respective OLAP model that you can find
     * in internal/authorization/etlworker/auth_keeper/repository.go
     * Ignoring updated at timestamps so that we don't mess with the OLAP process.
     */
    data?: {};
    entity?: string;
};

export type UtilsInt64Slice = Array<number>;

export type UtilsKeyboardShortcut = {
    key?: number;
    modifiers?: number;
};

export type UtilsMacOsAutoTracking = {
    id?: string;
    keyword?: string;
    project_id?: number;
    task_id?: number;
};

export type UtilsMacOsAutoTrackingRules = Array<UtilsMacOsAutoTracking>;

export type UtilsStringSlice = Array<string>;

export type UtilsWindowsAutoTracking = {
    billable?: boolean;
    description?: string;
    enabled?: boolean;
    id?: string;
    parameters?: UtilsWindowsAutoTrackingParameter;
    project_id?: number;
    skip_when_timer_is_running?: boolean;
    start_without_confirmation?: boolean;
    tag_ids?: UtilsInt64Slice;
    task_id?: number;
    type?: number;
};

export type UtilsWindowsAutoTrackingParameter = {
    duration?: string;
    keyword?: string;
    keyword_mode?: string;
    time_of_day?: string;
    week_days?: string;
};

export type UtilsWindowsAutoTrackingRules = Array<UtilsWindowsAutoTracking>;

export type WebAggregationsGenerationRequest = {
    /**
     * Aggregation type.
     */
    aggregation?: string;
    /**
     * Size of the batch for loop based generation processes
     */
    batch_size?: number;
    /**
     * Current entity, to generate data from a point forward
     */
    current_entity?: string;
    /**
     * Current entity id, to generate data from a point forward
     */
    current_entity_id?: number;
    /**
     * List of entities to scan
     */
    entities?: Array<string>;
    /**
     * ProjectIDs fetch time-entries that belong to any of these projects.
     */
    project_ids?: Array<number>;
    /**
     * Drops existing aggregation data
     */
    reset?: boolean;
    /**
     * WorkspaceIDs fetch time-entries that belong to any of these workspaces.
     */
    workspace_ids?: Array<number>;
};

export type WeeklyDataRow = {
    billable_amounts_in_cents?: UtilsInt64Slice;
    billable_seconds?: UtilsInt64Slice;
    client_name?: string;
    currency?: string;
    /**
     * In cents
     */
    hourly_rate_in_cents?: number;
    planned_task_id?: number;
    project_color?: string;
    project_hex_color?: string;
    project_id?: number;
    project_name?: string;
    seconds?: UtilsInt64Slice;
    user_id?: number;
    user_name?: string;
};

export type WeeklyExportPdfPost = {
    /**
     * Whether the time entry is set as billable, optional, premium feature.
     */
    billable?: boolean;
    /**
     * Calculate option, optional. Can be by time or amounts.
     */
    calculate?: string;
    cents_separator?: string;
    /**
     * Client IDs, optional, filtering attribute. To filter records with no clients, use [null].
     */
    client_ids?: Array<number>;
    /**
     * Date format, optional, default "MM/DD/YYYY". Can be "MM/DD/YYYY", "DD-MM-YYYY", "MM-DD-YYYY", "YYYY-MM-DD", "DD/MM/YYYY" or "DD.MM.YYYY".
     */
    date_format?: string;
    /**
     * Description, optional, filtering attribute.
     */
    description?: string;
    /**
     * Duration format, optional, default "classic". Can be "classic", "decimal" or "improved".
     */
    duration_format?: string;
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    /**
     * GroupByTask tells the weekly report to return the data grouped by all the usual groups plus planned task.
     */
    group_by_task?: boolean;
    /**
     * Group IDs, optional, filtering attribute.
     */
    group_ids?: Array<number>;
    /**
     * Grouping option, optional.
     */
    grouping?: string;
    logo_url?: string;
    /**
     * Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.
     */
    max_duration_seconds?: number;
    /**
     * Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.
     */
    min_duration_seconds?: number;
    /**
     * Project IDs, optional, filtering attribute. To filter records with no projects, use [null].
     */
    project_ids?: Array<number>;
    /**
     * Whether time should be rounded, optional, default from user preferences.
     */
    rounding?: number;
    /**
     * Rounding minutes value, optional, default from user preferences. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.
     */
    rounding_minutes?: number;
    startTime?: string;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
    /**
     * Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].
     */
    tag_ids?: Array<number>;
    /**
     * Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].
     */
    task_ids?: Array<number>;
    /**
     * TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.
     */
    time_entry_ids?: Array<number>;
    /**
     * User IDs, optional, filtering attribute.
     */
    user_ids?: Array<number>;
};

export type WeeklyExportPost = {
    /**
     * Whether the time entry is set as billable, optional, premium feature.
     */
    billable?: boolean;
    /**
     * Calculate option, optional. Can be by time or amounts.
     */
    calculate?: string;
    /**
     * Client IDs, optional, filtering attribute. To filter records with no clients, use [null].
     */
    client_ids?: Array<number>;
    /**
     * Description, optional, filtering attribute.
     */
    description?: string;
    /**
     * End date, example time.DateOnly. Should be greater than Start date.
     */
    end_date?: string;
    /**
     * GroupByTask tells the weekly report to return the data grouped by all the usual groups plus planned task.
     */
    group_by_task?: boolean;
    /**
     * Group IDs, optional, filtering attribute.
     */
    group_ids?: Array<number>;
    /**
     * Grouping option, optional.
     */
    grouping?: string;
    /**
     * Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.
     */
    max_duration_seconds?: number;
    /**
     * Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.
     */
    min_duration_seconds?: number;
    /**
     * Project IDs, optional, filtering attribute. To filter records with no projects, use [null].
     */
    project_ids?: Array<number>;
    /**
     * Whether time should be rounded, optional, default from user preferences.
     */
    rounding?: number;
    /**
     * Rounding minutes value, optional, default from user preferences. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.
     */
    rounding_minutes?: number;
    startTime?: string;
    /**
     * Start date, example time.DateOnly. Should be less than End date.
     */
    start_date?: string;
    /**
     * Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].
     */
    tag_ids?: Array<number>;
    /**
     * Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].
     */
    task_ids?: Array<number>;
    /**
     * TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.
     */
    time_entry_ids?: Array<number>;
    /**
     * User IDs, optional, filtering attribute.
     */
    user_ids?: Array<number>;
};

export type WorkspaceOption = {
    key?: string;
    value?: string;
};

export type WorkspacePayload = {
    /**
     * List of admins, optional
     */
    admins?: Array<number>;
    /**
     * Default currency, premium feature, optional, only for existing WS, will be 'USD' initially
     */
    default_currency?: string;
    /**
     * The default hourly rate, premium feature, optional, only for existing WS, will be 0.0 initially
     */
    default_hourly_rate?: number;
    /**
     * The subscription plan for the workspace, deprecated
     */
    initial_pricing_plan?: number;
    /**
     * Whether the workspace limits public projects data in reports to admins.
     */
    limit_public_project_data?: boolean;
    /**
     * Workspace name
     */
    name?: string;
    /**
     * Only admins will be able to create projects, optional, only for existing WS, will be false initially
     */
    only_admins_may_create_projects?: boolean;
    /**
     * Only admins will be able to create tags, optional, only for existing WS, will be false initially
     */
    only_admins_may_create_tags?: boolean;
    /**
     * Only admins will be able to see the team dashboard, optional, only for existing WS, will be false initially
     */
    only_admins_see_team_dashboard?: boolean;
    /**
     * Whether projects will be set as billable by default, premium feature, optional, only for existing WS. Will be true initially
     */
    projects_billable_by_default?: boolean;
    /**
     * Whether tracking time to projects will enforce billable setting to be respected.
     */
    projects_enforce_billable?: boolean;
    /**
     * Whether projects will be set to private by default, optional. Will be true initially.
     */
    projects_private_by_default?: boolean;
    /**
     * The rate change mode, premium feature, optional, only for existing WS. Can be "start-today", "override-current", "override-all"
     */
    rate_change_mode?: string;
    /**
     * Whether reports should be collapsed by default, optional, only for existing WS, will be true initially
     */
    reports_collapse?: boolean;
    /**
     * Default rounding, premium feature, optional, only for existing WS
     */
    rounding?: number;
    /**
     * Default rounding in minutes, premium feature, optional, only for existing WS
     */
    rounding_minutes?: number;
};

export type WorkspaceWithActiveProjectCount = {
    active_project_count?: number;
    /**
     * Current user is workspace admin
     * Deprecated
     */
    admin?: boolean;
    /**
     * deprecated
     */
    api_token?: string;
    /**
     * Timestamp of last workspace change
     */
    at?: string;
    /**
     * Workspace on Premium subscription
     */
    business_ws?: boolean;
    csv_upload?: ModelsCsvUpload;
    /**
     * Default currency, premium feature, optional, only for existing WS, will be 'USD' initially
     */
    default_currency?: string;
    /**
     * The default hourly rate, premium feature, optional, only for existing WS, will be 0.0 initially
     */
    default_hourly_rate?: number;
    /**
     * Disable timesheet view in the workspace
     */
    disable_timesheet_view?: boolean;
    hide_start_end_times?: boolean;
    /**
     * Calendar integration enabled
     */
    ical_enabled?: boolean;
    /**
     * URL of calendar
     */
    ical_url?: string;
    /**
     * Identifier of the workspace
     */
    id?: number;
    /**
     * Last modification of data in the workspace
     */
    last_modified?: string;
    /**
     * Limit public projects data in reports to admins.
     */
    limit_public_project_data?: boolean;
    /**
     * URL of workspace logo
     */
    logo_url?: string;
    /**
     * How far back free workspaces can access data.
     */
    max_data_retention_days?: number;
    /**
     * Name of the workspace
     */
    name?: string;
    /**
     * Only admins will be able to create projects, optional, only for existing WS, will be false initially
     */
    only_admins_may_create_projects?: boolean;
    /**
     * Only admins will be able to create tags, optional, only for existing WS, will be false initially
     */
    only_admins_may_create_tags?: boolean;
    /**
     * Only admins will be able to see the team dashboard, optional, only for existing WS, will be false initially
     */
    only_admins_see_team_dashboard?: boolean;
    /**
     * Identifier of the organization
     */
    organization_id?: number;
    /**
     * Permissions list
     */
    permissions?: string;
    /**
     * Workspace on Starter subscription
     */
    premium?: boolean;
    /**
     * New projects billable by default
     */
    projects_billable_by_default?: boolean;
    /**
     * Whether tracking time to projects will enforce billable setting to be respected.
     */
    projects_enforce_billable?: boolean;
    /**
     * Workspace setting for default project visbility.
     */
    projects_private_by_default?: boolean;
    /**
     * Timestamp of last workspace rate update
     */
    rate_last_updated?: string;
    /**
     * Whether reports should be collapsed by default, optional, only for existing WS, will be true initially
     */
    reports_collapse?: boolean;
    /**
     * Role of the current user in the workspace
     */
    role?: string;
    /**
     * Default rounding, premium feature, optional, only for existing WS. 0 - nearest, 1 - round up, -1 - round down
     */
    rounding?: number;
    /**
     * Default rounding in minutes, premium feature, optional, only for existing WS
     */
    rounding_minutes?: number;
    subscription?: ModelsSubscription;
    /**
     * Timestamp of suspension
     */
    suspended_at?: string;
    te_constraints?: ModelsTimeEntryConstraints;
    /**
     * Working hours in minutes
     */
    working_hours_in_minutes?: number;
};

export type WorkspaceWorkspace = {
    /**
     * Current user is workspace admin
     * Deprecated
     */
    admin?: boolean;
    /**
     * deprecated
     */
    api_token?: string;
    /**
     * Timestamp of last workspace change
     */
    at?: string;
    /**
     * Workspace on Premium subscription
     */
    business_ws?: boolean;
    /**
     * Default currency, premium feature, optional, only for existing WS, will be 'USD' initially
     */
    default_currency?: string;
    /**
     * The default hourly rate, premium feature, optional, only for existing WS, will be 0.0 initially
     */
    default_hourly_rate?: number;
    disable_timesheet_view?: boolean;
    hide_start_end_times?: boolean;
    /**
     * Calendar integration enabled
     */
    ical_enabled?: boolean;
    /**
     * URL of calendar
     */
    ical_url?: string;
    /**
     * Identifier of the workspace
     */
    id?: number;
    /**
     * Last modification of data in the workspace
     */
    last_modified?: string;
    /**
     * Limit public projects data in reports to admins.
     */
    limit_public_project_data?: boolean;
    /**
     * URL of workspace logo
     */
    logo_url?: string;
    /**
     * Name of the workspace
     */
    name?: string;
    /**
     * Only admins will be able to create projects, optional, only for existing WS, will be false initially
     */
    only_admins_may_create_projects?: boolean;
    /**
     * Only admins will be able to create tags, optional, only for existing WS, will be false initially
     */
    only_admins_may_create_tags?: boolean;
    /**
     * Only admins will be able to see the team dashboard, optional, only for existing WS, will be false initially
     */
    only_admins_see_team_dashboard?: boolean;
    /**
     * Identifier of the organization
     */
    organization_id?: number;
    /**
     * Workspace on Starter subscription
     */
    premium?: boolean;
    /**
     * deprecated
     */
    profile?: number;
    /**
     * New projects billable by default
     */
    projects_billable_by_default?: boolean;
    /**
     * Whether tracking time to projects will enforce billable setting to be respected.
     */
    projects_enforce_billable?: boolean;
    /**
     * Workspace setting for default project visbility.
     */
    projects_private_by_default?: boolean;
    /**
     * Timestamp of last workspace rate update
     */
    rate_last_updated?: string;
    /**
     * Whether reports should be collapsed by default, optional, only for existing WS, will be true initially
     */
    reports_collapse?: boolean;
    /**
     * Role of the current user in the workspace
     */
    role?: string;
    /**
     * Default rounding, premium feature, optional, only for existing WS. 0 - nearest, 1 - round up, -1 - round down
     */
    rounding?: number;
    /**
     * Default rounding in minutes, premium feature, optional, only for existing WS
     */
    rounding_minutes?: number;
    /**
     * Timestamp of suspension
     */
    suspended_at?: string;
    /**
     * Working hours in minutes
     */
    working_hours_in_minutes?: number;
};

export type WorkspaceUsersPatchParams = {
    /**
     * Workspace user IDs to be deleted
     */
    delete?: Array<number>;
};

export type WorkspacesJsonResult = {
    wid?: number;
};

export type GetAuditLogsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
        /**
         * Start datetime in RFC3339 format
         */
        from: string;
        /**
         * End datetime in RFC3339 format
         */
        to: string;
    };
    query?: {
        /**
         * If set to true, returns all audit logs without pagination
         */
        export?: boolean;
        /**
         * Workspace ID
         */
        workspace_id?: number;
        /**
         * Entity Type
         */
        entity_type?: string;
        /**
         * Entity ID
         */
        entity_id?: number;
        /**
         * Action
         */
        action?: string;
        /**
         * User ID
         */
        user_id?: number;
        /**
         * Page Size
         */
        page_size?: number;
        /**
         * Page Number
         */
        page_number?: number;
    };
    url: '/audit_logs/{organization_id}/{from}/{to}';
};

export type GetAuditLogsErrors = {
    /**
     * User does not have access to the audit logs
     */
    403: string;
    /**
     * Server error
     */
    500: string;
};

export type GetAuditLogsError = GetAuditLogsErrors[keyof GetAuditLogsErrors];

export type GetAuditLogsResponses = {
    /**
     * Successful operation
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type GetAuditLogsResponse = GetAuditLogsResponses[keyof GetAuditLogsResponses];

export type GetSaml2LoginUrlData = {
    body?: never;
    path?: never;
    query: {
        /**
         * User email
         */
        email: string;
        /**
         * Client identification (webapp/toggl-button/client) TODO: add desktop identification
         */
        client?: string;
        /**
         * State to be preserved when redirecting to Accounts API
         */
        state?: string;
    };
    url: '/auth/saml2/login';
};

export type GetSaml2LoginUrlErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>invalid email address</li><li>SSO is not configured for this email address</li></ul>
     */
    400: string;
    /**
     * We're sorry, but something went terribly wrong. We have been notified about the error. Please try again later.
     */
    500: string;
};

export type GetSaml2LoginUrlError = GetSaml2LoginUrlErrors[keyof GetSaml2LoginUrlErrors];

export type GetSaml2LoginUrlResponses = {
    /**
     * Successful operation.
     */
    200: Saml2LoginResponse;
};

export type GetSaml2LoginUrlResponse = GetSaml2LoginUrlResponses[keyof GetSaml2LoginUrlResponses];

export type PostSaml2CallbackData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/auth/saml2/login/{workspace_id}';
};

export type PostSaml2CallbackErrors = {
    /**
     * We're sorry, but something went terribly wrong. We have been notified about the error. Please try again later.
     */
    500: string;
};

export type PostSaml2CallbackError = PostSaml2CallbackErrors[keyof PostSaml2CallbackErrors];

export type DeleteAvatarsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/avatars';
};

export type DeleteAvatarsErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteAvatarsError = DeleteAvatarsErrors[keyof DeleteAvatarsErrors];

export type DeleteAvatarsResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type DeleteAvatarsResponse = DeleteAvatarsResponses[keyof DeleteAvatarsResponses];

export type PostAvatarsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/avatars';
};

export type PostAvatarsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Invalid content type for image</li><li>Invalid 'end_date' value</li><li>We were unable to resize your image, please check your image and possibly convert it to a png or jpeg and try again</li></ul>
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostAvatarsError = PostAvatarsErrors[keyof PostAvatarsErrors];

export type PostAvatarsResponses = {
    /**
     * Successful operation.
     */
    200: ModelsAvatar;
};

export type PostAvatarsResponse = PostAvatarsResponses[keyof PostAvatarsResponses];

export type PostUseGravatarData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/avatars/use_gravatar';
};

export type PostUseGravatarErrors = {
    /**
     * Couldn't fetch your Gravatar. Are you using the same e-mail both in Toggl and Gravatar?
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostUseGravatarError = PostUseGravatarErrors[keyof PostUseGravatarErrors];

export type PostUseGravatarResponses = {
    /**
     * Successful operation.
     */
    200: ModelsAvatar;
};

export type PostUseGravatarResponse = PostUseGravatarResponses[keyof PostUseGravatarResponses];

export type GetAllUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/backoffice/users';
};

export type GetAllUsersErrors = {
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetAllUsersResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsAdmin>;
};

export type GetAllUsersResponse = GetAllUsersResponses[keyof GetAllUsersResponses];

export type AddBackofficeUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/backoffice/users';
};

export type AddBackofficeUserErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type AddBackofficeUserResponses = {
    /**
     * Successfully added new user.
     */
    201: ModelsAdmin;
};

export type AddBackofficeUserResponse = AddBackofficeUserResponses[keyof AddBackofficeUserResponses];

export type DeleteBackofficeUserData = {
    body?: never;
    path: {
        /**
         * The ID of the user to be deleted.
         */
        user_id: number;
    };
    query?: never;
    url: '/backoffice/users/{user_id}';
};

export type DeleteBackofficeUserErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type DeleteBackofficeUserResponses = {
    /**
     * Successfully added new user.
     */
    200: string;
};

export type DeleteBackofficeUserResponse = DeleteBackofficeUserResponses[keyof DeleteBackofficeUserResponses];

export type GetBackofficeUserData = {
    body?: never;
    path: {
        /**
         * ID of the backoffice user.
         */
        user_id: number;
    };
    query?: never;
    url: '/backoffice/users/{user_id}';
};

export type GetBackofficeUserErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * user not found
     */
    404: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetBackofficeUserResponses = {
    /**
     * Backoffice user data.
     */
    200: ModelsAdmin;
};

export type GetBackofficeUserResponse = GetBackofficeUserResponses[keyof GetBackofficeUserResponses];

export type UpdateBackofficeUserData = {
    body?: never;
    path: {
        /**
         * ID of the backoffice user to be updated.
         */
        user_id: number;
    };
    query?: never;
    url: '/backoffice/users/{user_id}';
};

export type UpdateBackofficeUserErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * user not found
     */
    404: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type UpdateBackofficeUserResponses = {
    /**
     * Successfully updated user data.
     */
    200: ModelsAdmin;
};

export type UpdateBackofficeUserResponse = UpdateBackofficeUserResponses[keyof UpdateBackofficeUserResponses];

export type AddBetaFeatureData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/beta_features';
};

export type AddBetaFeatureErrors = {
    /**
     * See error description
     */
    400: unknown;
};

export type AddBetaFeatureResponses = {
    /**
     * Ok
     */
    200: string;
};

export type AddBetaFeatureResponse = AddBetaFeatureResponses[keyof AddBetaFeatureResponses];

export type CreateRolloutJobData = {
    body?: never;
    path: {
        /**
         * Beta feature id
         */
        beta_feature_id: number;
    };
    query?: never;
    url: '/beta_features/{beta_feature_id}/rollout/scheduled_job';
};

export type CreateRolloutJobErrors = {
    /**
     * See error description
     */
    400: unknown;
};

export type CreateRolloutJobResponses = {
    /**
     * Ok
     */
    200: string;
};

export type CreateRolloutJobResponse = CreateRolloutJobResponses[keyof CreateRolloutJobResponses];

export type DeleteRolloutJobData = {
    body?: never;
    path: {
        /**
         * Beta feature id
         */
        beta_feature_id: number;
        /**
         * Job feature id
         */
        scheduled_job_id: number;
    };
    query?: never;
    url: '/beta_features/{beta_feature_id}/rollout/scheduled_job/{scheduled_job_id}';
};

export type DeleteRolloutJobErrors = {
    /**
     * See error description
     */
    400: unknown;
    /**
     * scheduled job with ID %d does not exist
     */
    404: unknown;
};

export type DeleteRolloutJobResponses = {
    /**
     * Ok
     */
    200: string;
};

export type DeleteRolloutJobResponse = DeleteRolloutJobResponses[keyof DeleteRolloutJobResponses];

export type RollbackBetaFeatureRolloutData = {
    body?: never;
    path: {
        /**
         * Beta feature id
         */
        beta_feature_id: number;
        /**
         * Rollout id
         */
        rollout_id: number;
    };
    query?: never;
    url: '/beta_features/{beta_feature_id}/rollout/{rollout_id}/rollback';
};

export type RollbackBetaFeatureRolloutErrors = {
    /**
     * See error description
     */
    400: unknown;
};

export type RollbackBetaFeatureRolloutResponses = {
    /**
     * Ok
     */
    200: string;
};

export type RollbackBetaFeatureRolloutResponse = RollbackBetaFeatureRolloutResponses[keyof RollbackBetaFeatureRolloutResponses];

export type GetCountriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/countries';
};

export type GetCountriesErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetCountriesError = GetCountriesErrors[keyof GetCountriesErrors];

export type GetCountriesResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsCountry>;
};

export type GetCountriesResponse = GetCountriesResponses[keyof GetCountriesResponses];

export type GetCountriesCountryIdSubdivisionsData = {
    body?: never;
    path: {
        /**
         * country id
         */
        country_id: number;
    };
    query?: never;
    url: '/countries/{country_id}/subdivisions';
};

export type GetCountriesCountryIdSubdivisionsErrors = {
    /**
     * Invalid country code.
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetCountriesCountryIdSubdivisionsError = GetCountriesCountryIdSubdivisionsErrors[keyof GetCountriesCountryIdSubdivisionsErrors];

export type GetCountriesCountryIdSubdivisionsResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsSubdivision>;
};

export type GetCountriesCountryIdSubdivisionsResponse = GetCountriesCountryIdSubdivisionsResponses[keyof GetCountriesCountryIdSubdivisionsResponses];

export type GetCurrenciesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/currencies';
};

export type GetCurrenciesErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetCurrenciesError = GetCurrenciesErrors[keyof GetCurrenciesErrors];

export type GetCurrenciesResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsCurrency>;
};

export type GetCurrenciesResponse = GetCurrenciesResponses[keyof GetCurrenciesResponses];

export type GetDesktopLoginData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/desktop_login';
};

export type GetDesktopLoginErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetDesktopLoginError = GetDesktopLoginErrors[keyof GetDesktopLoginErrors];

export type PostDesktopLoginTokensData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/desktop_login_tokens';
};

export type PostDesktopLoginTokensErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostDesktopLoginTokensError = PostDesktopLoginTokensErrors[keyof PostDesktopLoginTokensErrors];

export type PostDesktopLoginTokensResponses = {
    /**
     * OK
     */
    200: DesktopLoginToken;
};

export type PostDesktopLoginTokensResponse = PostDesktopLoginTokensResponses[keyof PostDesktopLoginTokensResponses];

export type PostUnifiedFeedbackData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/feedback';
};

export type PostUnifiedFeedbackErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Please specify the toggl_version and date when sending feedback.</li><li>Please specify the details of your feedback.</li></ul>
     */
    400: unknown;
    /**
     * Something else went wrong.
     */
    500: unknown;
};

export type PostUnifiedFeedbackResponses = {
    /**
     * Feedback sent.
     */
    200: unknown;
};

export type PostFeedbackWebData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/feedback/web';
};

export type PostFeedbackWebErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Please specify the toggl_version and date when sending feedback.</li><li>Please specify the details of your feedback.</li></ul>
     */
    400: unknown;
    /**
     * Something else went wrong.
     */
    500: unknown;
};

export type PostFeedbackWebResponses = {
    /**
     * Feedback sent.
     */
    200: unknown;
};

export type GetIcalData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ical/workspace_user/{token}';
};

export type GetIcalErrors = {
    /**
     * Paid feature
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
};

export type GetIcalResponses = {
    /**
     * Successful operation.
     */
    200: unknown;
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/insights/api/v1/workspace/{workspace_id}/data_trends/projects';
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li><li>Wrong format date</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have the {feature} feature enabled
     */
    402: string;
    /**
     * Possible error messages:<ul><li>Workspace not found/accessible</li><li>Admin permissions required</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsError = PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsErrors[keyof PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsErrors];

export type PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsResponses = {
    /**
     * Returns filtered projects
     */
    200: Array<ProjectsProjectTrends>;
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsResponse = PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsResponses[keyof PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsResponses];

export type PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/insights/api/v1/workspace/{workspace_id}/profitability/employees.{extension}';
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionErrors = {
    /**
     * Invalid parameters
     */
    400: string;
    /**
     * User has no access to workspace or is not admin
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionError = PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionErrors[keyof PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionErrors];

export type PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionResponses = {
    /**
     * A stream with the csv or xlsx for the report being exported
     */
    200: string;
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionResponse = PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionResponses[keyof PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionResponses];

export type PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionData = {
    body?: never;
    path: {
        /**
         * csv,xlsx
         */
        extension: string;
    };
    query?: never;
    url: '/insights/api/v1/workspace/{workspace_id}/profitability/projects.{extension}';
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionErrors = {
    /**
     * Possible error messages:<ul><li>Invalid parameters</li><li>Invalid workspace ID</li></ul>
     */
    400: string;
    /**
     * User has no access to workspace or is not admin
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionError = PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionErrors[keyof PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionErrors];

export type PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionResponses = {
    /**
     * A stream with the csv or xlsx for the report being exported
     */
    200: string;
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionResponse = PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionResponses[keyof PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionResponses];

export type PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
        /**
         * csv,xlsx
         */
        extension: string;
    };
    query?: never;
    url: '/insights/api/v1/workspace/{workspace_id}/trends/projects.{extension}';
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li><li>wrong format date</li><li>start should come after end</li></ul>
     */
    400: string;
    /**
     * Possible error messages:<ul><li>Workspace not found/accessible"</li><li>user has no required access to asked workspace</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionError = PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionErrors[keyof PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionErrors];

export type PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionResponses = {
    /**
     * Returns data projects data trends
     */
    200: Array<ProjectsProjectTrends>;
};

export type PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionResponse = PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionResponses[keyof PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionResponses];

export type GetIntegrationsCalendarData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/integrations/calendar';
};

export type GetIntegrationsCalendarErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetIntegrationsCalendarError = GetIntegrationsCalendarErrors[keyof GetIntegrationsCalendarErrors];

export type GetIntegrationsCalendarResponses = {
    /**
     * Integrations successfully retrieved
     */
    200: Array<ModelsIntegration>;
};

export type GetIntegrationsCalendarResponse = GetIntegrationsCalendarResponses[keyof GetIntegrationsCalendarResponses];

export type GetIntegrationsCalendarCalendarsSelectedData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Max results per page
         */
        limit?: string;
        /**
         * Token for next page. Used in pagination when the number of results exceed 'limit'
         */
        page_token?: string;
        /**
         * Filter calendars by the integration ID
         */
        integration_id?: number;
        /**
         * filter calendars by selected value
         */
        selected?: boolean;
    };
    url: '/integrations/calendar/calendars/selected';
};

export type GetIntegrationsCalendarCalendarsSelectedErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>while paginating the limit should be always the same</li><li>invalid limit format</li><li>invalid limit error. Please use a value between 0 and 250</li><li>invalid integration_id value</li><li>invalid selected value</li></ul>
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetIntegrationsCalendarCalendarsSelectedError = GetIntegrationsCalendarCalendarsSelectedErrors[keyof GetIntegrationsCalendarCalendarsSelectedErrors];

export type GetIntegrationsCalendarCalendarsSelectedResponses = {
    /**
     * Calendars successfully retrieved
     */
    200: HandlercalendarCalendarsResponse;
};

export type GetIntegrationsCalendarCalendarsSelectedResponse = GetIntegrationsCalendarCalendarsSelectedResponses[keyof GetIntegrationsCalendarCalendarsSelectedResponses];

export type GetIntegrationsCalendarCallbackByProviderData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Calendar service provider
         */
        provider: string;
        /**
         * state string to verify user authenticity
         */
        state: string;
        /**
         * Temporary code which will be used to fetch credentials
         */
        code: string;
    };
    url: '/integrations/calendar/callback/{provider}';
};

export type GetIntegrationsCalendarCallbackByProviderErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetIntegrationsCalendarCallbackByProviderError = GetIntegrationsCalendarCallbackByProviderErrors[keyof GetIntegrationsCalendarCallbackByProviderErrors];

export type GetIntegrationsCalendarEventsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Smallest boundary date to search for calendar events
         */
        start_date: string;
        /**
         * Biggest boundary date to search for calendar events
         */
        end_date: string;
        /**
         * Max results per page
         */
        limit?: string;
        /**
         * Token for next page. Used in pagination when the number of results exceed 'limit'
         */
        page_token?: string;
    };
    url: '/integrations/calendar/events';
};

export type GetIntegrationsCalendarEventsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>start_date has invalid format</li><li>end_date has invalid format</li><li>start_date should not be empty</li><li>end_date should not be empty</li><li>start_date should come before end_date</li><li>User {user_id} has an invalid timezone</li><li>{date} has invalid format</li></ul>
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetIntegrationsCalendarEventsError = GetIntegrationsCalendarEventsErrors[keyof GetIntegrationsCalendarEventsErrors];

export type GetIntegrationsCalendarEventsResponses = {
    /**
     * Events successfully retrieved
     */
    200: HandlercalendarEventsResponse;
};

export type GetIntegrationsCalendarEventsResponse = GetIntegrationsCalendarEventsResponses[keyof GetIntegrationsCalendarEventsResponses];

export type PostIntegrationsCalendarEventsDetailsSuggestionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/integrations/calendar/events/details-suggestion';
};

export type PostIntegrationsCalendarEventsDetailsSuggestionErrors = {
    /**
     * Invalid, missing or too many event IDs
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostIntegrationsCalendarEventsDetailsSuggestionError = PostIntegrationsCalendarEventsDetailsSuggestionErrors[keyof PostIntegrationsCalendarEventsDetailsSuggestionErrors];

export type PostIntegrationsCalendarEventsDetailsSuggestionResponses = {
    /**
     * Suggestions for specified events
     */
    200: HandlercalendarPostDetailsSuggestionResponse;
};

export type PostIntegrationsCalendarEventsDetailsSuggestionResponse = PostIntegrationsCalendarEventsDetailsSuggestionResponses[keyof PostIntegrationsCalendarEventsDetailsSuggestionResponses];

export type PostIntegrationsCalendarEventsUpdateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/integrations/calendar/events/update';
};

export type PostIntegrationsCalendarEventsUpdateErrors = {
    /**
     * It's not possible to fetch data from the provider due to some constraint in the user account or an expired token
     */
    401: string;
    /**
     * <p>Possible error messages:</p><ul><li>an error happened while loading user integrations</li><li>an error happened while loading user calendars</li></ul>
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostIntegrationsCalendarEventsUpdateError = PostIntegrationsCalendarEventsUpdateErrors[keyof PostIntegrationsCalendarEventsUpdateErrors];

export type PostIntegrationsCalendarEventsUpdateResponses = {
    /**
     * Amount of fetched events
     */
    200: HandlercalendarResponse;
};

export type PostIntegrationsCalendarEventsUpdateResponse = PostIntegrationsCalendarEventsUpdateResponses[keyof PostIntegrationsCalendarEventsUpdateResponses];

export type GetIntegrationsCalendarEventsByEventIdDetailsSuggestionData = {
    body?: never;
    path: {
        /**
         * Calendar event ID which we want to get a possible project to match
         */
        event_id: number;
    };
    query?: never;
    url: '/integrations/calendar/events/{event_id}/details-suggestion';
};

export type GetIntegrationsCalendarEventsByEventIdDetailsSuggestionErrors = {
    /**
     * Invalid event ID
     */
    400: string;
    /**
     * Possible error messages:<ul><li>the user has no access to this calendar feature</li><li>the user has no access to this event</li><li>event with ID {event_id} was not found</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetIntegrationsCalendarEventsByEventIdDetailsSuggestionError = GetIntegrationsCalendarEventsByEventIdDetailsSuggestionErrors[keyof GetIntegrationsCalendarEventsByEventIdDetailsSuggestionErrors];

export type GetIntegrationsCalendarEventsByEventIdDetailsSuggestionResponses = {
    /**
     * Suggestion of project to fill
     */
    200: ModelsSuggestion;
};

export type GetIntegrationsCalendarEventsByEventIdDetailsSuggestionResponse = GetIntegrationsCalendarEventsByEventIdDetailsSuggestionResponses[keyof GetIntegrationsCalendarEventsByEventIdDetailsSuggestionResponses];

export type GetIntegrationsCalendarSetupData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Calendar service provider which the calendars will be retrieved
         */
        provider: string;
        /**
         * Page to which the user will be redirected after authenticating
         */
        return_to?: string;
    };
    url: '/integrations/calendar/setup';
};

export type GetIntegrationsCalendarSetupErrors = {
    /**
     * invalid provider name
     */
    400: string;
    /**
     * user plan does not allow multiple integrations with the same provider
     */
    402: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetIntegrationsCalendarSetupError = GetIntegrationsCalendarSetupErrors[keyof GetIntegrationsCalendarSetupErrors];

export type DeleteIntegrationsCalendarByIntegrationIdData = {
    body?: never;
    path: {
        /**
         * Integration ID as saved in the database
         */
        integration_id: number;
    };
    query?: never;
    url: '/integrations/calendar/{integration_id}';
};

export type DeleteIntegrationsCalendarByIntegrationIdErrors = {
    /**
     * The integration was not found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteIntegrationsCalendarByIntegrationIdError = DeleteIntegrationsCalendarByIntegrationIdErrors[keyof DeleteIntegrationsCalendarByIntegrationIdErrors];

export type DeleteIntegrationsCalendarByIntegrationIdResponses = {
    /**
     * Integration removed
     */
    204: string;
};

export type DeleteIntegrationsCalendarByIntegrationIdResponse = DeleteIntegrationsCalendarByIntegrationIdResponses[keyof DeleteIntegrationsCalendarByIntegrationIdResponses];

export type PutIntegrationsCalendarByIntegrationIdData = {
    body?: never;
    path: {
        /**
         * Integration ID as saved in the database
         */
        integration_id: number;
    };
    query?: never;
    url: '/integrations/calendar/{integration_id}';
};

export type PutIntegrationsCalendarByIntegrationIdErrors = {
    /**
     * The integration was not found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutIntegrationsCalendarByIntegrationIdError = PutIntegrationsCalendarByIntegrationIdErrors[keyof PutIntegrationsCalendarByIntegrationIdErrors];

export type PutIntegrationsCalendarByIntegrationIdResponses = {
    /**
     * Integration updated
     */
    204: string;
};

export type PutIntegrationsCalendarByIntegrationIdResponse = PutIntegrationsCalendarByIntegrationIdResponses[keyof PutIntegrationsCalendarByIntegrationIdResponses];

export type GetIntegrationsCalendarByIntegrationIdCalendarsData = {
    body?: never;
    path: {
        /**
         * Integration ID as saved in the database
         */
        integration_id: number;
    };
    query?: {
        /**
         * Max results per page
         */
        limit?: number;
        /**
         * if we should get the selected or not calendars, or all calendars, in case of omission
         */
        selected?: boolean;
        /**
         * Token for next page. Used in pagination when the number of results exceed 'limit'
         */
        page_token?: string;
    };
    url: '/integrations/calendar/{integration_id}/calendars';
};

export type GetIntegrationsCalendarByIntegrationIdCalendarsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>invalid integration_id value</li><li>while paginating the limit should be always the same</li><li>invalid limit error. Please use values between 0 and 250</li></ul>
     */
    400: string;
    /**
     * you do not have access to the integration
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetIntegrationsCalendarByIntegrationIdCalendarsError = GetIntegrationsCalendarByIntegrationIdCalendarsErrors[keyof GetIntegrationsCalendarByIntegrationIdCalendarsErrors];

export type GetIntegrationsCalendarByIntegrationIdCalendarsResponses = {
    /**
     * Calendars successfully retrieved
     */
    200: HandlercalendarCalendarsResponse;
};

export type GetIntegrationsCalendarByIntegrationIdCalendarsResponse = GetIntegrationsCalendarByIntegrationIdCalendarsResponses[keyof GetIntegrationsCalendarByIntegrationIdCalendarsResponses];

export type PostIntegrationsCalendarByIntegrationIdCalendarsUpdateData = {
    body?: never;
    path: {
        /**
         * Integration ID as saved in the database
         */
        integration_id: number;
    };
    query?: never;
    url: '/integrations/calendar/{integration_id}/calendars/update';
};

export type PostIntegrationsCalendarByIntegrationIdCalendarsUpdateErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>invalid integration_id value</li><li>error fetching data from the provider</li></ul>
     */
    400: string;
    /**
     * <p>Possible error messages:</p><ul><li>calendar access has been expired or revoked</li><li>user account may have been deleted at the provider</li></ul>
     */
    401: string;
    /**
     * you do not have access to the integration
     */
    403: string;
    /**
     * <p>Possible error messages:</p><ul><li>invalid calendar provider</li><li>calendar integration does not exist</li></ul>
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostIntegrationsCalendarByIntegrationIdCalendarsUpdateError = PostIntegrationsCalendarByIntegrationIdCalendarsUpdateErrors[keyof PostIntegrationsCalendarByIntegrationIdCalendarsUpdateErrors];

export type PostIntegrationsCalendarByIntegrationIdCalendarsUpdateResponses = {
    /**
     * Calendars successfully retrieved
     */
    200: HandlercalendarFetchedCalendarsResponse;
};

export type PostIntegrationsCalendarByIntegrationIdCalendarsUpdateResponse = PostIntegrationsCalendarByIntegrationIdCalendarsUpdateResponses[keyof PostIntegrationsCalendarByIntegrationIdCalendarsUpdateResponses];

export type PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdData = {
    body?: never;
    path: {
        /**
         * Integration ID as saved in the database
         */
        integration_id: number;
        /**
         * Calendar ID as saved in the database
         */
        calendar_id: number;
    };
    query?: never;
    url: '/integrations/calendar/{integration_id}/calendars/{calendar_id}';
};

export type PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>JSON is not valid</li><li>json: unknown field</li><li>ID is an invalid value for calendar_id</li><li>ID is an invalid value for integration_id</li><li>invalid json: Default Task needs workspace_id, project_id and task_id</li><li>invalid json: Default Project needs workspace_id and project_id</li><li>invalid json: cannot set a Default Workspace</li><li>the payload should not be empty</li></ul>
     */
    400: string;
    /**
     * you do not have access to the integration
     */
    403: string;
    /**
     * you do not have a calendar with the given ID
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdError = PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdErrors[keyof PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdErrors];

export type PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdResponses = {
    /**
     * Calendars successfully updated
     */
    200: Array<ModelsCalendar>;
};

export type PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdResponse = PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdResponses[keyof PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdResponses];

export type GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsData = {
    body?: never;
    path: {
        /**
         * Integration ID as saved in the database
         */
        integration_id: number;
        /**
         * Calendar ID as returned by the provider, it may be an e-mail address, for instance
         */
        id_calendar: string;
    };
    query: {
        /**
         * Smallest boundary date to search for calendar events
         */
        start_date: string;
        /**
         * Biggest boundary date to search for calendar events
         */
        end_date: string;
        /**
         * Max results per page
         */
        limit?: string;
        /**
         * Token for next page. Used in pagination when the number of results exceed 'limit'
         */
        page_token?: string;
    };
    url: '/integrations/calendar/{integration_id}/calendars/{id_calendar}/events';
};

export type GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>integration_id should be a positive value</li><li>calendar_id should be a positive value</li><li>start_date has invalid format</li><li>end_date has invalid format</li><li>start_date is not before end_data</li><li>error fetching data from the provider</li></ul>
     */
    400: string;
    /**
     * <p>Possible error messages:</p><ul><li>calendar access has been expired or revoked</li><li>user account may have been deleted at the provider</li></ul>
     */
    401: string;
    /**
     * you do not have access to the integration
     */
    403: string;
    /**
     * <p>Possible error messages:</p><ul><li>invalid calendar provider</li><li>calendar integration does not exist</li><li>calendar with ID: {calendar_id} for user {user_id} not found</li><li>calendar may have been deleted at the provider or user don't have access to it</li></ul>
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsError = GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsErrors[keyof GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsErrors];

export type GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsResponses = {
    /**
     * Events successfully retrieved
     */
    200: HandlercalendarEventsResponse;
};

export type GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsResponse = GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsResponses[keyof GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsResponses];

export type GetInvitationsData = {
    body?: never;
    path: {
        /**
         * Invitation code
         */
        invitation_code: string;
    };
    query?: never;
    url: '/invitations/{invitation_code}';
};

export type GetInvitationsErrors = {
    /**
     * Invitation not found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetInvitationsError = GetInvitationsErrors[keyof GetInvitationsErrors];

export type GetInvitationsResponses = {
    /**
     * Successful operation
     */
    200: ModelsSsoInvitation;
};

export type GetInvitationsResponse = GetInvitationsResponses[keyof GetInvitationsResponses];

export type GetKeysData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/keys';
};

export type GetKeysErrors = {
    /**
     * We're sorry, but something went terribly wrong. We have been notified about the error. Please try again later.
     */
    500: string;
};

export type GetKeysError = GetKeysErrors[keyof GetKeysErrors];

export type GetKeysResponses = {
    /**
     * JWKS keyset
     */
    200: JwkSet;
};

export type GetKeysResponse = GetKeysResponses[keyof GetKeysResponses];

export type GetMeData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Retrieve user related data (clients, projects, tasks, tags, workspaces, time entries, etc.)
         */
        with_related_data?: boolean;
    };
    url: '/me';
};

export type GetMeErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * could not load user data
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMeError = GetMeErrors[keyof GetMeErrors];

export type GetMeResponses = {
    /**
     * Successful operation.
     */
    200: RelatedUserWithRelated;
};

export type GetMeResponse = GetMeResponses[keyof GetMeResponses];

export type PutMeData = {
    /**
     * Update user parameters
     */
    body: MePayload;
    path?: never;
    query?: never;
    url: '/me';
};

export type PutMeErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Current password is not valid</li><li>Current password must be present to change password</li><li>Invalid beginning_of_week</li><li>Invalid country_id</li><li>Invalid default_workspace_id</li><li>Invalid email</li><li>Invalid fullname</li><li>Invalid timezone</li><li>Password should be at least 6 characters</li><li>user with this email already exists</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
};

export type PutMeError = PutMeErrors[keyof PutMeErrors];

export type PutMeResponses = {
    /**
     * Successful operation.
     */
    200: ModelsTogglUser;
};

export type PutMeResponse = PutMeResponses[keyof PutMeResponses];

export type PostMeAcceptTosData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/accept_tos';
};

export type PostMeAcceptTosErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostMeAcceptTosError = PostMeAcceptTosErrors[keyof PostMeAcceptTosErrors];

export type PostMeAcceptTosResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostMeAcceptTosResponse = PostMeAcceptTosResponses[keyof PostMeAcceptTosResponses];

export type GetClientsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/clients';
};

export type GetClientsErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetClientsError = GetClientsErrors[keyof GetClientsErrors];

export type GetClientsResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsClient>;
};

export type GetClientsResponse = GetClientsResponses[keyof GetClientsResponses];

export type PostCloseAccountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/close_account';
};

export type PostCloseAccountErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostCloseAccountError = PostCloseAccountErrors[keyof PostCloseAccountErrors];

export type PostCloseAccountResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostCloseAccountResponse = PostCloseAccountResponses[keyof PostCloseAccountResponses];

export type PostMeDisableProductEmailsData = {
    body?: never;
    path: {
        /**
         * Disable Code
         */
        disable_code: string;
    };
    query?: never;
    url: '/me/disable_product_emails/{disable_code}';
};

export type PostMeDisableProductEmailsErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostMeDisableProductEmailsError = PostMeDisableProductEmailsErrors[keyof PostMeDisableProductEmailsErrors];

export type PostMeDisableProductEmailsResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostMeDisableProductEmailsResponse = PostMeDisableProductEmailsResponses[keyof PostMeDisableProductEmailsResponses];

export type PostMeDisableWeeklyReportData = {
    body?: never;
    path: {
        /**
         * Weekly report code
         */
        weekly_report_code: string;
    };
    query?: never;
    url: '/me/disable_weekly_report/{weekly_report_code}';
};

export type PostMeDisableWeeklyReportErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostMeDisableWeeklyReportError = PostMeDisableWeeklyReportErrors[keyof PostMeDisableWeeklyReportErrors];

export type PostMeDisableWeeklyReportResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostMeDisableWeeklyReportResponse = PostMeDisableWeeklyReportResponses[keyof PostMeDisableWeeklyReportResponses];

export type PostEnableSsoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/enable_sso';
};

export type PostEnableSsoErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>invalid or expired confirmation code</li><li>user email doesn't match SSO credentials</li></ul>
     */
    400: string;
};

export type PostEnableSsoError = PostEnableSsoErrors[keyof PostEnableSsoErrors];

export type PostEnableSsoResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostEnableSsoResponse = PostEnableSsoResponses[keyof PostEnableSsoResponses];

export type GetMeExportData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/export';
};

export type GetMeExportErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMeExportError = GetMeExportErrors[keyof GetMeExportErrors];

export type GetMeExportResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsDownloadRequestRecord>;
};

export type GetMeExportResponse = GetMeExportResponses[keyof GetMeExportResponses];

export type PostMeExportData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/export';
};

export type PostMeExportErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Cannot start another export until current one is complete</li><li>You must select at least one object to export</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostMeExportError = PostMeExportErrors[keyof PostMeExportErrors];

export type PostMeExportResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostMeExportResponse = PostMeExportResponses[keyof PostMeExportResponses];

export type GetMeExportDataUuidZipData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/export/data/{uuid}.zip';
};

export type GetMeExportDataUuidZipErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>User export data cannot be found or is expired</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMeExportDataUuidZipError = GetMeExportDataUuidZipErrors[keyof GetMeExportDataUuidZipErrors];

export type GetMeExportDataUuidZipResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type GetMeExportDataUuidZipResponse = GetMeExportDataUuidZipResponses[keyof GetMeExportDataUuidZipResponses];

export type GetMyFavoritesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/favorites';
};

export type GetMyFavoritesErrors = {
    /**
     * User has no access to Favorites feature
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMyFavoritesError = GetMyFavoritesErrors[keyof GetMyFavoritesErrors];

export type GetMyFavoritesResponses = {
    /**
     * List of favorites for a given user
     */
    200: Array<ModelsFavorite>;
};

export type GetMyFavoritesResponse = GetMyFavoritesResponses[keyof GetMyFavoritesResponses];

export type CreateMyFavoriteData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Should the response contain data for meta entities
         */
        meta?: boolean;
    };
    url: '/me/favorites';
};

export type CreateMyFavoriteErrors = {
    /**
     * Possible error messages:<ul><li>the parameter '{parameter}' is invalid</li><li>we could not parse the provided parameters</li><li>user %d has no access to Favorites feature</li><li>favorite attributes are not valid: {attributes}</li><li>favorite constraints were not met: {constraints}</li></ul>
     */
    400: string;
    /**
     * Possible error messages:<ul><li>user {user_id} has no access to Favorites feature</li><li>user {user_id} has no access to all resources: {resources}</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type CreateMyFavoriteError = CreateMyFavoriteErrors[keyof CreateMyFavoriteErrors];

export type CreateMyFavoriteResponses = {
    /**
     * Created favorite with its ID
     */
    200: ModelsFavorite;
};

export type CreateMyFavoriteResponse = CreateMyFavoriteResponses[keyof CreateMyFavoriteResponses];

export type UpdateMyFavoritesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Should the response contain data for meta entities
         */
        meta?: boolean;
    };
    url: '/me/favorites';
};

export type UpdateMyFavoritesErrors = {
    /**
     * Possible error messages:<ul><li>the parameter '{parameter}' is invalid</li><li>we could not parse the provided parameters</li><li>user %d has no access to Favorites feature</li><li>favorite attributes are not valid: {attributes}</li><li>favorite constraints were not met: {constraints}</li></ul>
     */
    400: string;
    /**
     * Possible error messages:<ul><li>user {user_id} has no access to Favorites feature</li><li>user {user_id} has no access to all resources: {resources}</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type UpdateMyFavoritesError = UpdateMyFavoritesErrors[keyof UpdateMyFavoritesErrors];

export type UpdateMyFavoritesResponses = {
    /**
     * Updated favorite
     */
    200: ModelsFavorite;
};

export type UpdateMyFavoritesResponse = UpdateMyFavoritesResponses[keyof UpdateMyFavoritesResponses];

export type PostMyFavoritesSuggestionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/favorites/suggestions';
};

export type PostMyFavoritesSuggestionsErrors = {
    /**
     * User {user_id} has no access to Favorites feature
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostMyFavoritesSuggestionsError = PostMyFavoritesSuggestionsErrors[keyof PostMyFavoritesSuggestionsErrors];

export type PostMyFavoritesSuggestionsResponses = {
    /**
     * List of suggested favorites
     */
    201: Array<ModelsFavorite>;
    /**
     * No suggested favorites
     */
    204: string;
};

export type PostMyFavoritesSuggestionsResponse = PostMyFavoritesSuggestionsResponses[keyof PostMyFavoritesSuggestionsResponses];

export type DeleteMyFavoriteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/favorites/{favorite_id}';
};

export type DeleteMyFavoriteErrors = {
    /**
     * {favorite_id} given favorite ID is invalid
     */
    400: string;
    /**
     * Possible error messages:<ul><li>user {user_id} has no access to Favorites feature</li><li>user {user_id} is not the owner of favorite ID {favorite_id}</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteMyFavoriteError = DeleteMyFavoriteErrors[keyof DeleteMyFavoriteErrors];

export type DeleteMyFavoriteResponses = {
    /**
     * Favorite deleted
     */
    204: unknown;
};

export type GetMeFeaturesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/features';
};

export type GetMeFeaturesErrors = {
    /**
     * Operation Forbidden
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMeFeaturesError = GetMeFeaturesErrors[keyof GetMeFeaturesErrors];

export type GetMeFeaturesResponses = {
    /**
     * Successful operation
     */
    200: Array<MeWorkspace>;
};

export type GetMeFeaturesResponse = GetMeFeaturesResponses[keyof GetMeFeaturesResponses];

export type GetMeFlagsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/flags';
};

export type GetMeFlagsErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMeFlagsError = GetMeFlagsErrors[keyof GetMeFlagsErrors];

export type GetMeFlagsResponses = {
    /**
     * Successful operation.
     */
    200: UserFlags;
};

export type GetMeFlagsResponse = GetMeFlagsResponses[keyof GetMeFlagsResponses];

export type PostMeFlagsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/flags';
};

export type PostMeFlagsErrors = {
    /**
     * No valid data submitted
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostMeFlagsError = PostMeFlagsErrors[keyof PostMeFlagsErrors];

export type PostMeFlagsResponses = {
    /**
     * Successful operation.
     */
    200: UserFlags;
};

export type PostMeFlagsResponse = PostMeFlagsResponses[keyof PostMeFlagsResponses];

export type GetMeLocationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/location';
};

export type GetMeLocationErrors = {
    /**
     * Country with given ISO code not found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMeLocationError = GetMeLocationErrors[keyof GetMeLocationErrors];

export type GetMeLocationResponses = {
    /**
     * Successful operation.
     */
    200: MeUserLocationResponse;
};

export type GetMeLocationResponse = GetMeLocationResponses[keyof GetMeLocationResponses];

export type GetMeLoggedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/logged';
};

export type GetMeLoggedErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMeLoggedError = GetMeLoggedErrors[keyof GetMeLoggedErrors];

export type GetMeLoggedResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetOrganizationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/organizations';
};

export type GetOrganizationsErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetOrganizationsError = GetOrganizationsErrors[keyof GetOrganizationsErrors];

export type GetOrganizationsResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsMeOrganization>;
};

export type GetOrganizationsResponse = GetOrganizationsResponses[keyof GetOrganizationsResponses];

export type GetPreferencesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/preferences';
};

export type GetPreferencesErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetPreferencesError = GetPreferencesErrors[keyof GetPreferencesErrors];

export type GetPreferencesResponses = {
    /**
     * Successful operation.
     */
    200: ModelsAllPreferences;
};

export type GetPreferencesResponse = GetPreferencesResponses[keyof GetPreferencesResponses];

export type PostPreferencesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/preferences';
};

export type PostPreferencesErrors = {
    /**
     * <p>Possible error messages:</p> <ul><li>Cannot set value for ToSAcceptNeeded</li><li>Invalid feature code(s)</li><li>Missing data</li><li>Value in date_format is invalid</li><li>Value in timeofday_format is invalid</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostPreferencesError = PostPreferencesErrors[keyof PostPreferencesErrors];

export type PostPreferencesResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostPreferencesResponse = PostPreferencesResponses[keyof PostPreferencesResponses];

export type GetPreferencesClientData = {
    body?: never;
    path?: {
        /**
         * Client type
         */
        client?: 'desktop' | 'web';
    };
    query?: never;
    url: '/me/preferences/{client}';
};

export type GetPreferencesClientErrors = {
    /**
     * Unknown client.
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetPreferencesClientError = GetPreferencesClientErrors[keyof GetPreferencesClientErrors];

export type GetPreferencesClientResponses = {
    /**
     * Successful operation.
     */
    200: ModelsAllPreferences;
};

export type GetPreferencesClientResponse = GetPreferencesClientResponses[keyof GetPreferencesClientResponses];

export type PostPreferencesClientData = {
    body?: never;
    path?: {
        /**
         * Client type
         */
        client?: 'desktop' | 'web';
    };
    query?: never;
    url: '/me/preferences/{client}';
};

export type PostPreferencesClientErrors = {
    /**
     * <p>Possible error messages:</p> <ul><li>Cannot set value for ToSAcceptNeeded</li><li>Invalid feature code(s)</li><li>Missing data</li><li>Unknown client</li><li>Value in date_format is invalid</li><li>Value in timeofday_format is invalid</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostPreferencesClientError = PostPreferencesClientErrors[keyof PostPreferencesClientErrors];

export type PostPreferencesClientResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostPreferencesClientResponse = PostPreferencesClientResponses[keyof PostPreferencesClientResponses];

export type GetMeProjectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/projects';
};

export type GetMeProjectsErrors = {
    /**
     * Invalid include_archived
     */
    400: string;
    /**
     * Operation Forbidden
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMeProjectsError = GetMeProjectsErrors[keyof GetMeProjectsErrors];

export type GetMeProjectsResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsProject>;
};

export type GetMeProjectsResponse = GetMeProjectsResponses[keyof GetMeProjectsResponses];

export type GetMeProjectsPaginatedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/projects/paginated';
};

export type GetMeProjectsPaginatedErrors = {
    /**
     * Operation Forbidden
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMeProjectsPaginatedError = GetMeProjectsPaginatedErrors[keyof GetMeProjectsPaginatedErrors];

export type GetMeProjectsPaginatedResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsProject>;
};

export type GetMeProjectsPaginatedResponse = GetMeProjectsPaginatedResponses[keyof GetMeProjectsPaginatedResponses];

export type DeletePushServicesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/push_services';
};

export type DeletePushServicesErrors = {
    /**
     * Field 'fcm_registration_token' is required
     */
    400: string;
    /**
     * Operation forbidden
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeletePushServicesError = DeletePushServicesErrors[keyof DeletePushServicesErrors];

export type DeletePushServicesResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type DeletePushServicesResponse = DeletePushServicesResponses[keyof DeletePushServicesResponses];

export type GetPushServicesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/push_services';
};

export type GetPushServicesErrors = {
    /**
     * Operation forbidden
     */
    403: string;
    /**
     * Resource can not be found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetPushServicesError = GetPushServicesErrors[keyof GetPushServicesErrors];

export type GetPushServicesResponses = {
    /**
     * Successful operation
     */
    200: Array<string>;
};

export type GetPushServicesResponse = GetPushServicesResponses[keyof GetPushServicesResponses];

export type PostPushServicesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/push_services';
};

export type PostPushServicesErrors = {
    /**
     * Field 'fcm_registration_token' is required
     */
    400: string;
    /**
     * Operation forbidden
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostPushServicesError = PostPushServicesErrors[keyof PostPushServicesErrors];

export type PostPushServicesResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type PostPushServicesResponse = PostPushServicesResponses[keyof PostPushServicesResponses];

export type PostResetTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/reset_token';
};

export type PostResetTokenErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostResetTokenError = PostResetTokenErrors[keyof PostResetTokenErrors];

export type PostResetTokenResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostResetTokenResponse = PostResetTokenResponses[keyof PostResetTokenResponses];

export type GetTagsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/tags';
};

export type GetTagsErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetTagsError = GetTagsErrors[keyof GetTagsErrors];

export type GetTagsResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsTag>;
};

export type GetTagsResponse = GetTagsResponses[keyof GetTagsResponses];

export type GetTasksData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Should the response contain data for meta entities
         */
        meta?: boolean;
    };
    url: '/me/tasks';
};

export type GetTasksErrors = {
    /**
     * Invalid include_not_active
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetTasksError = GetTasksErrors[keyof GetTasksErrors];

export type GetTasksResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsTask>;
};

export type GetTasksResponse = GetTasksResponses[keyof GetTasksResponses];

export type GetMyTimeEntriesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Should the response contain data for meta entities
         */
        meta?: boolean;
        /**
         * Include sharing details in the response
         */
        include_sharing?: boolean;
    };
    url: '/me/time_entries';
};

export type GetMyTimeEntriesErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMyTimeEntriesError = GetMyTimeEntriesErrors[keyof GetMyTimeEntriesErrors];

export type GetMyTimeEntriesResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsTimeEntry>;
};

export type GetMyTimeEntriesResponse = GetMyTimeEntriesResponses[keyof GetMyTimeEntriesResponses];

export type GetTimeEntriesChecklistData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/time_entries/checklist';
};

export type GetTimeEntriesChecklistResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsTimeEntryChecklist>;
};

export type GetTimeEntriesChecklistResponse = GetTimeEntriesChecklistResponses[keyof GetTimeEntriesChecklistResponses];

export type GetCurrentTimeEntryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/time_entries/current';
};

export type GetCurrentTimeEntryErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Resource can not be found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetCurrentTimeEntryError = GetCurrentTimeEntryErrors[keyof GetCurrentTimeEntryErrors];

export type GetCurrentTimeEntryResponses = {
    /**
     * Successful operation.
     */
    200: ModelsTimeEntry;
};

export type GetCurrentTimeEntryResponse = GetCurrentTimeEntryResponses[keyof GetCurrentTimeEntryResponses];

export type GetTimeEntryNotesBulkData = {
    body?: never;
    path: {
        /**
         * TimeEntry ID.
         */
        time_entry_id: number;
    };
    query?: never;
    url: '/me/time_entries/notes';
};

export type GetTimeEntryNotesBulkErrors = {
    /**
     * Resource can not be found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetTimeEntryNotesBulkError = GetTimeEntryNotesBulkErrors[keyof GetTimeEntryNotesBulkErrors];

export type GetTimeEntryNotesBulkResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsTimeEntryNotes>;
};

export type GetTimeEntryNotesBulkResponse = GetTimeEntryNotesBulkResponses[keyof GetTimeEntryNotesBulkResponses];

export type GetTimeEntryByIdData = {
    body?: never;
    path: {
        /**
         * TimeEntry ID.
         */
        time_entry_id: number;
    };
    query?: {
        /**
         * Should the response contain data for meta entities
         */
        meta?: boolean;
        /**
         * Include sharing details in the response
         */
        include_sharing?: boolean;
    };
    url: '/me/time_entries/{time_entry_id}';
};

export type GetTimeEntryByIdErrors = {
    /**
     * Resource can not be found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetTimeEntryByIdError = GetTimeEntryByIdErrors[keyof GetTimeEntryByIdErrors];

export type GetTimeEntryByIdResponses = {
    /**
     * Successful operation.
     */
    200: ModelsTimeEntry;
};

export type GetTimeEntryByIdResponse = GetTimeEntryByIdResponses[keyof GetTimeEntryByIdResponses];

export type DeleteTimeEntryNotesData = {
    body?: never;
    path: {
        /**
         * TimeEntry ID.
         */
        time_entry_id: number;
    };
    query?: never;
    url: '/me/time_entries/{time_entry_id}/notes';
};

export type DeleteTimeEntryNotesErrors = {
    /**
     * Resource can not be found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteTimeEntryNotesError = DeleteTimeEntryNotesErrors[keyof DeleteTimeEntryNotesErrors];

export type DeleteTimeEntryNotesResponses = {
    /**
     * Delete Successfull
     */
    200: string;
};

export type DeleteTimeEntryNotesResponse = DeleteTimeEntryNotesResponses[keyof DeleteTimeEntryNotesResponses];

export type GetTimeEntryNotesByIdData = {
    body?: never;
    path: {
        /**
         * TimeEntry ID.
         */
        time_entry_id: number;
    };
    query?: never;
    url: '/me/time_entries/{time_entry_id}/notes';
};

export type GetTimeEntryNotesByIdErrors = {
    /**
     * Resource can not be found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetTimeEntryNotesByIdError = GetTimeEntryNotesByIdErrors[keyof GetTimeEntryNotesByIdErrors];

export type GetTimeEntryNotesByIdResponses = {
    /**
     * Successful operation.
     */
    200: ModelsTimeEntryNotes;
};

export type GetTimeEntryNotesByIdResponse = GetTimeEntryNotesByIdResponses[keyof GetTimeEntryNotesByIdResponses];

export type PutTimeEntryNotesData = {
    body?: never;
    path: {
        /**
         * TimeEntry ID.
         */
        time_entry_id: number;
    };
    query?: never;
    url: '/me/time_entries/{time_entry_id}/notes';
};

export type PutTimeEntryNotesErrors = {
    /**
     * Resource can not be found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutTimeEntryNotesError = PutTimeEntryNotesErrors[keyof PutTimeEntryNotesErrors];

export type PutTimeEntryNotesResponses = {
    /**
     * Successful operation.
     */
    200: ModelsTimeEntryNotes;
};

export type PutTimeEntryNotesResponse = PutTimeEntryNotesResponses[keyof PutTimeEntryNotesResponses];

export type PostMeTimeEntriesSharedWithData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/time_entries_shared_with';
};

export type PostMeTimeEntriesSharedWithErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Invalid workspace</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostMeTimeEntriesSharedWithError = PostMeTimeEntriesSharedWithErrors[keyof PostMeTimeEntriesSharedWithErrors];

export type PostMeTimeEntriesSharedWithResponses = {
    /**
     * Returns a list of time entry sharing details.
     */
    200: Array<TimeentriesBulkGetSharingResponse>;
};

export type PostMeTimeEntriesSharedWithResponse = PostMeTimeEntriesSharedWithResponses[keyof PostMeTimeEntriesSharedWithResponses];

export type GetMeTimesheetsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/timesheets';
};

export type GetMeTimesheetsErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMeTimesheetsError = GetMeTimesheetsErrors[keyof GetMeTimesheetsErrors];

export type GetMeTimesheetsResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsTimesheet>;
};

export type GetMeTimesheetsResponse = GetMeTimesheetsResponses[keyof GetMeTimesheetsResponses];

export type GetMeTrackRemindersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/track_reminders';
};

export type GetMeTrackRemindersErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetMeTrackRemindersError = GetMeTrackRemindersErrors[keyof GetMeTrackRemindersErrors];

export type GetMeTrackRemindersResponses = {
    /**
     * Returns a list of track reminders.
     */
    200: Array<ModelsTrackReminder>;
};

export type GetMeTrackRemindersResponse = GetMeTrackRemindersResponses[keyof GetMeTrackRemindersResponses];

export type GetWebTimerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/web-timer';
};

export type GetWebTimerErrors = {
    /**
     * Operation Forbidden
     */
    403: string;
    /**
     * Resource can not be found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWebTimerError = GetWebTimerErrors[keyof GetWebTimerErrors];

export type GetWebTimerResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type GetWebTimerResponse = GetWebTimerResponses[keyof GetWebTimerResponses];

export type GetWorkspacesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/workspaces';
};

export type GetWorkspacesErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspacesError = GetWorkspacesErrors[keyof GetWorkspacesErrors];

export type GetWorkspacesResponses = {
    /**
     * Successful operation.
     */
    200: Array<WorkspaceWithActiveProjectCount>;
};

export type GetWorkspacesResponse = GetWorkspacesResponses[keyof GetWorkspacesResponses];

export type PostMobileFeedbackData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mobile/feedback';
};

export type PostMobileFeedbackErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostMobileFeedbackError = PostMobileFeedbackErrors[keyof PostMobileFeedbackErrors];

export type PostMobileFeedbackResponses = {
    /**
     * Feedback sent
     */
    200: string;
};

export type PostMobileFeedbackResponse = PostMobileFeedbackResponses[keyof PostMobileFeedbackResponses];

export type GetAllWebappNotificationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number for pagination
         */
        page?: number;
        /**
         * Rows to include in the query
         */
        rows?: number;
        /**
         * Returns rows sorted by the specified column and direction. Direction defaults to asc if not specified.
         */
        order_by?: string;
        /**
         * Searches titles for the given string
         */
        search_title?: string;
        /**
         * Limit results to notifications based on published_at greater than or equal to the given RFC3339 timestamp
         */
        from?: string;
        /**
         * Limit results to notifications based on published_at less than or equal to the given RFC3339 timestamp
         */
        to?: string;
    };
    url: '/notifications';
};

export type GetAllWebappNotificationsErrors = {
    /**
     * When required params aren't present or invalid field is given
     */
    400: unknown;
    /**
     * oh no :(
     */
    500: unknown;
};

export type GetAllWebappNotificationsResponses = {
    /**
     * Successful operation
     */
    200: NotificationsRespDoc & {
        notifications?: Array<BonotificationsWebAppNotificationSummary>;
    };
};

export type GetAllWebappNotificationsResponse = GetAllWebappNotificationsResponses[keyof GetAllWebappNotificationsResponses];

export type PostWebappNotificationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications';
};

export type PostWebappNotificationsErrors = {
    /**
     * When required params aren't present or invalid field is given
     */
    400: unknown;
    /**
     * oh no :(
     */
    500: unknown;
};

export type PostWebappNotificationsResponses = {
    /**
     * Successful operation
     */
    201: BonotificationsWebAppNotification;
};

export type PostWebappNotificationsResponse = PostWebappNotificationsResponses[keyof PostWebappNotificationsResponses];

export type GetWebappNotificationsData = {
    body?: never;
    path: {
        /**
         * ID of the notification to retrieve
         */
        notification_id: number;
    };
    query?: never;
    url: '/notifications/{notification_id}';
};

export type GetWebappNotificationsErrors = {
    /**
     * When the given notification_id is invalid
     */
    400: unknown;
    /**
     * oh no :(
     */
    500: unknown;
};

export type GetWebappNotificationsResponses = {
    /**
     * Successful operation
     */
    200: BonotificationsWebAppNotification;
};

export type GetWebappNotificationsResponse = GetWebappNotificationsResponses[keyof GetWebappNotificationsResponses];

export type OrganizationSearchData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/organizations';
};

export type OrganizationSearchResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsOrganizationSimple>;
};

export type OrganizationSearchResponse = OrganizationSearchResponses[keyof OrganizationSearchResponses];

export type PostOrganizationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/organizations';
};

export type PostOrganizationErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Invalid JSON input</li><li>Field 'name' cannot be empty.</li><li>organization name too long, maximum length is 140</li><li>workspace name must contain non-space characters</li><li>workspace name must be provided</li><li>workspace name must not be longer than 140</li></ul>
     */
    400: string;
    /**
     * User is not authorized to create an organization
     */
    403: string;
};

export type PostOrganizationError = PostOrganizationErrors[keyof PostOrganizationErrors];

export type PostOrganizationResponses = {
    /**
     * Organization and workspace IDs
     */
    200: OrganizationPostOrganizationReply;
};

export type PostOrganizationResponse = PostOrganizationResponses[keyof PostOrganizationResponses];

export type PostOrganizationAcceptInvitationData = {
    body?: never;
    path: {
        /**
         * Invitation code
         */
        inviutation_code: string;
    };
    query?: never;
    url: '/organizations/invitations/{invitation_code}/accept';
};

export type PostOrganizationAcceptInvitationErrors = {
    /**
     * Forbidden
     */
    403: string;
    /**
     * Invalid invitation code
     */
    404: string;
};

export type PostOrganizationAcceptInvitationError = PostOrganizationAcceptInvitationErrors[keyof PostOrganizationAcceptInvitationErrors];

export type PostOrganizationAcceptInvitationResponses = {
    /**
     * OK
     */
    200: string;
};

export type PostOrganizationAcceptInvitationResponse = PostOrganizationAcceptInvitationResponses[keyof PostOrganizationAcceptInvitationResponses];

export type PostRejectInvitationData = {
    body?: never;
    path: {
        /**
         * Invitation code
         */
        inviutation_code: string;
    };
    query?: never;
    url: '/organizations/invitations/{invitation_code}/reject';
};

export type PostRejectInvitationErrors = {
    /**
     * Forbidden
     */
    403: string;
    /**
     * Invalid invitation code
     */
    404: string;
};

export type PostRejectInvitationError = PostRejectInvitationErrors[keyof PostRejectInvitationErrors];

export type PostRejectInvitationResponses = {
    /**
     * OK
     */
    200: string;
};

export type PostRejectInvitationResponse = PostRejectInvitationResponses[keyof PostRejectInvitationResponses];

export type OrganizationGetSubscriptionBulkData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/organizations/subscriptions/bulk_get';
};

export type OrganizationGetSubscriptionBulkErrors = {
    /**
     * Invalid JSON input
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationGetSubscriptionBulkResponses = {
    /**
     * Successfully canceled premium trial
     */
    200: Array<ModelsOrganizationSubscription>;
};

export type OrganizationGetSubscriptionBulkResponse = OrganizationGetSubscriptionBulkResponses[keyof OrganizationGetSubscriptionBulkResponses];

export type GetOrganizationData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}';
};

export type GetOrganizationErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Invalid organization ID</li><li>User not part of organization</li></ul>
     */
    404: unknown;
};

export type GetOrganizationResponses = {
    /**
     * Successful operation
     */
    200: ModelsMeOrganization;
};

export type GetOrganizationResponse = GetOrganizationResponses[keyof GetOrganizationResponses];

export type PutOrganizationData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}';
};

export type PutOrganizationErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Invalid JSON input</li><li>Invalid organization ID</li><li>At least one field is required</li><li>field 'name' cannot be empty</li><li>organization name too long, maximum length is 140</li></ul>
     */
    400: string;
    /**
     * User is not authorized to update the organization
     */
    403: string;
};

export type PutOrganizationError = PutOrganizationErrors[keyof PutOrganizationErrors];

export type PutOrganizationResponses = {
    /**
     * OK
     */
    200: string;
};

export type PutOrganizationResponse = PutOrganizationResponses[keyof PutOrganizationResponses];

export type OrganizationAddCommentData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/add_comment';
};

export type OrganizationAddCommentResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type OrganizationAddCommentResponse = OrganizationAddCommentResponses[keyof OrganizationAddCommentResponses];

export type OrganizationBlacklistData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/blacklist';
};

export type OrganizationBlacklistErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Invalid request body</li><li>invalid 'organization_id' passed in URL</li><li>Organization is already on blacklist</li><li>Organization is not on blacklist</li></ul>
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationBlacklistResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type OrganizationBlacklistResponse = OrganizationBlacklistResponses[keyof OrganizationBlacklistResponses];

export type OrganizationGetCachedSubscriptionData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/cached_subscription';
};

export type OrganizationGetCachedSubscriptionErrors = {
    /**
     * invalid 'organization_id' passed in URL
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationGetCachedSubscriptionResponses = {
    /**
     * Successful operation
     */
    200: ModelsOrganizationSubscription;
};

export type OrganizationGetCachedSubscriptionResponse = OrganizationGetCachedSubscriptionResponses[keyof OrganizationGetCachedSubscriptionResponses];

export type OrganizationChangeEmailBlacklistingData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/change_email_blacklisting';
};

export type OrganizationChangeEmailBlacklistingErrors = {
    /**
     * invalid 'organization_id' passed in URL
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationChangeEmailBlacklistingResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type OrganizationChangeEmailBlacklistingResponse = OrganizationChangeEmailBlacklistingResponses[keyof OrganizationChangeEmailBlacklistingResponses];

export type GetOrganizationGroupsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: {
        /**
         * Returns records where name contains this string
         */
        name?: string;
        /**
         * ID of workspace. Returns groups assigned to this workspace
         */
        workspace?: string;
    };
    url: '/organizations/{organization_id}/groups';
};

export type GetOrganizationGroupsErrors = {
    /**
     * Invalid number ...
     */
    400: string;
};

export type GetOrganizationGroupsError = GetOrganizationGroupsErrors[keyof GetOrganizationGroupsErrors];

export type GetOrganizationGroupsResponses = {
    /**
     * Successful operation
     */
    200: Array<GroupOrganizationGroupResponse>;
};

export type GetOrganizationGroupsResponse = GetOrganizationGroupsResponses[keyof GetOrganizationGroupsResponses];

export type PostOrganizationGroupData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/groups';
};

export type PostOrganizationGroupErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Invalid JSON input</li><li>Group name must be present</li><li>Group name too long, maximum length is 200</li><li>Name has already been taken</li><li>User {user} not exists in the organization {org}</li><li>Workspace {ws} not exists in the organization {org}</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource
     */
    403: string;
};

export type PostOrganizationGroupError = PostOrganizationGroupErrors[keyof PostOrganizationGroupErrors];

export type PostOrganizationGroupResponses = {
    /**
     * Returns the created group data.
     */
    200: GroupOrganizationGroupResponse;
};

export type PostOrganizationGroupResponse = PostOrganizationGroupResponses[keyof PostOrganizationGroupResponses];

export type DeleteOrganizationGroupData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
        /**
         * Numeric ID of the group.
         */
        group_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/groups/{group_id}';
};

export type DeleteOrganizationGroupErrors = {
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Invalid group ID.
     */
    404: string;
};

export type DeleteOrganizationGroupError = DeleteOrganizationGroupErrors[keyof DeleteOrganizationGroupErrors];

export type DeleteOrganizationGroupResponses = {
    /**
     * OK
     */
    200: string;
};

export type DeleteOrganizationGroupResponse = DeleteOrganizationGroupResponses[keyof DeleteOrganizationGroupResponses];

export type PatchOrganizationGroupData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
        /**
         * Numeric ID of the group.
         */
        group_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/groups/{group_id}';
};

export type PatchOrganizationGroupErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Invalid JSON input</li><li>Empty or invalid patch operation</li><li>Empty or invalid patch path</li><li>Unknown group at organization</li><li>Too many patches</i><i>Too many values per patch</i></ul>
     */
    400: string;
    /**
     * Forbidden
     */
    403: string;
    /**
     * Invalid group ID.
     */
    404: string;
};

export type PatchOrganizationGroupError = PatchOrganizationGroupErrors[keyof PatchOrganizationGroupErrors];

export type PatchOrganizationGroupResponses = {
    /**
     * Returns the result of the requested operations.
     */
    200: GroupsPatchOutput;
};

export type PatchOrganizationGroupResponse = PatchOrganizationGroupResponses[keyof PatchOrganizationGroupResponses];

export type PutOrganizationGroupData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/groups/{group_id}';
};

export type PutOrganizationGroupErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Invalid JSON input</li><li>Group name must be present</li><li>Group name too long, maximum length is 200</li><li>Name has already been taken</li><li>User {user} not exists in the organization {org}</li><li>Workspace {ws} not exists in the organization {org}</li></ul>
     */
    400: string;
    /**
     * Forbidden
     */
    403: string;
    /**
     * Invalid group ID.
     */
    404: string;
};

export type PutOrganizationGroupError = PutOrganizationGroupErrors[keyof PutOrganizationGroupErrors];

export type PutOrganizationGroupResponses = {
    /**
     * Returns the created group data.
     */
    200: GroupOrganizationGroupResponse;
};

export type PutOrganizationGroupResponse = PutOrganizationGroupResponses[keyof PutOrganizationGroupResponses];

export type PostOrganizationInvitationData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/invitations';
};

export type PostOrganizationInvitationErrors = {
    /**
     * Possible error messages:<ul><li>Invalid JSON input</li><li>Invalid organization id</li><li>at least one email is required</li><li>at least one workspace is required</li><li>Missing e-mail</li><li>Invalid e-mail: '...'</li><li>invalid workspace ID</li><li>Active user limit is 5. Upgrade to add more active users</li><li>Invitation limit reached (please try again later; or upgrade)</li><li>User with e-mail '...' is already an inactive member of the organization</li></ul>
     */
    400: string;
    /**
     * Forbidden
     */
    403: string;
};

export type PostOrganizationInvitationError = PostOrganizationInvitationErrors[keyof PostOrganizationInvitationErrors];

export type PostOrganizationInvitationResponses = {
    /**
     * Created user invitations
     */
    200: InvitationResult;
};

export type PostOrganizationInvitationResponse = PostOrganizationInvitationResponses[keyof PostOrganizationInvitationResponses];

export type OrganizationDeleteInvitationData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
        /**
         * Numeric ID of the invitation
         */
        invitation_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/invitations/{invitation_id}';
};

export type OrganizationDeleteInvitationErrors = {
    /**
     * invalid 'invitation_id' passed in URL
     */
    400: unknown;
    /**
     * Invitation not found
     */
    404: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationDeleteInvitationResponses = {
    /**
     * Successful deletion
     */
    200: string;
};

export type OrganizationDeleteInvitationResponse = OrganizationDeleteInvitationResponses[keyof OrganizationDeleteInvitationResponses];

export type PutInvitationData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        organization_id: number;
        /**
         * Invitation ID
         */
        invitation_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/invitations/{invitation_id}/resend';
};

export type PutInvitationErrors = {
    /**
     * Organization ID and invitation organization ID mismatch
     */
    400: string;
    /**
     * Invitation code not found
     */
    404: string;
};

export type PutInvitationError = PutInvitationErrors[keyof PutInvitationErrors];

export type PutInvitationResponses = {
    /**
     * OK
     */
    200: string;
};

export type PutInvitationResponse = PutInvitationResponses[keyof PutInvitationResponses];

export type OrganizationGetInvoicePdfData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
        /**
         * Numeric ID of the invoice
         */
        invoice_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/invoices/{invoice_id}.pdf';
};

export type OrganizationGetInvoicePdfErrors = {
    /**
     * Possible values: <ul><li>invalid 'organization_id' passed in URL</li><li>invalid 'invoice_id' passed in URL</li></ul>
     */
    400: Blob | File;
    /**
     * Not authorized to access invoice [invoice_id]
     */
    403: Blob | File;
    /**
     * No invoice found
     */
    404: Blob | File;
    /**
     * Internal error
     */
    500: Blob | File;
};

export type OrganizationGetInvoicePdfError = OrganizationGetInvoicePdfErrors[keyof OrganizationGetInvoicePdfErrors];

export type OrganizationGetInvoicePdfResponses = {
    /**
     * Organization invoice in PDF form
     */
    200: Blob | File;
};

export type OrganizationGetInvoicePdfResponse = OrganizationGetInvoicePdfResponses[keyof OrganizationGetInvoicePdfResponses];

export type GetOrganizationInvoiceData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
        /**
         * Numeric ID or string ID of the invoice.
         */
        invoice_uid: string;
    };
    query?: never;
    url: '/organizations/{organization_id}/invoices/{invoice_uid}.pdf';
};

export type GetOrganizationInvoiceErrors = {
    /**
     * Not authorized to access invoice
     */
    403: Blob | File;
    /**
     * <p>Possible error messages:</p><ul><li>Invalid organization id</li><li>No invoice found</li></ul>
     */
    404: Blob | File;
    /**
     * Internal Server Error
     */
    500: Blob | File;
};

export type GetOrganizationInvoiceError = GetOrganizationInvoiceErrors[keyof GetOrganizationInvoiceErrors];

export type GetOrganizationInvoiceResponses = {
    /**
     * Invoice document in PDF form.
     */
    200: Blob | File;
};

export type GetOrganizationInvoiceResponse = GetOrganizationInvoiceResponses[keyof GetOrganizationInvoiceResponses];

export type OrganizationMigrateData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/migrate';
};

export type OrganizationMigrateErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>invalid 'organization_id' passed in URL</li><li>no source organizations given</li><li>invalid JSON input</li><li>target organization is suspended</li><li>no active subscription for organization</li><li>multi-workspace is not enabled for target organization</li><li>organization is blacklisted</li><li>Organization [org_id] can have a maximum of [number] workspaces</li><li>source organization [org_id] has balance of [number]</li><li>user has mismatching status:</li></ul>
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationMigrateResponses = {
    /**
     * Successful migration
     */
    200: string;
};

export type OrganizationMigrateResponse = OrganizationMigrateResponses[keyof OrganizationMigrateResponses];

export type OrganizationOptionAddData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/options';
};

export type OrganizationOptionAddErrors = {
    /**
     * invalid '<p>Possible error messages:</p><ul><li>invalid 'organization_id' passed in URL</li><li>invalid JSON body</li></ul>
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationOptionAddResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type OrganizationOptionAddResponse = OrganizationOptionAddResponses[keyof OrganizationOptionAddResponses];

export type OrganizationOptionDeleteData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
        /**
         * Option name
         */
        key: string;
    };
    query?: never;
    url: '/organizations/{organization_id}/options/{key}';
};

export type OrganizationOptionDeleteErrors = {
    /**
     * invalid 'invalid 'organization_id' passed in URL
     */
    400: unknown;
    /**
     * Organization doesn't have option [key]
     */
    404: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationOptionDeleteResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type OrganizationOptionDeleteResponse = OrganizationOptionDeleteResponses[keyof OrganizationOptionDeleteResponses];

export type OrganizationRestoreUserData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
        /**
         * Numeric ID of the organization_user
         */
        organization_user_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/organization_user/{organization_user_id}/restore';
};

export type OrganizationRestoreUserErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>invalid 'organization_id' passed in URL</li><li>invalid 'organization_user_id' passed in URL</li><li>invalid JSON input</li><li>User cannot be restored</li><li>maximum number of users for organization exceeded (please upgrade)</li></ul>
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationRestoreUserResponses = {
    /**
     * Successful restore
     */
    200: string;
};

export type OrganizationRestoreUserResponse = OrganizationRestoreUserResponses[keyof OrganizationRestoreUserResponses];

export type GetOrganizationOwnerData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/owner';
};

export type GetOrganizationOwnerErrors = {
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Organization owner not found
     */
    404: string;
};

export type GetOrganizationOwnerError = GetOrganizationOwnerErrors[keyof GetOrganizationOwnerErrors];

export type GetOrganizationOwnerResponses = {
    /**
     * Successful operation
     */
    200: ModelsOrganizationOwner;
};

export type GetOrganizationOwnerResponse = GetOrganizationOwnerResponses[keyof GetOrganizationOwnerResponses];

export type GetOwnershipTransfersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query?: {
        /**
         * If true, returns only current, not finished transfer
         */
        ongoing?: string;
    };
    url: '/organizations/{organization_id}/owner/transfer';
};

export type GetOwnershipTransfersErrors = {
    /**
     * 'ongoing' parameter can be true or false only
     */
    400: string;
    /**
     * User does not have access to this resource
     */
    403: string;
};

export type GetOwnershipTransfersError = GetOwnershipTransfersErrors[keyof GetOwnershipTransfersErrors];

export type GetOwnershipTransfersResponses = {
    /**
     * OK
     */
    200: Array<ModelsTransfer>;
};

export type GetOwnershipTransfersResponse = GetOwnershipTransfersResponses[keyof GetOwnershipTransfersResponses];

export type PostOwnershipTransferData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/owner/transfer';
};

export type PostOwnershipTransferErrors = {
    /**
     * Cannot load organization.
     */
    400: string;
    /**
     * User does not have access to this resource
     */
    403: string;
};

export type PostOwnershipTransferError = PostOwnershipTransferErrors[keyof PostOwnershipTransferErrors];

export type PostOwnershipTransferResponses = {
    /**
     * OK
     */
    200: ModelsTransfer;
};

export type PostOwnershipTransferResponse = PostOwnershipTransferResponses[keyof PostOwnershipTransferResponses];

export type GetOwnershipTransferData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
        /**
         * Numeric ID of the transfer.
         */
        transfer_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/owner/transfer/{transfer_id}';
};

export type GetOwnershipTransferErrors = {
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Transfer not found in the organization
     */
    404: string;
};

export type GetOwnershipTransferError = GetOwnershipTransferErrors[keyof GetOwnershipTransferErrors];

export type GetOwnershipTransferResponses = {
    /**
     * OK
     */
    200: ModelsTransfer;
};

export type GetOwnershipTransferResponse = GetOwnershipTransferResponses[keyof GetOwnershipTransferResponses];

export type PostOwnershipTransferActionsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
        /**
         * Numeric ID of the transfer.
         */
        transfer_id: number;
        /**
         * Action to update transfer with.
         */
        action: 'accept' | 'decline' | 'withdraw';
    };
    query?: never;
    url: '/organizations/{organization_id}/owner/transfer/{transfer_id}/{action}';
};

export type PostOwnershipTransferActionsErrors = {
    /**
     * Cannot load current user data.
     */
    400: string;
    /**
     * Owner not found.
     */
    404: string;
};

export type PostOwnershipTransferActionsError = PostOwnershipTransferActionsErrors[keyof PostOwnershipTransferActionsErrors];

export type PostOwnershipTransferActionsResponses = {
    /**
     * OK
     */
    200: ModelsTransfer;
};

export type PostOwnershipTransferActionsResponse = PostOwnershipTransferActionsResponses[keyof PostOwnershipTransferActionsResponses];

export type GetOrganizationsPaymentsRecordsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: {
        /**
         * If 'true', returns unified invoices
         */
        is_unified?: true | false;
        /**
         * Next cursor for unified subsriptions. Cannot be used without `last_inv`
         */
        cursor?: string;
        /**
         * Last invoice ID from the previous call.
         */
        last_inv?: string;
    };
    url: '/organizations/{organization_id}/payment_records';
};

export type GetOrganizationsPaymentsRecordsErrors = {
    /**
     * Forwards subscription client error message when `?is_unified=true`
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetOrganizationsPaymentsRecordsError = GetOrganizationsPaymentsRecordsErrors[keyof GetOrganizationsPaymentsRecordsErrors];

export type GetOrganizationsPaymentsRecordsResponses = {
    /**
     * Successful operation when `?is_unified=true`
     */
    200: Array<ModelsUnifiedSubscriptionInvoiceList>;
};

export type GetOrganizationsPaymentsRecordsResponse = GetOrganizationsPaymentsRecordsResponses[keyof GetOrganizationsPaymentsRecordsResponses];

export type OrganizationCreatePaymentPdfData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
        /**
         * Numeric ID of the payment
         */
        payment_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/payments/{payment_id}.pdf';
};

export type OrganizationCreatePaymentPdfErrors = {
    /**
     * Internal error
     */
    500: Blob | File;
};

export type OrganizationCreatePaymentPdfError = OrganizationCreatePaymentPdfErrors[keyof OrganizationCreatePaymentPdfErrors];

export type OrganizationCreatePaymentPdfResponses = {
    /**
     * Organization payment in PDF form
     */
    200: Blob | File;
};

export type OrganizationCreatePaymentPdfResponse = OrganizationCreatePaymentPdfResponses[keyof OrganizationCreatePaymentPdfResponses];

export type GetOrganizationsPlansData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/plans';
};

export type GetOrganizationsPlansErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetOrganizationsPlansError = GetOrganizationsPlansErrors[keyof GetOrganizationsPlansErrors];

export type GetOrganizationsPlansResponses = {
    /**
     * Successful operation.
     */
    200: BillingPricingStruct;
};

export type GetOrganizationsPlansResponse = GetOrganizationsPlansResponses[keyof GetOrganizationsPlansResponses];

export type GetOrganizationsPlanData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
        /**
         * Numeric ID of the plan
         */
        plan_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/plans/{plan_id}';
};

export type GetOrganizationsPlanErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetOrganizationsPlanError = GetOrganizationsPlanErrors[keyof GetOrganizationsPlanErrors];

export type GetOrganizationsPlanResponses = {
    /**
     * Successful operation.
     */
    200: BillingPricingStruct;
};

export type GetOrganizationsPlanResponse = GetOrganizationsPlanResponses[keyof GetOrganizationsPlanResponses];

export type OrganizationGetPurchaseOrderPdfData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
        /**
         * Numeric ID of the purchase order
         */
        purchase_order_uid: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/purchase_orders/{purchase_order_uid}.pdf';
};

export type OrganizationGetPurchaseOrderPdfErrors = {
    /**
     * Possible values: <ul><li>invalid 'organization_id' passed in URL</li><li>invalid 'purchase_order_id' passed in URL</li><li>Purchase order not found</li></ul>
     */
    404: Blob | File;
    /**
     * Internal error
     */
    500: Blob | File;
};

export type OrganizationGetPurchaseOrderPdfError = OrganizationGetPurchaseOrderPdfErrors[keyof OrganizationGetPurchaseOrderPdfErrors];

export type OrganizationGetPurchaseOrderPdfResponses = {
    /**
     * Organization purchase order in PDF form
     */
    200: Blob | File;
};

export type OrganizationGetPurchaseOrderPdfResponse = OrganizationGetPurchaseOrderPdfResponses[keyof OrganizationGetPurchaseOrderPdfResponses];

export type OrganizationRestoreData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/restore';
};

export type OrganizationRestoreErrors = {
    /**
     * invalid '<p>Possible error messages:</p><ul><li>organization_id' passed in URL</li><li>Organization is not deleted</li></ul>
     */
    400: unknown;
    /**
     * Invalid organization ID
     */
    404: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationRestoreResponses = {
    /**
     * Successful migration
     */
    200: string;
};

export type OrganizationRestoreResponse = OrganizationRestoreResponses[keyof OrganizationRestoreResponses];

export type GetOrganizationRolesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/roles';
};

export type GetOrganizationRolesErrors = {
    /**
     * User does not have access to the organization
     */
    403: string;
    /**
     * Server error
     */
    500: string;
};

export type GetOrganizationRolesError = GetOrganizationRolesErrors[keyof GetOrganizationRolesErrors];

export type GetOrganizationRolesResponses = {
    /**
     * Successful operation
     */
    200: Array<TypesRole>;
};

export type GetOrganizationRolesResponse = GetOrganizationRolesResponses[keyof GetOrganizationRolesResponses];

export type GetOrganizationSegmentationData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/segmentation';
};

export type GetOrganizationSegmentationErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>User not part of organization</li></ul>
     */
    404: unknown;
};

export type GetOrganizationSegmentationResponses = {
    /**
     * Successful operation
     */
    200: ModelsOrganizationSegmentation;
    /**
     * Organization without segmentation information.
     */
    204: string;
};

export type GetOrganizationSegmentationResponse = GetOrganizationSegmentationResponses[keyof GetOrganizationSegmentationResponses];

export type PutOrganizationSegmentationData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/segmentation';
};

export type PutOrganizationSegmentationErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>User not part of organization</li></ul>
     */
    404: unknown;
};

export type PutOrganizationSegmentationResponses = {
    /**
     * Successful operation
     */
    200: ModelsOrganizationSegmentation;
};

export type PutOrganizationSegmentationResponse = PutOrganizationSegmentationResponses[keyof PutOrganizationSegmentationResponses];

export type DeleteOrganizationSubscriptionData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query: {
        /**
         * If true, the subscription is canceled immediately otherwise canceled at period end
         */
        immediateCancel: string;
    };
    url: '/organizations/{organization_id}/subscription';
};

export type DeleteOrganizationSubscriptionErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>subscription not found</li></ul>
     */
    404: string;
};

export type DeleteOrganizationSubscriptionError = DeleteOrganizationSubscriptionErrors[keyof DeleteOrganizationSubscriptionErrors];

export type DeleteOrganizationSubscriptionResponses = {
    /**
     * OK
     */
    200: string;
};

export type DeleteOrganizationSubscriptionResponse = DeleteOrganizationSubscriptionResponses[keyof DeleteOrganizationSubscriptionResponses];

export type OrganizationGetSubscriptionData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription';
};

export type OrganizationGetSubscriptionErrors = {
    /**
     * invalid 'organization_id' passed in URL
     */
    400: unknown;
    /**
     * Subscription does not exist
     */
    404: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationGetSubscriptionResponses = {
    /**
     * Successfully canceled premium trial
     */
    200: OrganizationSubscriptionResponse;
};

export type OrganizationGetSubscriptionResponse = OrganizationGetSubscriptionResponses[keyof OrganizationGetSubscriptionResponses];

export type PostOrganizationSubscriptionData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription';
};

export type PostOrganizationSubscriptionErrors = {
    /**
     * pricing_plan_tag is a required field
     */
    400: string;
};

export type PostOrganizationSubscriptionError = PostOrganizationSubscriptionErrors[keyof PostOrganizationSubscriptionErrors];

export type PostOrganizationSubscriptionResponses = {
    /**
     * Subscription created
     */
    200: unknown;
};

export type PutOrganizationSubscriptionData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription';
};

export type PutOrganizationSubscriptionErrors = {
    /**
     * pricing_plan_tag is a required field
     */
    400: string;
};

export type PutOrganizationSubscriptionError = PutOrganizationSubscriptionErrors[keyof PutOrganizationSubscriptionErrors];

export type PutOrganizationSubscriptionResponses = {
    /**
     * Subscription updated
     */
    200: unknown;
};

export type PostOrganizationSubscriptionCancellationFeedbackData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription/cancellation_feedback';
};

export type PostOrganizationSubscriptionCancellationFeedbackErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>JSON is not valid</li><li>Key: 'payload.Data' Error:Field validation for 'Data' failed on the 'required' tag</li><li>Key: 'payload.Data' Error:Field validation for 'Data' failed on the 'min' tag</li></ul>
     */
    400: string;
    /**
     * Forbidden
     */
    403: string;
    /**
     * Internal server error
     */
    500: string;
};

export type PostOrganizationSubscriptionCancellationFeedbackError = PostOrganizationSubscriptionCancellationFeedbackErrors[keyof PostOrganizationSubscriptionCancellationFeedbackErrors];

export type PostOrganizationSubscriptionCancellationFeedbackResponses = {
    /**
     * Successfully created
     */
    201: unknown;
};

export type GetUnifiedCustomerData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription/customer';
};

export type GetUnifiedCustomerErrors = {
    /**
     * Admin permissions required.
     */
    403: string;
};

export type GetUnifiedCustomerError = GetUnifiedCustomerErrors[keyof GetUnifiedCustomerErrors];

export type GetUnifiedCustomerResponses = {
    /**
     * OK
     */
    200: CustomerUnifiedCustomerResponse;
};

export type GetUnifiedCustomerResponse = GetUnifiedCustomerResponses[keyof GetUnifiedCustomerResponses];

export type PostUnifiedCustomerData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription/customer';
};

export type PostUnifiedCustomerErrors = {
    /**
     * Admin permissions required." if user is not an admin.
     */
    403: string;
};

export type PostUnifiedCustomerError = PostUnifiedCustomerErrors[keyof PostUnifiedCustomerErrors];

export type PostUnifiedCustomerResponses = {
    /**
     * OK
     */
    200: CustomerUnifiedCustomerResponse;
};

export type PostUnifiedCustomerResponse = PostUnifiedCustomerResponses[keyof PostUnifiedCustomerResponses];

export type PutUnifiedCustomerData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription/customer';
};

export type PutUnifiedCustomerErrors = {
    /**
     * Admin permissions required." if user is not an admin.
     */
    403: string;
};

export type PutUnifiedCustomerError = PutUnifiedCustomerErrors[keyof PutUnifiedCustomerErrors];

export type PutUnifiedCustomerResponses = {
    /**
     * OK
     */
    200: CustomerUnifiedCustomerResponse;
};

export type PutUnifiedCustomerResponse = PutUnifiedCustomerResponses[keyof PutUnifiedCustomerResponses];

export type PostOrganizationSubscriptionDiscountRequestData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription/discount_request';
};

export type PostOrganizationSubscriptionDiscountRequestErrors = {
    /**
     * JSON is not valid
     */
    400: string;
    /**
     * Forbidden
     */
    403: string;
    /**
     * User is not found
     */
    404: string;
};

export type PostOrganizationSubscriptionDiscountRequestError = PostOrganizationSubscriptionDiscountRequestErrors[keyof PostOrganizationSubscriptionDiscountRequestErrors];

export type PostOrganizationSubscriptionDiscountRequestResponses = {
    /**
     * Returns only status code when saved correctly.
     */
    200: string;
};

export type PostOrganizationSubscriptionDiscountRequestResponse = PostOrganizationSubscriptionDiscountRequestResponses[keyof PostOrganizationSubscriptionDiscountRequestResponses];

export type GetFeatureUpsellMultiData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/organizations/{organization_id}/subscription/feature_upsell_multi';
};

export type GetFeatureUpsellMultiErrors = {
    /**
     * Internal server error
     */
    500: string;
};

export type GetFeatureUpsellMultiError = GetFeatureUpsellMultiErrors[keyof GetFeatureUpsellMultiErrors];

export type GetFeatureUpsellMultiResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: Array<FeatureUpsellResponse>;
    };
};

export type GetFeatureUpsellMultiResponse = GetFeatureUpsellMultiResponses[keyof GetFeatureUpsellMultiResponses];

export type GetOrganizationInvoiceSummaryData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query?: {
        /**
         * Quantity of the subscription
         */
        quantity?: number;
        /**
         * Pricing plan tag
         */
        pricing_plan_tag?: string;
    };
    url: '/organizations/{organization_id}/subscription/invoice_summary';
};

export type GetOrganizationInvoiceSummaryErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetOrganizationInvoiceSummaryError = GetOrganizationInvoiceSummaryErrors[keyof GetOrganizationInvoiceSummaryErrors];

export type GetOrganizationInvoiceSummaryResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetOrganizationInvoiceSummaryResponse = GetOrganizationInvoiceSummaryResponses[keyof GetOrganizationInvoiceSummaryResponses];

export type GetOrganizationSubscriptionPaymentFailedData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription/payment_failed';
};

export type GetOrganizationSubscriptionPaymentFailedErrors = {
    /**
     * 'Admin permissions required.' if user is not part of the organization.
     */
    403: string;
    /**
     * 'Subscription not found.' if subscription is not found.
     */
    404: string;
    /**
     * 'Internal server error.' if an error occurred.
     */
    500: string;
};

export type GetOrganizationSubscriptionPaymentFailedError = GetOrganizationSubscriptionPaymentFailedErrors[keyof GetOrganizationSubscriptionPaymentFailedErrors];

export type GetOrganizationSubscriptionPaymentFailedResponses = {
    /**
     * Returns subscription payment failed details.
     */
    200: ModelsPaymentFailedResponse;
};

export type GetOrganizationSubscriptionPaymentFailedResponse = GetOrganizationSubscriptionPaymentFailedResponses[keyof GetOrganizationSubscriptionPaymentFailedResponses];

export type DeletePromotionCodeData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription/promocode';
};

export type DeletePromotionCodeErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type DeletePromotionCodeResponses = {
    /**
     * Promotion code removed
     */
    200: unknown;
};

export type PostPromotionCodeData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription/promocode';
};

export type PostPromotionCodeErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type PostPromotionCodeResponses = {
    /**
     * Promotion code applied
     */
    200: unknown;
};

export type GetOrganizationPurchaseOrderPdfData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
        /**
         * Numeric ID or string ID of the purchase order.
         */
        purchase_order_uid: string;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription/purchase_orders/{purchase_order_uid}.pdf';
};

export type GetOrganizationPurchaseOrderPdfErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Purchase order not found</li><li>Company not found</li></ul>
     */
    404: Blob | File;
};

export type GetOrganizationPurchaseOrderPdfError = GetOrganizationPurchaseOrderPdfErrors[keyof GetOrganizationPurchaseOrderPdfErrors];

export type GetOrganizationPurchaseOrderPdfResponses = {
    /**
     * Purchase order document in PDF form.
     */
    200: Blob | File;
};

export type GetOrganizationPurchaseOrderPdfResponse = GetOrganizationPurchaseOrderPdfResponses[keyof GetOrganizationPurchaseOrderPdfResponses];

export type PostReferralBonusData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: {
        /**
         * The GrowSurf campaign to use instead of the default ones
         */
        campaign_id?: string;
    };
    url: '/organizations/{organization_id}/subscription/referral_bonus';
};

export type PostReferralBonusErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type PostReferralBonusResponses = {
    /**
     * Referral bonus applied
     */
    200: unknown;
};

export type CreateSetupIntentData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription/setup_intent';
};

export type CreateSetupIntentErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type CreateSetupIntentResponses = {
    /**
     * Setup intent created
     */
    200: unknown;
};

export type PostOrganizationSubscriptionTrialData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization.
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription/trial';
};

export type PostOrganizationSubscriptionTrialErrors = {
    /**
     * Forbidden
     */
    403: string;
    /**
     * Internal server error
     */
    500: string;
};

export type PostOrganizationSubscriptionTrialError = PostOrganizationSubscriptionTrialErrors[keyof PostOrganizationSubscriptionTrialErrors];

export type PostOrganizationSubscriptionTrialResponses = {
    /**
     * Subscription created
     */
    200: unknown;
};

export type PostOrganizationSubscriptionUpgradeRequestData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscription/upgrade_request/{feature_id}';
};

export type PostOrganizationSubscriptionUpgradeRequestErrors = {
    /**
     * Forbidden
     */
    403: string;
};

export type PostOrganizationSubscriptionUpgradeRequestError = PostOrganizationSubscriptionUpgradeRequestErrors[keyof PostOrganizationSubscriptionUpgradeRequestErrors];

export type PostOrganizationSubscriptionUpgradeRequestResponses = {
    /**
     * CTA notifications sent
     */
    200: string;
};

export type PostOrganizationSubscriptionUpgradeRequestResponse = PostOrganizationSubscriptionUpgradeRequestResponses[keyof PostOrganizationSubscriptionUpgradeRequestResponses];

export type OrganizationDeleteSubscriptionData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscriptions';
};

export type OrganizationDeleteSubscriptionErrors = {
    /**
     * invalid 'organization_id' passed in URL
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationDeleteSubscriptionResponses = {
    /**
     * Successfully added premium trial
     */
    200: string;
};

export type OrganizationDeleteSubscriptionResponse = OrganizationDeleteSubscriptionResponses[keyof OrganizationDeleteSubscriptionResponses];

export type OrganizationCreateCustomerData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscriptions/customer';
};

export type OrganizationCreateCustomerErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>invalid 'organization_id' passed in URL</li><li>invalid JSON input</li><li>customer_name is required</li><li>country_id is required</li><li>subdivision_id is required</li><li>postal_code is required</li></ul>
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationCreateCustomerResponses = {
    /**
     * Newly created customer for the organization
     */
    200: OrganizationNewCustomerResponse;
};

export type OrganizationCreateCustomerResponse = OrganizationCreateCustomerResponses[keyof OrganizationCreateCustomerResponses];

export type OrganizationCancelForcedTrialData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscriptions/forced_trial';
};

export type OrganizationCancelForcedTrialErrors = {
    /**
     * invalid 'organization_id' passed in URL
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationCancelForcedTrialResponses = {
    /**
     * Successfully canceled premium trial
     */
    200: string;
};

export type OrganizationCancelForcedTrialResponse = OrganizationCancelForcedTrialResponses[keyof OrganizationCancelForcedTrialResponses];

export type OrganizationAddForcedTrialData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscriptions/forced_trial';
};

export type OrganizationAddForcedTrialErrors = {
    /**
     * invalid '<p>Possible error messages:</p><ul><li>organization_id' passed in URL</li><li>Invalid JSON input</li></ul>
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationAddForcedTrialResponses = {
    /**
     * Successfully added premium trial
     */
    200: string;
};

export type OrganizationAddForcedTrialResponse = OrganizationAddForcedTrialResponses[keyof OrganizationAddForcedTrialResponses];

export type OrganizationGetSubscriptionSeatsLogsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscriptions/seats_logs';
};

export type OrganizationGetSubscriptionSeatsLogsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>invalid 'organization_id' passed in URL</li><li>Invalid before date</li><li>Invalid after date</li></ul>
     */
    400: unknown;
    /**
     * No logs found
     */
    404: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationGetSubscriptionSeatsLogsResponses = {
    /**
     * Paginated seats logs
     */
    200: SeatslogsPaginatedOrganizationSeatsLogs;
};

export type OrganizationGetSubscriptionSeatsLogsResponse = OrganizationGetSubscriptionSeatsLogsResponses[keyof OrganizationGetSubscriptionSeatsLogsResponses];

export type OrganizationSyncSubscriptionData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/subscriptions/sync';
};

export type OrganizationSyncSubscriptionErrors = {
    /**
     * invalid 'organization_id' passed in URL
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationSyncSubscriptionResponses = {
    /**
     * Successfully synced subscription
     */
    200: string;
};

export type OrganizationSyncSubscriptionResponse = OrganizationSyncSubscriptionResponses[keyof OrganizationSyncSubscriptionResponses];

export type OrganizationGetTrialData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/trial';
};

export type OrganizationGetTrialErrors = {
    /**
     * invalid 'organization_id' passed in URL
     */
    400: unknown;
    /**
     * No current trial plan for organization.
     */
    404: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationGetTrialResponses = {
    /**
     * Current organization trial plan
     */
    200: TrialOrganizationTrialPlan;
};

export type OrganizationGetTrialResponse = OrganizationGetTrialResponses[keyof OrganizationGetTrialResponses];

export type OrganizationCancelTrialData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/trial/cancel';
};

export type OrganizationCancelTrialErrors = {
    /**
     * invalid 'organization_id' passed in URL
     */
    400: unknown;
    /**
     * No current trial plan for organization.
     */
    404: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationCancelTrialResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type OrganizationCancelTrialResponse = OrganizationCancelTrialResponses[keyof OrganizationCancelTrialResponses];

export type OrganizationCreateTrialData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/trial/start';
};

export type OrganizationCreateTrialErrors = {
    /**
     * invalid '<p>Possible error messages:</p><ul><li>invalid 'organization_id' passed in URL</li><li>invalid JSON body</li><li>invalid date</li><li>Start date should come before end date.</li><li>It is not possible to create a trial greater than [number] days.</li><li>This account already have a trial for the requested period.</li></ul>
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationCreateTrialResponses = {
    /**
     * Successful operation
     */
    200: OrganizationTrialInterval;
};

export type OrganizationCreateTrialResponse = OrganizationCreateTrialResponses[keyof OrganizationCreateTrialResponses];

export type OrganizationUnsuspendData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/unsuspend';
};

export type OrganizationUnsuspendErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>invalid 'organization_id' passed in URL</li><li>Organization is not suspended</li><li>maximum number of users for organization exceeded (please upgrade)</li></ul>
     */
    400: unknown;
    /**
     * Invalid organization ID
     */
    404: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationUnsuspendResponses = {
    /**
     * Successful unsuspend
     */
    200: string;
};

export type OrganizationUnsuspendResponse = OrganizationUnsuspendResponses[keyof OrganizationUnsuspendResponses];

export type GetOrganizationUsersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: {
        /**
         * Returns records where name or email contains this string
         */
        filter?: string;
        /**
         * List of `active` `inactive` `invited` comma separated(if not present, all statuses)
         */
        active_status?: string;
        /**
         * If true returns admins only
         */
        only_admins?: string;
        /**
         * Comma-separated list of groups ids, returns users belonging to these groups only
         */
        groups?: string;
        /**
         * Comma-separated list of workspaces ids, returns users belonging to this workspaces only
         */
        workspaces?: string;
        /**
         * Page number, default 1
         */
        page?: number;
        /**
         * Number of items per page, default 50
         */
        per_page?: number;
        /**
         * Values 'asc' or 'desc', result is sorted on 'names' column, default 'asc'
         */
        sort_dir?: string;
    };
    url: '/organizations/{organization_id}/users';
};

export type GetOrganizationUsersErrors = {
    /**
     * Possible error messages:<ul><li>Missing or invalid organization_id.</li><li>active_status parameter can contain only 'active', 'inactive' or 'invited'.</li><li>only_admins parameter can contain only 'true' or 'false'.</li><li>Invalid value sent for 'page'.</li><li>page parameter must contain values > 0.</li><li>Invalid value sent for 'per_page'.</li><li>per_page parameter must contain values > 0.</li><li>sort_dir parameter can contain only 'asc' or 'desc'.</li><li>Invalid value sent for 'groups'.</li><li>Invalid value sent for 'workspaces'.</li></ul>
     */
    400: string;
    /**
     * User is not authorized to list the organization users
     */
    403: string;
};

export type GetOrganizationUsersError = GetOrganizationUsersErrors[keyof GetOrganizationUsersErrors];

export type GetOrganizationUsersResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsOrgUser>;
};

export type GetOrganizationUsersResponse = GetOrganizationUsersResponses[keyof GetOrganizationUsersResponses];

export type PatchOrganizationUsersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/users';
};

export type PatchOrganizationUsersErrors = {
    /**
     * Possible error messages:<ul><li>Missing or invalid organization_id</li><li>At least one organization user ID must be supplied.</li><li>Organization user IDs must be unique.</li><li>The following organization user IDs do not belong to this organization: '...'.</li><li>Cannot remove the paying user with organization user ID='...'.</li><li>Cannot remove the organization owner user with organization user ID='...'.</li></ul>
     */
    400: string;
    /**
     * User is not authorized to delete the organization user
     */
    403: string;
};

export type PatchOrganizationUsersError = PatchOrganizationUsersErrors[keyof PatchOrganizationUsersErrors];

export type PatchOrganizationUsersResponses = {
    /**
     * OK
     */
    200: string;
};

export type PatchOrganizationUsersResponse = PatchOrganizationUsersResponses[keyof PatchOrganizationUsersResponses];

export type GetOrganizationUsersDetailedData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: {
        /**
         * Returns records where name or email contains this string
         */
        filter?: string;
        /**
         * List of `active` `inactive` `invited` comma separated(if not present, all statuses)
         */
        active_status?: string;
        /**
         * If true returns admins only
         */
        only_admins?: string;
        /**
         * Comma-separated list of groups ids, returns users belonging to these groups only
         */
        groups?: string;
        /**
         * Comma-separated list of workspaces ids, returns users belonging to this workspaces only
         */
        workspaces?: string;
        /**
         * Page number, default 1
         */
        page?: number;
        /**
         * Number of items per page, default 50
         */
        per_page?: number;
        /**
         * Values 'asc' or 'desc', result is sorted on 'names' column, default 'asc'
         */
        sort_dir?: string;
    };
    url: '/organizations/{organization_id}/users/detailed';
};

export type GetOrganizationUsersDetailedErrors = {
    /**
     * Possible error messages:<ul><li>Missing or invalid organization_id.</li><li>active_status parameter can contain only 'active', 'inactive' or 'invited'.</li><li>only_admins parameter can contain only 'true' or 'false'.</li><li>Invalid value sent for 'page'.</li><li>page parameter must contain values > 0.</li><li>Invalid value sent for 'per_page'.</li><li>per_page parameter must contain values > 0.</li><li>sort_dir parameter can contain only 'asc' or 'desc'.</li><li>Invalid value sent for 'groups'.</li><li>Invalid value sent for 'workspaces'.</li><li>user cannot access specified workspace id.</li></ul>
     */
    400: string;
    403: unknown;
};

export type GetOrganizationUsersDetailedError = GetOrganizationUsersDetailedErrors[keyof GetOrganizationUsersDetailedErrors];

export type GetOrganizationUsersDetailedResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsOrgUser>;
};

export type GetOrganizationUsersDetailedResponse = GetOrganizationUsersDetailedResponses[keyof GetOrganizationUsersDetailedResponses];

export type DeleteOrganizationUsersLeaveData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/users/leave';
};

export type DeleteOrganizationUsersLeaveErrors = {
    /**
     * Possible error messages:<ul><li>The user does not belong to the organization.</li><li>Cannot remove the paying user.</li><li>Cannot remove the organization owner.</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
};

export type DeleteOrganizationUsersLeaveError = DeleteOrganizationUsersLeaveErrors[keyof DeleteOrganizationUsersLeaveErrors];

export type DeleteOrganizationUsersLeaveResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type DeleteOrganizationUsersLeaveResponse = DeleteOrganizationUsersLeaveResponses[keyof DeleteOrganizationUsersLeaveResponses];

export type PutOrganizationUsersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/users/{organization_user_id}';
};

export type PutOrganizationUsersErrors = {
    /**
     * Possible error messages:<ul><li>Missing or invalid organization_id.</li><li>Invalid role_id.</li><li>Cannot use both admin flags and role_id.</li><li>User does not exist in the organization.</li><li>At least one field is required.</li><li>Field 'name' cannot be empty.</li><li>Missing e-mail.</li><li>Invalid e-mail: '...'</li><li>Email already exists.</li><li>Group '...' is not in Organization '...'.</li><li>Workspace '...' is not in Organization '...'.</li><li>Cannot remove admin privileges from owner.</li><li>Cannot deactivate owner.</li><li>Cannot remove admin privileges from paying user.</li><li>Cannot deactivate paying user.</li><li>User has multiple organizations.</li><li>Invalid organization role.</li><li>Invalid role ID: 1234.</li><li>Invalid workspace role with ID: 1234.</li></ul>
     */
    400: string;
    /**
     * User is not authorized to update the organization user
     */
    403: string;
    /**
     * Possible error messages:<ul><li>Invalid organization user ID.</li><li>Failed to load user data.</li></ul>
     */
    404: string;
};

export type PutOrganizationUsersError = PutOrganizationUsersErrors[keyof PutOrganizationUsersErrors];

export type PutOrganizationUsersResponses = {
    /**
     * OK
     */
    200: string;
};

export type PutOrganizationUsersResponse = PutOrganizationUsersResponses[keyof PutOrganizationUsersResponses];

export type OrganizationValidateTaxData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/validate_tax';
};

export type OrganizationValidateTaxErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>invalid 'organization_id' passed in URL</li><li>invalid JSON input</li><li>Country is not VAT applicable</li><li>Not supported for companies other than TogglOÜ</li><li>There was an error in the validation process, please retry in a few minutes</li></ul>
     */
    400: unknown;
    /**
     * <p>Possible error messages:</p><ul><li>Invalid country ID</li><li>Customer not found</li><ul>
     */
    404: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type OrganizationValidateTaxResponses = {
    /**
     * Validation result
     */
    200: HelpersValidateTaxResponse;
};

export type OrganizationValidateTaxResponse = OrganizationValidateTaxResponses[keyof OrganizationValidateTaxResponses];

export type PostOrganizationWorkspacesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/workspaces';
};

export type PostOrganizationWorkspacesErrors = {
    /**
     * Possible errors:<ul><li>JSON is not valid</li><li>workspace name must contain non-space characters</li><li>workspace name must not be nil</li><li>workspace name must not be longer than 140</li><li>another workspace with same name exists in organization</li><li>user can have a maximum of 100 workspaces</li><li>Multiple workspaces are not enabled in this organization.</li><li>Organization {name} can have a maximum of {amount} workspaces</li><li>User with id {id} does not exist.</li><li>User {userID} not exists in the workspace.</li></ul>
     */
    400: string;
    /**
     * Possible errors:<ul><li>Must be a premium user to use default_hourly_rate</li><li>restricting tag management to administrators requires a premium subscription</li><li>Must be a premium user to use default_currency</li><li>Must be a premium user to use rounding_minutes</li><li>Must be a premium user to use projects_billable_by_default</li><li>Must be a premium user to use rounding</li></ul>
     */
    402: string;
    /**
     * Forbidden
     */
    403: string;
    /**
     * Possible errors:<ul><li>Organization not found/accessible</li><li>Workspace not found/accessible</li><li>organization owner not found</li></ul>
     */
    404: string;
};

export type PostOrganizationWorkspacesError = PostOrganizationWorkspacesErrors[keyof PostOrganizationWorkspacesErrors];

export type PostOrganizationWorkspacesResponses = {
    /**
     * Successful operation.
     */
    200: ModelsWorkspace;
};

export type PostOrganizationWorkspacesResponse = PostOrganizationWorkspacesResponses[keyof PostOrganizationWorkspacesResponses];

export type GetOrganizationWorkspacesStatisticsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/organizations/{organization_id}/workspaces/statistics';
};

export type GetOrganizationWorkspacesStatisticsErrors = {
    /**
     * Forbidden
     */
    403: string;
    /**
     * Resource can not be found
     */
    404: string;
};

export type GetOrganizationWorkspacesStatisticsError = GetOrganizationWorkspacesStatisticsErrors[keyof GetOrganizationWorkspacesStatisticsErrors];

export type GetOrganizationWorkspacesStatisticsResponses = {
    /**
     * Successful operation.
     */
    200: {
        [key: string]: ModelsStatistics;
    };
};

export type GetOrganizationWorkspacesStatisticsResponse = GetOrganizationWorkspacesStatisticsResponses[keyof GetOrganizationWorkspacesStatisticsResponses];

export type PutOrganizationWorkspacesAssignmentsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
        /**
         * Numeric ID of the workspace within the organization
         */
        workspace_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/workspaces/{workspace_id}/assignments';
};

export type PutOrganizationWorkspacesAssignmentsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Invalid JSON input</li><li>Invalid organization ID.</li><li>Nothing to change.</li><li>Field operation can contain only 'add' or 'remove'.</li><li>Cannot send user_id and group_id in the same element.</li><li>One of user_id or group_id is required.</li><li>Invalid user_id.</li><li>Cannot remove workspace owner.</li><li>Cannot remove paying user.</li><li>Cannot remove organization admin.</li><li>Invalid group_id.</li><li>Invalid workspace ID.</li></ul>
     */
    400: string;
    /**
     * Forbidden
     */
    403: string;
};

export type PutOrganizationWorkspacesAssignmentsError = PutOrganizationWorkspacesAssignmentsErrors[keyof PutOrganizationWorkspacesAssignmentsErrors];

export type PutOrganizationWorkspacesAssignmentsResponses = {
    /**
     * OK
     */
    200: string;
};

export type PutOrganizationWorkspacesAssignmentsResponse = PutOrganizationWorkspacesAssignmentsResponses[keyof PutOrganizationWorkspacesAssignmentsResponses];

export type GetOrganizationWorkspacesGroupsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
        /**
         * Numeric ID of the workspace within the organization
         */
        workspace_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/workspaces/{workspace_id}/groups';
};

export type GetOrganizationWorkspacesGroupsErrors = {
    /**
     * Forbidden
     */
    403: string;
    /**
     * Resource can not be found
     */
    404: string;
};

export type GetOrganizationWorkspacesGroupsError = GetOrganizationWorkspacesGroupsErrors[keyof GetOrganizationWorkspacesGroupsErrors];

export type GetOrganizationWorkspacesGroupsResponses = {
    /**
     * Successful operation
     */
    200: Array<GroupOrganizationGroupResponse>;
};

export type GetOrganizationWorkspacesGroupsResponse = GetOrganizationWorkspacesGroupsResponses[keyof GetOrganizationWorkspacesGroupsResponses];

export type GetOrganizationWorkspacesWorkspaceusersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
        /**
         * Numeric ID of the workspace within the organization
         */
        workspace_id: number;
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Number of items per page
         */
        per_page?: number;
        /**
         * Returns only users with or without a custom hourly rate respectively
         */
        custom_rates?: boolean;
    };
    url: '/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users';
};

export type GetOrganizationWorkspacesWorkspaceusersErrors = {
    /**
     * Forbidden
     */
    403: string;
    /**
     * Resource can not be found
     */
    404: string;
};

export type GetOrganizationWorkspacesWorkspaceusersError = GetOrganizationWorkspacesWorkspaceusersErrors[keyof GetOrganizationWorkspacesWorkspaceusersErrors];

export type GetOrganizationWorkspacesWorkspaceusersResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsWorkspaceUser>;
};

export type GetOrganizationWorkspacesWorkspaceusersResponse = GetOrganizationWorkspacesWorkspaceusersResponses[keyof GetOrganizationWorkspacesWorkspaceusersResponses];

export type PatchOrganizationWorkspaceUsersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the organization
         */
        organization_id: number;
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users';
};

export type PatchOrganizationWorkspaceUsersErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>JSON is not valid</li><li>At least one workspace user ID must be supplied.</li><li>Workspace user IDs must be unique"</li><li>Wrong workspace user IDs</li></ul>
     */
    400: string;
    /**
     * Forbidden
     */
    403: string;
};

export type PatchOrganizationWorkspaceUsersError = PatchOrganizationWorkspaceUsersErrors[keyof PatchOrganizationWorkspaceUsersErrors];

export type PatchOrganizationWorkspaceUsersResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PatchOrganizationWorkspaceUsersResponse = PatchOrganizationWorkspaceUsersResponses[keyof PatchOrganizationWorkspaceUsersResponses];

export type GetPermissionsByProductIdData = {
    body?: never;
    path: {
        /**
         * Product ID
         */
        product_id: number;
    };
    query?: never;
    url: '/permissions/{product_id}';
};

export type GetPermissionsByProductIdErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type GetPermissionsByProductIdError = GetPermissionsByProductIdErrors[keyof GetPermissionsByProductIdErrors];

export type GetPermissionsByProductIdResponses = {
    /**
     * List of permissions
     */
    200: Array<RolesPermission>;
};

export type GetPermissionsByProductIdResponse = GetPermissionsByProductIdResponses[keyof GetPermissionsByProductIdResponses];

export type PostReportsApiV3SharedByReportTokenData = {
    /**
     * Criteria to subgroup. This parameter only works for Summary report.
     */
    body?: string;
    path: {
        /**
         * Token for the saved report
         */
        report_token: string;
    };
    query?: never;
    url: '/reports/api/v3/shared/{report_token}';
};

export type PostReportsApiV3SharedByReportTokenErrors = {
    /**
     * Possible error messages:<ul><li>report_type does not exist in params</li><li>The report period is not supported</li/</ul>
     */
    400: string;
    /**
     * Possible error messages:<ul><li>Unable to extract authentication data</li><li>Incorrect username and/or password</li></ul>
     */
    401: string;
    /**
     * Invalid token
     */
    403: string;
    /**
     * Not found
     */
    404: string;
    /**
     * report is too big to be exported
     */
    500: string;
};

export type PostReportsApiV3SharedByReportTokenError = PostReportsApiV3SharedByReportTokenErrors[keyof PostReportsApiV3SharedByReportTokenErrors];

export type PostReportsApiV3SharedByReportTokenResponses = {
    /**
     * Returns report information
     */
    200: SavedReportOutput;
};

export type PostReportsApiV3SharedByReportTokenResponse = PostReportsApiV3SharedByReportTokenResponses[keyof PostReportsApiV3SharedByReportTokenResponses];

export type PostReportsApiV3SharedByReportTokenCsvData = {
    /**
     * End date in the format YYYY-MM-DD
     */
    body?: string;
    path: {
        /**
         * Token for the saved report
         */
        report_token: string;
    };
    query?: never;
    url: '/reports/api/v3/shared/{report_token}.csv';
};

export type PostReportsApiV3SharedByReportTokenCsvErrors = {
    /**
     * Possible error messages:<ul><li>report_type does not exist in params</li><li>The report period is not supported</li/</ul>
     */
    400: string;
    /**
     * Possible error messages:<ul><li>Unable to extract authentication data</li><li>Incorrect username and/or password</li></ul>
     */
    401: string;
    /**
     * Possible error messages:<ul><li>Invalid token</li><li>Workspace was not found or the report's owner is no longer active on it</li></ul>
     */
    403: string;
    /**
     * Not found
     */
    404: string;
    /**
     * parameter `since` is missing
     */
    500: string;
};

export type PostReportsApiV3SharedByReportTokenCsvError = PostReportsApiV3SharedByReportTokenCsvErrors[keyof PostReportsApiV3SharedByReportTokenCsvErrors];

export type PostReportsApiV3SharedByReportTokenCsvResponses = {
    /**
     * Returns report information in csv form
     */
    200: string;
};

export type PostReportsApiV3SharedByReportTokenCsvResponse = PostReportsApiV3SharedByReportTokenCsvResponses[keyof PostReportsApiV3SharedByReportTokenCsvResponses];

export type PostReportsApiV3SharedByReportTokenXlsxData = {
    /**
     * End date in the format YYYY-MM-DD
     */
    body?: string;
    path: {
        /**
         * Token for the saved report
         */
        report_token: string;
    };
    query?: never;
    url: '/reports/api/v3/shared/{report_token}.xlsx';
};

export type PostReportsApiV3SharedByReportTokenXlsxErrors = {
    /**
     * Possible error messages:<ul><li>report_type does not exist in params</li><li>The report period is not supported</li/</ul>
     */
    400: string;
    /**
     * Possible error messages:<ul><li>Unable to extract authentication data</li><li>Incorrect username and/or password</li></ul>
     */
    401: string;
    /**
     * Possible error messages:<ul><li>Invalid token</li><li>Workspace was not found or the report's owner is no longer active on it</li></ul>
     */
    403: string;
    /**
     * Not found
     */
    404: string;
    /**
     * parameter `since` is missing
     */
    500: string;
};

export type PostReportsApiV3SharedByReportTokenXlsxError = PostReportsApiV3SharedByReportTokenXlsxErrors[keyof PostReportsApiV3SharedByReportTokenXlsxErrors];

export type PostReportsApiV3SharedByReportTokenXlsxResponses = {
    /**
     * Returns report information in xlsx form
     */
    200: string;
};

export type PostReportsApiV3SharedByReportTokenXlsxResponse = PostReportsApiV3SharedByReportTokenXlsxResponses[keyof PostReportsApiV3SharedByReportTokenXlsxResponses];

export type PostReportsApiV3SharedByReportTokenPdfData = {
    /**
     * Display mode for time data, only for detailed reports. Possible values: 'date_only', 'time_only', 'date_time'. Default value: 'date_and_time'
     */
    body?: string;
    path: {
        /**
         * Token for the saved report
         */
        report_token: string;
    };
    query?: never;
    url: '/reports/api/v3/shared/{report_token}/pdf';
};

export type PostReportsApiV3SharedByReportTokenPdfErrors = {
    /**
     * Possible error messages:<ul><li>report_type does not exist in params</li><li>The report period is not supported</li/</ul>
     */
    400: Blob | File;
    /**
     * Possible error messages:<ul><li>Unable to extract authentication data</li><li>Incorrect username and/or password</li></ul>
     */
    401: Blob | File;
    /**
     * Possible error messages:<ul><li>Invalid token</li><li>Workspace was not found or the report's owner is no longer active on it</li></ul>
     */
    403: Blob | File;
    /**
     * Not found
     */
    404: Blob | File;
    /**
     * parameter `since` is missing
     */
    500: Blob | File;
};

export type PostReportsApiV3SharedByReportTokenPdfError = PostReportsApiV3SharedByReportTokenPdfErrors[keyof PostReportsApiV3SharedByReportTokenPdfErrors];

export type PostReportsApiV3SharedByReportTokenPdfResponses = {
    /**
     * Returns report information in pdf form
     */
    200: Blob | File;
};

export type PostReportsApiV3SharedByReportTokenPdfResponse = PostReportsApiV3SharedByReportTokenPdfResponses[keyof PostReportsApiV3SharedByReportTokenPdfResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdComparativeData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/comparative';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdComparativeErrors = {
    /**
     * Possible error messages:<ul><li>Date range too large for given resolution</li><li>Date should be within 2006-01-01 to 2030-01-01</li><li>Start time must be before end time</li><li>Resolution must be one of [day, week, month]</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have this feature enabled
     */
    402: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdComparativeError = PostReportsApiV3WorkspaceByWorkspaceIdComparativeErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdComparativeErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdComparativeResponses = {
    /**
     * Returns comparative report
     */
    200: ComparativeReport;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdComparativeResponse = PostReportsApiV3WorkspaceByWorkspaceIdComparativeResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdComparativeResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/data_trends/clients';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsErrors = {
    /**
     * Currency is required parameter
     */
    400: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsError = PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsResponses = {
    /**
     * Returns data trends report
     */
    200: ClientsDataTrendsReport;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsResponse = PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/data_trends/projects';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsErrors = {
    /**
     * Possible error messages:<ul><li>Currency is required parameter</li><li>Invalid date format</li><li>At least 1 id required</li><li>Maximum 5 ids allowed</li></ul>
     */
    400: string;
    /**
     * Possible error messages:<ul><li>Workspace not found/accessible"</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsError = PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsResponses = {
    /**
     * Returns data trends projects report
     */
    200: ProjectsDataTrendsReport;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsResponse = PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/data_trends/users';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersErrors = {
    /**
     * Currency is required parameter
     */
    400: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersError = PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersResponses = {
    /**
     * Returns data trends report
     */
    200: UsersDataTrendsReport;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersResponse = PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/filters/clients';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsErrors = {
    /**
     * Maximum count of posted IDs is 2000
     */
    400: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsError = PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsResponses = {
    /**
     * Returns filtered clients
     */
    200: Array<DtoClientFilterResponse>;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsResponse = PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/filters/project_groups';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Maximum count of posted IDs is {value}</li></ul>
     */
    400: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsError = PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsResponses = {
    /**
     * Returns project groups
     */
    200: Array<DtoProjectGroupResponse>;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsResponse = PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/filters/project_users';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Maximum count of posted IDs is {value}</li></ul>
     */
    400: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersError = PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersResponses = {
    /**
     * Returns project users
     */
    200: Array<DtoProjectUserResponse>;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersResponse = PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/filters/projects';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsErrors = {
    /**
     * Maximum count of posted IDs is {value}
     */
    400: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsError = PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsResponses = {
    /**
     * Returns filtered projects
     */
    200: Array<DtoProjectFilterResponse>;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsResponse = PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/filters/projects/status';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusErrors = {
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusError = PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusResponses = {
    /**
     * Returns projects statuses
     */
    200: Array<DtoProjectStatusResponse>;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusResponse = PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/filters/tasks/status';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusErrors = {
    /**
     * At least one parameter must be set
     */
    400: string;
    /**
     * Tasks are a premium feature
     */
    402: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusError = PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusResponses = {
    /**
     * Returns filtered tasks
     */
    200: Array<TasksTaskStatus>;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusResponse = PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/filters/users';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersErrors = {
    /**
     * Maximum count of posted IDs is 100
     */
    400: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersError = PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersResponses = {
    /**
     * Returns filtered users
     */
    200: Array<DtoUserFilterResponse>;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersResponse = PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/profitability/projects';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsErrors = {
    /**
     * Possible error messages:<ul><li>Wrong format date</li><li>Invalid date span</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have this feature enabled
     */
    402: string;
    /**
     * Possible error messages:<ul><li>Workspace not found/accessible</li><li>Admin permissions required</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsError = PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsResponses = {
    /**
     * Returns profitability report
     */
    200: ProjectsReport;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsResponse = PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/projects/summary';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li></ul>
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryError = PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryResponses = {
    /**
     * Returns summary user projects
     */
    200: Array<UsersProjectUsersSummaryRow>;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryResponse = PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
        /**
         * Project ID
         */
        project_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/projects/{project_id}/summary';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryErrors = {
    /**
     * Possible error messages:<ul><li>Invalid workspace id</li><li>Invalid project id</li><li>The {parameter} parameter is required</li><li>Invalid {parameter} format</li><li>{date_range} should be within 2006-01-01 to 2030-01-01</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have the {feature} feature enabled
     */
    402: string;
    /**
     * Possible error messages:<ul><li>Workspace not found/accessible</li><li>project not found or not accessible</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryError = PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryResponses = {
    /**
     * Returns project summary
     */
    200: TotalsReportData;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryResponse = PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/search/clients';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Maximum count of posted IDs is 2000</li></ul>
     */
    400: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsError = PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsResponses = {
    /**
     * Returns searched clients
     */
    200: Array<DtoClientFilterResponse>;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsResponse = PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/search/projects';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Maximum count of posted IDs is {value}</li></ul>
     */
    400: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsError = PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsResponses = {
    /**
     * Returns projects
     */
    200: Array<DtoProjectFilterResponse>;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsResponse = PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/search/time_entries';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li><li>Invalid '{parameter}' value, allowed values are: '{valid_values}'</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have this feature enabled
     */
    402: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesError = PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesResponses = {
    /**
     * Returns grouped time entries for detailed report
     */
    200: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesResponse = PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/search/time_entries.pdf';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li><li>Invalid '{parameter}' value, allowed values are: '{valid_values}'</li></ul>
     */
    400: Blob | File;
    /**
     * Workspace needs to have this feature enabled
     */
    402: Blob | File;
    /**
     * Workspace not found/accessible
     */
    403: Blob | File;
    /**
     * Internal Server Error
     */
    500: Blob | File;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfError = PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfResponses = {
    /**
     * Returns the detailed report in pdf format
     */
    200: Blob | File;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfResponse = PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
        /**
         * csv,xlsx
         */
        extension: string;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/search/time_entries.{extension}';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li><li>Invalid '{parameter}' value, allowed values are: '{valid_values}'</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have this feature enabled
     */
    402: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionError = PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionResponses = {
    /**
     * Returns the detailed report in the specified format: csv or xlsx
     */
    200: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionResponse = PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/search/time_entries/totals';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li><li>Invalid '{parameter}' value, allowed values are: '{valid_values}'</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have this feature enabled
     */
    402: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsError = PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsResponses = {
    /**
     * Returns totals values sums for detailed report
     */
    200: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsResponse = PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/search/users';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Maximum count of posted IDs is 100</li></ul>
     */
    400: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersError = PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersResponses = {
    /**
     * Returns users
     */
    200: Array<ModelUser>;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersResponse = PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/summary/time_entries';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li><li>Invalid '{parameter}' value, allowed values are: '{valid_values}'</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have this feature enabled
     */
    402: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesError = PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesResponses = {
    /**
     * Returns the summary time entries
     */
    200: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesResponse = PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/summary/time_entries.pdf';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li><li>Invalid '{parameter}' value, allowed values are: '{valid_values}'</li></ul>
     */
    400: Blob | File;
    /**
     * Workspace needs to have this feature enabled
     */
    402: Blob | File;
    /**
     * Workspace not found/accessible
     */
    403: Blob | File;
    /**
     * Internal Server Error
     */
    500: Blob | File;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfError = PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfResponses = {
    /**
     * Returns the summary report in pdf format
     */
    200: Blob | File;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfResponse = PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
        /**
         * csv,xlsx
         */
        extension: string;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/summary/time_entries.{extension}';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li><li>Invalid '{parameter}' value, allowed values are: '{valid_values}'</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have this feature enabled
     */
    402: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionError = PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionResponses = {
    /**
     * Returns the summary report on the specified format: csv or xlsx
     */
    200: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionResponse = PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/weekly/time_entries';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li><li>The '{parameter}' parameter is not supported</li><li>Invalid '{parameter}' value, allowed values are: '{valid_values}'</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have this feature enabled
     */
    402: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesError = PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesResponses = {
    /**
     * Returns the weekly report time entries
     */
    200: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesResponse = PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.csv';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li><li>The '{parameter}' parameter is not supported</li><li>Invalid '{parameter}' value, allowed values are: '{valid_values}'</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have this feature enabled
     */
    402: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvError = PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvResponses = {
    /**
     * Returns the weekly report in csv format
     */
    200: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvResponse = PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.pdf';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Invalid workspace id</li><li>The '{parameter}' parameter is not supported</li><li>Invalid '{parameter}' value, allowed values are: '{valid_values}'</li></ul>
     */
    400: Blob | File;
    /**
     * Workspace needs to have this feature enabled
     */
    402: Blob | File;
    /**
     * Workspace not found/accessible
     */
    403: Blob | File;
    /**
     * Internal Server Error
     */
    500: Blob | File;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfError = PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfResponses = {
    /**
     * Returns the weekly report in pdf format
     */
    200: Blob | File;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfResponse = PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfResponses];

export type PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
        /**
         * search,filters
         */
        action: string;
    };
    query?: never;
    url: '/reports/api/v3/workspace/{workspace_id}/{action}/tasks';
};

export type PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksErrors = {
    /**
     * Possible error messages:<ul><li>At least one parameter must be set</li><li>Maximum count of posted IDs is 2000</li></ul>
     */
    400: string;
    /**
     * Workspace not found/accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksError = PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksErrors[keyof PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksErrors];

export type PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksResponses = {
    /**
     * Returns tasks
     */
    200: Array<ModelsTask>;
};

export type PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksResponse = PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksResponses[keyof PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksResponses];

export type GetRolesByProductIdData = {
    body?: never;
    path: {
        /**
         * Product ID
         */
        product_id: number;
    };
    query?: never;
    url: '/roles/{product_id}';
};

export type GetRolesByProductIdErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type GetRolesByProductIdError = GetRolesByProductIdErrors[keyof GetRolesByProductIdErrors];

export type GetRolesByProductIdResponses = {
    /**
     * List of roles
     */
    200: Array<RolesRole>;
};

export type GetRolesByProductIdResponse = GetRolesByProductIdResponses[keyof GetRolesByProductIdResponses];

export type PostRolesByProductIdFindData = {
    /**
     * Role find data
     */
    body: RolesFindRoleParams;
    path: {
        /**
         * Product ID
         */
        product_id: number;
    };
    query?: never;
    url: '/roles/{product_id}/find';
};

export type PostRolesByProductIdFindErrors = {
    /**
     * Bad Request, Missing or Invalid Code
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Not Found, Role Does Not Exist
     */
    404: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type PostRolesByProductIdFindError = PostRolesByProductIdFindErrors[keyof PostRolesByProductIdFindErrors];

export type PostRolesByProductIdFindResponses = {
    /**
     * Found role
     */
    200: RolesRole;
};

export type PostRolesByProductIdFindResponse = PostRolesByProductIdFindResponses[keyof PostRolesByProductIdFindResponses];

export type GetRolesByProductIdByOrganizationIdData = {
    body?: never;
    path: {
        /**
         * Product ID
         */
        product_id: number;
        /**
         * Organization ID
         */
        organization_id: number;
    };
    query?: never;
    url: '/roles/{product_id}/{organization_id}';
};

export type GetRolesByProductIdByOrganizationIdErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type GetRolesByProductIdByOrganizationIdError = GetRolesByProductIdByOrganizationIdErrors[keyof GetRolesByProductIdByOrganizationIdErrors];

export type GetRolesByProductIdByOrganizationIdResponses = {
    /**
     * List of organization roles
     */
    200: Array<RolesRole>;
};

export type GetRolesByProductIdByOrganizationIdResponse = GetRolesByProductIdByOrganizationIdResponses[keyof GetRolesByProductIdByOrganizationIdResponses];

export type PostRolesByProductIdByOrganizationIdData = {
    /**
     * Role creation data
     */
    body: RolesCreateOrganizationRoleParams;
    path: {
        /**
         * Product ID
         */
        product_id: number;
        /**
         * Organization ID
         */
        organization_id: number;
    };
    query?: never;
    url: '/roles/{product_id}/{organization_id}';
};

export type PostRolesByProductIdByOrganizationIdErrors = {
    /**
     * Bad Request, Invalid Payload or Missing fields
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Conflict, Role Code Already Exists
     */
    409: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type PostRolesByProductIdByOrganizationIdError = PostRolesByProductIdByOrganizationIdErrors[keyof PostRolesByProductIdByOrganizationIdErrors];

export type PostRolesByProductIdByOrganizationIdResponses = {
    /**
     * Created role
     */
    201: RolesRole;
};

export type PostRolesByProductIdByOrganizationIdResponse = PostRolesByProductIdByOrganizationIdResponses[keyof PostRolesByProductIdByOrganizationIdResponses];

export type PostRolesByProductIdByOrganizationIdUsersData = {
    /**
     * Target users list
     */
    body: RolesGetOrganizationRolesForUsersBody;
    path: {
        /**
         * Product ID
         */
        product_id: number;
        /**
         * Organization ID
         */
        organization_id: number;
    };
    query?: never;
    url: '/roles/{product_id}/{organization_id}/users';
};

export type PostRolesByProductIdByOrganizationIdUsersErrors = {
    /**
     * Bad Request, Invalid Payload
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Conflict, Role Code Already Exists
     */
    409: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type PostRolesByProductIdByOrganizationIdUsersError = PostRolesByProductIdByOrganizationIdUsersErrors[keyof PostRolesByProductIdByOrganizationIdUsersErrors];

export type PostRolesByProductIdByOrganizationIdUsersResponses = {
    /**
     * User roles
     */
    201: Array<TypesUserRole>;
};

export type PostRolesByProductIdByOrganizationIdUsersResponse = PostRolesByProductIdByOrganizationIdUsersResponses[keyof PostRolesByProductIdByOrganizationIdUsersResponses];

export type DeleteRolesByProductIdByOrganizationIdByRoleIdData = {
    body?: never;
    path: {
        /**
         * Product ID
         */
        product_id: number;
        /**
         * Organization ID
         */
        organization_id: number;
        /**
         * Role ID
         */
        role_id: number;
    };
    query?: never;
    url: '/roles/{product_id}/{organization_id}/{role_id}';
};

export type DeleteRolesByProductIdByOrganizationIdByRoleIdErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type DeleteRolesByProductIdByOrganizationIdByRoleIdError = DeleteRolesByProductIdByOrganizationIdByRoleIdErrors[keyof DeleteRolesByProductIdByOrganizationIdByRoleIdErrors];

export type DeleteRolesByProductIdByOrganizationIdByRoleIdResponses = {
    /**
     * Success message
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteRolesByProductIdByOrganizationIdByRoleIdResponse = DeleteRolesByProductIdByOrganizationIdByRoleIdResponses[keyof DeleteRolesByProductIdByOrganizationIdByRoleIdResponses];

export type GetRolesByProductIdByOrganizationIdByRoleIdData = {
    body?: never;
    path: {
        /**
         * Product ID
         */
        product_id: number;
        /**
         * Organization ID
         */
        organization_id: number;
        /**
         * Role ID
         */
        role_id: number;
    };
    query?: never;
    url: '/roles/{product_id}/{organization_id}/{role_id}';
};

export type GetRolesByProductIdByOrganizationIdByRoleIdErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type GetRolesByProductIdByOrganizationIdByRoleIdError = GetRolesByProductIdByOrganizationIdByRoleIdErrors[keyof GetRolesByProductIdByOrganizationIdByRoleIdErrors];

export type GetRolesByProductIdByOrganizationIdByRoleIdResponses = {
    /**
     * Organization role data
     */
    200: RolesRole;
};

export type GetRolesByProductIdByOrganizationIdByRoleIdResponse = GetRolesByProductIdByOrganizationIdByRoleIdResponses[keyof GetRolesByProductIdByOrganizationIdByRoleIdResponses];

export type PutRolesByProductIdByOrganizationIdByRoleIdData = {
    /**
     * Role update data
     */
    body: RolesUpdateOrganizationRoleParams;
    path: {
        /**
         * Product ID
         */
        product_id: number;
        /**
         * Organization ID
         */
        organization_id: number;
        /**
         * Role ID
         */
        role_id: number;
    };
    query?: never;
    url: '/roles/{product_id}/{organization_id}/{role_id}';
};

export type PutRolesByProductIdByOrganizationIdByRoleIdErrors = {
    /**
     * Bad Request, Invalid Payload or Invalid Permission ID
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Conflict, Role Code Already Exists
     */
    409: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type PutRolesByProductIdByOrganizationIdByRoleIdError = PutRolesByProductIdByOrganizationIdByRoleIdErrors[keyof PutRolesByProductIdByOrganizationIdByRoleIdErrors];

export type PutRolesByProductIdByOrganizationIdByRoleIdResponses = {
    /**
     * Updated role
     */
    200: RolesRole;
};

export type PutRolesByProductIdByOrganizationIdByRoleIdResponse = PutRolesByProductIdByOrganizationIdByRoleIdResponses[keyof PutRolesByProductIdByOrganizationIdByRoleIdResponses];

export type PostRolesByProductIdByOrganizationIdByRoleIdDuplicateData = {
    /**
     * Role duplication data
     */
    body: RolesDuplicateOrganizationRoleParams;
    path: {
        /**
         * Product ID
         */
        product_id: number;
        /**
         * Organization ID
         */
        organization_id: number;
        /**
         * Role ID
         */
        role_id: number;
    };
    query?: never;
    url: '/roles/{product_id}/{organization_id}/{role_id}/duplicate';
};

export type PostRolesByProductIdByOrganizationIdByRoleIdDuplicateErrors = {
    /**
     * Bad Request, Invalid Payload
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Conflict, Role Code Already Exists
     */
    409: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type PostRolesByProductIdByOrganizationIdByRoleIdDuplicateError = PostRolesByProductIdByOrganizationIdByRoleIdDuplicateErrors[keyof PostRolesByProductIdByOrganizationIdByRoleIdDuplicateErrors];

export type PostRolesByProductIdByOrganizationIdByRoleIdDuplicateResponses = {
    /**
     * Duplicated role
     */
    201: RolesRole;
};

export type PostRolesByProductIdByOrganizationIdByRoleIdDuplicateResponse = PostRolesByProductIdByOrganizationIdByRoleIdDuplicateResponses[keyof PostRolesByProductIdByOrganizationIdByRoleIdDuplicateResponses];

export type PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersData = {
    /**
     * Object containing list of potential members to check
     */
    body: SessionCheckWorkspaceUsersPayload;
    path: {
        /**
         * Product ID
         */
        product_id: number;
        /**
         * Organization ID
         */
        organization_id: number;
        /**
         * Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/session/{product_id}/organizations/{organization_id}/workspaces/{workspace_id}/users';
};

export type PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersErrors = {
    /**
     * Bad Request, Invalid Payload
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersError = PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersErrors[keyof PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersErrors];

export type PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersResponses = {
    /**
     * Result for the members check for every requested user id
     */
    201: {
        [key: string]: boolean;
    };
};

export type PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersResponse = PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersResponses[keyof PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersResponses];

export type PostSmailContactData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/smail/contact';
};

export type PostSmailContactErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Email is required</li><li>Name is required</li><li>Message is required</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostSmailContactError = PostSmailContactErrors[keyof PostSmailContactErrors];

export type PostSmailContactResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostSmailContactResponse = PostSmailContactResponses[keyof PostSmailContactResponses];

export type PostSmailDemoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/smail/demo';
};

export type PostSmailDemoErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Email is required</li><li>Email is too long</li><li>Phone is required</li><li>Phone is too long</li><li>TeamSize is required</li><li>TeamSize is too long</li><li>Purpose is required</li><li>Purpose is too long</li><li>Source is required</li></ul><li>Source is too long</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostSmailDemoError = PostSmailDemoErrors[keyof PostSmailDemoErrors];

export type PostSmailDemoResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostSmailDemoResponse = PostSmailDemoResponses[keyof PostSmailDemoResponses];

export type PostSmailMeetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/smail/meet';
};

export type PostSmailMeetErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Email is required</li><li>Location is required</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostSmailMeetError = PostSmailMeetErrors[keyof PostSmailMeetErrors];

export type PostSmailMeetResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostSmailMeetResponse = PostSmailMeetResponses[keyof PostSmailMeetResponses];

export type GetStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/status';
};

export type GetStatusErrors = {
    /**
     * Too Many Requests
     */
    429: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetStatusError = GetStatusErrors[keyof GetStatusErrors];

export type GetStatusResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type GetStatusResponse = GetStatusResponses[keyof GetStatusResponses];

export type GetAllPlansData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/subscriptions/plans';
};

export type GetAllPlansErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetAllPlansError = GetAllPlansErrors[keyof GetAllPlansErrors];

export type GetAllPlansResponses = {
    /**
     * List of plans with features per plan.
     */
    200: Array<Array<ModelsPlanWithFeatures>>;
};

export type GetAllPlansResponse = GetAllPlansResponses[keyof GetAllPlansResponses];

export type GetSyncServerMeGoalsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * archived goals
         */
        active?: boolean;
    };
    url: '/sync-server/me/goals';
};

export type GetSyncServerMeGoalsErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetSyncServerMeGoalsError = GetSyncServerMeGoalsErrors[keyof GetSyncServerMeGoalsErrors];

export type GetSyncServerMeGoalsResponses = {
    /**
     * List of goals for a given user
     */
    200: Array<HandlergoalsApiResponse>;
};

export type GetSyncServerMeGoalsResponse = GetSyncServerMeGoalsResponses[keyof GetSyncServerMeGoalsResponses];

export type DeleteTimelineData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/timeline';
};

export type DeleteTimelineErrors = {
    /**
     * Timeline is not enabled
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteTimelineError = DeleteTimelineErrors[keyof DeleteTimelineErrors];

export type DeleteTimelineResponses = {
    /**
     * Timeline data deleted
     */
    204: unknown;
};

export type GetTimelineData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Unix timestamp of the start date
         */
        start_date?: number;
        /**
         * Unix timestamp of the end date
         */
        end_date?: number;
    };
    url: '/timeline';
};

export type GetTimelineErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Timeline is not enabled</li><li>Invalid 'start_date' value</li><li>Invalid 'end_date' value</li></ul>
     */
    400: string;
    /**
     * Internal error
     */
    500: string;
    /**
     * Timeline upload is temporarily unavailable
     */
    503: string;
};

export type GetTimelineError = GetTimelineErrors[keyof GetTimelineErrors];

export type GetTimelineResponses = {
    /**
     * OK
     */
    200: Array<ModelsTimelineEvent>;
};

export type GetTimelineResponse = GetTimelineResponses[keyof GetTimelineResponses];

export type PostTimelineData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/timeline';
};

export type PostTimelineErrors = {
    /**
     * Invalid JSON input
     */
    400: string;
    /**
     * Timeline upload is temporarily unavailable
     */
    503: string;
};

export type PostTimelineError = PostTimelineErrors[keyof PostTimelineErrors];

export type PostTimelineResponses = {
    /**
     * OK
     */
    200: ModelsTimelineSettings;
};

export type PostTimelineResponse = PostTimelineResponses[keyof PostTimelineResponses];

export type GetTimezonesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/timezones';
};

export type GetTimezonesErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetTimezonesError = GetTimezonesErrors[keyof GetTimezonesErrors];

export type GetTimezonesResponses = {
    /**
     * Successful operation.
     */
    200: Array<string>;
};

export type GetTimezonesResponse = GetTimezonesResponses[keyof GetTimezonesResponses];

export type GetOffsetsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/timezones/offsets';
};

export type GetOffsetsErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetOffsetsError = GetOffsetsErrors[keyof GetOffsetsErrors];

export type GetOffsetsResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsTimezone>;
};

export type GetOffsetsResponse = GetOffsetsResponses[keyof GetOffsetsResponses];

export type PostUserRolesByProductIdData = {
    /**
     * Role changes payload
     */
    body: UserrolesUserRoleChange;
    path: {
        /**
         * Product ID
         */
        product_id: number;
    };
    query?: never;
    url: '/user_roles/{product_id}';
};

export type PostUserRolesByProductIdErrors = {
    /**
     * Bad Request, Invalid Payload, Validation errors
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type PostUserRolesByProductIdError = PostUserRolesByProductIdErrors[keyof PostUserRolesByProductIdErrors];

export type PostUserRolesByProductIdResponses = {
    /**
     * User role change was successful
     */
    200: string;
};

export type PostUserRolesByProductIdResponse = PostUserRolesByProductIdResponses[keyof PostUserRolesByProductIdResponses];

export type SearchUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users';
};

export type SearchUserErrors = {
    /**
     * No search term
     */
    400: unknown;
};

export type SearchUserResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsTogglUserSimple>;
};

export type SearchUserResponse = SearchUserResponses[keyof SearchUserResponses];

export type PostUsersByProductIdRolesData = {
    /**
     * New entity roles list
     */
    body: Array<UsersEntityRole>;
    path: {
        /**
         * Product ID
         */
        product_id: number;
    };
    query?: never;
    url: '/users/{product_id}/roles';
};

export type PostUsersByProductIdRolesErrors = {
    /**
     * Bad Request, Invalid Payload
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type PostUsersByProductIdRolesError = PostUsersByProductIdRolesErrors[keyof PostUsersByProductIdRolesErrors];

export type PostUsersByProductIdRolesResponses = {
    /**
     * User roles
     */
    201: Array<TypesUserRole>;
};

export type PostUsersByProductIdRolesResponse = PostUsersByProductIdRolesResponses[keyof PostUsersByProductIdRolesResponses];

export type PostUsersByProductIdByOrganizationIdRolesData = {
    /**
     * Target users list
     */
    body: UsersGetOrganizationUsersForRolesBody;
    path: {
        /**
         * Product ID
         */
        product_id: number;
        /**
         * Organization ID
         */
        organization_id: number;
    };
    query?: never;
    url: '/users/{product_id}/{organization_id}/roles';
};

export type PostUsersByProductIdByOrganizationIdRolesErrors = {
    /**
     * Bad Request, Invalid Payload
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Conflict, Role Code Already Exists
     */
    409: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type PostUsersByProductIdByOrganizationIdRolesError = PostUsersByProductIdByOrganizationIdRolesErrors[keyof PostUsersByProductIdByOrganizationIdRolesErrors];

export type PostUsersByProductIdByOrganizationIdRolesResponses = {
    /**
     * User roles
     */
    201: Array<TypesUserRole>;
};

export type PostUsersByProductIdByOrganizationIdRolesResponse = PostUsersByProductIdByOrganizationIdRolesResponses[keyof PostUsersByProductIdByOrganizationIdRolesResponses];

export type GetUserData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the user
         */
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type GetUserErrors = {
    /**
     * User cannot be found
     */
    404: unknown;
};

export type GetUserResponses = {
    /**
     * Successful operation
     */
    200: ModelsTogglUser;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UserDeleteTimelineDataData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the user
         */
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}/delete_timeline_data';
};

export type UserDeleteTimelineDataErrors = {
    /**
     * invalid 'user_id' passed in URL
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type UserDeleteTimelineDataResponses = {
    /**
     * Successfully deleted user timeline data
     */
    200: string;
};

export type UserDeleteTimelineDataResponse = UserDeleteTimelineDataResponses[keyof UserDeleteTimelineDataResponses];

export type GetUserServiceNotificationsData = {
    body?: never;
    path: {
        /**
         * User ID to query notifications for
         */
        user_id: number;
    };
    query?: {
        /**
         * To filter for a specific product, will default to 1, Track, if not given
         */
        product_id?: number;
        /**
         * Filter based a given starting date timestamp
         */
        from?: string;
        /**
         * Filter based on a given ending date timestamp
         */
        to?: string;
        /**
         * Filter based on a notifications status as read or not
         */
        read?: boolean;
        /**
         * Filter based on a notifications status as dismissed or not
         */
        dismissed?: boolean;
        /**
         * Filter based on if a notification has expired or not
         */
        expired?: boolean;
        /**
         * Page number for pagination
         */
        page?: number;
        /**
         * Rows to include in the query
         */
        rows?: number;
        /**
         * Returns rows sorted by the specified column and direction. Direction defaults to asc if not specified.
         */
        order_by?: string;
    };
    url: '/users/{user_id}/notifications';
};

export type GetUserServiceNotificationsErrors = {
    /**
     * When required params aren't present or invalid field is given
     */
    400: unknown;
    /**
     * oh no :(
     */
    500: unknown;
};

export type GetUserServiceNotificationsResponses = {
    /**
     * Successful operation
     */
    200: NotificationsRespDoc & {
        notifications?: Array<ServiceNotification>;
    };
};

export type GetUserServiceNotificationsResponse = GetUserServiceNotificationsResponses[keyof GetUserServiceNotificationsResponses];

export type UserUpdatePreferencesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the user
         */
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}/preferences';
};

export type UserUpdatePreferencesErrors = {
    /**
     * <p>Possible messages:</p><ul><li>invalid 'invalid 'user_id' passed in URL</li><li>Missing data</li><li>Invalid JSON payload</li><li>Value in timeofday_format is invalid:</li><li>Cannot set value for ToSAcceptNeeded</li><li>value for field cannot be null</li><li>invalid value for field</li></ul>
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type UserUpdatePreferencesResponses = {
    /**
     * Successfully updated user preferences
     */
    200: string;
};

export type UserUpdatePreferencesResponse = UserUpdatePreferencesResponses[keyof UserUpdatePreferencesResponses];

export type UserRestoreData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the user
         */
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}/restore';
};

export type UserRestoreErrors = {
    /**
     * <p>Possible messages:</p><ul><li>invalid 'invalid 'user_id' passed in URL</li><li>Restore not possible due to restrictions</li></ul>
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type UserRestoreResponses = {
    /**
     * Successfully restored
     */
    200: string;
};

export type UserRestoreResponse = UserRestoreResponses[keyof UserRestoreResponses];

export type GetUsersTimeEntriesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the user
         */
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}/time_entries';
};

export type GetUsersTimeEntriesErrors = {
    /**
     * User not found
     */
    404: unknown;
};

export type GetUsersTimeEntriesResponses = {
    /**
     * Successful operation
     */
    200: ModelsTimeEntrySearchResult;
};

export type GetUsersTimeEntriesResponse = GetUsersTimeEntriesResponses[keyof GetUsersTimeEntriesResponses];

export type WorkspaceUserRestoreData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the user
         */
        user_id: number;
        /**
         * Numeric ID of the workspace_user
         */
        workspace_user_id: number;
    };
    query?: never;
    url: '/users/{user_id}/workspace_user/{workspace_user_id}/restore';
};

export type WorkspaceUserRestoreErrors = {
    /**
     * invalid '<p>Possible error messages:</p><ul><li>invalid 'workspace_id' passed in URL</li><li>invalid JSON body</li><li>User cannot be restored"</li></ul>
     */
    400: unknown;
};

export type WorkspaceUserRestoreResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type WorkspaceUserRestoreResponse = WorkspaceUserRestoreResponses[keyof WorkspaceUserRestoreResponses];

export type GenerateAggregationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/warehouse/aggregations/generate';
};

export type GenerateAggregationsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Invalid aggregation type.</li><li>request body can't be empty</li><li>unsupported aggregation type</li></ul>
     */
    400: string;
    /**
     * Server Error
     */
    500: string;
};

export type GenerateAggregationsError = GenerateAggregationsErrors[keyof GenerateAggregationsErrors];

export type GenerateAggregationsResponses = {
    /**
     * Aggregation generation process started.
     */
    204: string;
};

export type GenerateAggregationsResponse = GenerateAggregationsResponses[keyof GenerateAggregationsResponses];

export type SearchWorkspaceData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces';
};

export type SearchWorkspaceErrors = {
    /**
     * No search term
     */
    400: unknown;
};

export type SearchWorkspaceResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsWorkspaceSimple>;
};

export type SearchWorkspaceResponse = SearchWorkspaceResponses[keyof SearchWorkspaceResponses];

export type GetPublicSubscriptionPlansData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces/plans';
};

export type GetPublicSubscriptionPlansErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetPublicSubscriptionPlansError = GetPublicSubscriptionPlansErrors[keyof GetPublicSubscriptionPlansErrors];

export type GetPublicSubscriptionPlansResponses = {
    /**
     * Successful operation.
     */
    200: Array<BillingFancyPlan>;
};

export type GetPublicSubscriptionPlansResponse = GetPublicSubscriptionPlansResponses[keyof GetPublicSubscriptionPlansResponses];

export type GetWorkspaceData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}';
};

export type GetWorkspaceErrors = {
    /**
     * Workspace not found
     */
    404: unknown;
};

export type GetWorkspaceResponses = {
    /**
     * Successful operation
     */
    200: WorkspaceWorkspace;
};

export type GetWorkspaceResponse = GetWorkspaceResponses[keyof GetWorkspaceResponses];

export type PutWorkspacesData = {
    body?: never;
    path: {
        /**
         * Numeric Workspace ID
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}';
};

export type PutWorkspacesErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspacesError = PutWorkspacesErrors[keyof PutWorkspacesErrors];

export type PutWorkspacesResponses = {
    /**
     * Successful operation.
     */
    200: ModelsWorkspace;
};

export type PutWorkspacesResponse = PutWorkspacesResponses[keyof PutWorkspacesResponses];

export type WorkspaceAddCommentData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/add_comment';
};

export type WorkspaceAddCommentResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type WorkspaceAddCommentResponse = WorkspaceAddCommentResponses[keyof WorkspaceAddCommentResponses];

export type GetAlertsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces/{workspace_id}/alerts';
};

export type GetAlertsErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetAlertsError = GetAlertsErrors[keyof GetAlertsErrors];

export type GetAlertsResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsAlertWithMeta>;
};

export type GetAlertsResponse = GetAlertsResponses[keyof GetAlertsResponses];

export type PostAlertsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces/{workspace_id}/alerts';
};

export type PostAlertsErrors = {
    /**
     * Possible errors:<ul><li>invalid workspace ID</li><li>source kind can't be blank</li><li>project can't be blank</li><li>project not supported for this source kind</li><li>threshold type can't be blank</li><li>thresholds can't be blank</li><li>receivers can't be blank</li><li>alert type out of range</li><li>receiver type out of range</li><li>threshold out of range</li><li>source kind out of range</li><li>threshold type out of range</li><li>receiver role out of range</li></ul>
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostAlertsError = PostAlertsErrors[keyof PostAlertsErrors];

export type PostAlertsResponses = {
    /**
     * Successful operation.
     */
    200: ModelsAlertWithMeta;
};

export type PostAlertsResponse = PostAlertsResponses[keyof PostAlertsResponses];

export type WorkspaceGetAlertLogData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/alerts/errors';
};

export type WorkspaceGetAlertLogResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type WorkspaceGetAlertLogResponse = WorkspaceGetAlertLogResponses[keyof WorkspaceGetAlertLogResponses];

export type DeleteAlertsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces/{workspace_id}/alerts/{alert_id}';
};

export type DeleteAlertsErrors = {
    /**
     * Possible errors:<ul><li>invalid 'alert_id' passed in URL</li></ul>
     */
    400: string;
    /**
     * Alert not found or not accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteAlertsError = DeleteAlertsErrors[keyof DeleteAlertsErrors];

export type DeleteAlertsResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type DeleteAlertsResponse = DeleteAlertsResponses[keyof DeleteAlertsResponses];

export type PutAlertsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces/{workspace_id}/alerts/{alert_id}';
};

export type PutAlertsErrors = {
    /**
     * Possible errors:<ul><li>invalid workspace ID</li><li>source kind can't be blank</li><li>project can't be blank</li><li>project not supported for this source kind</li><li>threshold type can't be blank</li><li>thresholds can't be blank</li><li>receivers can't be blank</li><li>alert type out of range</li><li>receiver type out of range</li><li>threshold out of range</li><li>source kind out of range</li><li>threshold type out of range</li><li>receiver role out of range</li></ul>
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutAlertsError = PutAlertsErrors[keyof PutAlertsErrors];

export type PutAlertsResponses = {
    /**
     * Successful operation.
     */
    200: ModelsAlertWithMeta;
};

export type PutAlertsResponse = PutAlertsResponses[keyof PutAlertsResponses];

export type WorkspaceDeleteAlertLogData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the alert
         */
        alert_id: number;
        /**
         * Numeric ID of the alert log
         */
        log_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/alerts/{alert_id}/logs/{log_id}';
};

export type WorkspaceDeleteAlertLogResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type WorkspaceDeleteAlertLogResponse = WorkspaceDeleteAlertLogResponses[keyof WorkspaceDeleteAlertLogResponses];

export type GetWorkspaceClientsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: {
        /**
         * Use 'active' to only list active clients, 'archived' to only list archived clients and 'both' to retrieve active and archived clients. If not provided, only active clients are returned.
         */
        status?: string;
        /**
         * If provided, allows to filter by client name in a case insensitive manner, returning all the ones that contain the given string.
         */
        name?: string;
    };
    url: '/workspaces/{workspace_id}/clients';
};

export type GetWorkspaceClientsErrors = {
    /**
     * Client status is invalid
     */
    400: string;
    /**
     * Forbidden
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceClientsError = GetWorkspaceClientsErrors[keyof GetWorkspaceClientsErrors];

export type GetWorkspaceClientsResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsClient>;
};

export type GetWorkspaceClientsResponse = GetWorkspaceClientsResponses[keyof GetWorkspaceClientsResponses];

export type PostWorkspaceClientsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/clients';
};

export type PostWorkspaceClientsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Client name maximum length is {max_client_length}</li><li>Client name cannot be empty</li></ul>
     */
    400: unknown;
    /**
     * Forbidden
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceClientsError = PostWorkspaceClientsErrors[keyof PostWorkspaceClientsErrors];

export type PostWorkspaceClientsResponses = {
    /**
     * Successful operation.
     */
    200: ModelsClient;
};

export type PostWorkspaceClientsResponse = PostWorkspaceClientsResponses[keyof PostWorkspaceClientsResponses];

export type ArchiveClientsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/clients/archive';
};

export type ArchiveClientsErrors = {
    /**
     * Forbidden
     */
    403: string;
    /**
     * No client with ID {client_id} was found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type ArchiveClientsError = ArchiveClientsErrors[keyof ArchiveClientsErrors];

export type ArchiveClientsResponses = {
    /**
     * Client and project IDs that were archived
     */
    200: Array<ClientsArchiveClientsResponse>;
};

export type ArchiveClientsResponse = ArchiveClientsResponses[keyof ArchiveClientsResponses];

export type GetWorkspaceClientsDataData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/clients/data';
};

export type GetWorkspaceClientsDataErrors = {
    400: unknown;
};

export type GetWorkspaceClientsDataResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsClient>;
};

export type GetWorkspaceClientsDataResponse = GetWorkspaceClientsDataResponses[keyof GetWorkspaceClientsDataResponses];

export type DeleteWorkspaceClientsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/clients/delete';
};

export type DeleteWorkspaceClientsErrors = {
    /**
     * Forbidden
     */
    403: string;
    /**
     * No client with ID {client_id} was found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceClientsError = DeleteWorkspaceClientsErrors[keyof DeleteWorkspaceClientsErrors];

export type DeleteWorkspaceClientsResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type DeleteWorkspaceClientsResponse = DeleteWorkspaceClientsResponses[keyof DeleteWorkspaceClientsResponses];

export type DeleteWorkspaceClientData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the client
         */
        client_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/clients/{client_id}';
};

export type DeleteWorkspaceClientErrors = {
    /**
     * Forbidden
     */
    403: string;
    /**
     * No client with ID {client_id} was found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceClientError = DeleteWorkspaceClientErrors[keyof DeleteWorkspaceClientErrors];

export type DeleteWorkspaceClientResponses = {
    /**
     * Successful operation.
     */
    200: number;
};

export type DeleteWorkspaceClientResponse = DeleteWorkspaceClientResponses[keyof DeleteWorkspaceClientResponses];

export type GetWorkspaceClientData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the client
         */
        client_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/clients/{client_id}';
};

export type GetWorkspaceClientErrors = {
    /**
     * Forbidden
     */
    403: string;
    /**
     * No client with ID {client_id} was found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceClientError = GetWorkspaceClientErrors[keyof GetWorkspaceClientErrors];

export type GetWorkspaceClientResponses = {
    /**
     * Successful operation.
     */
    200: ModelsClient;
};

export type GetWorkspaceClientResponse = GetWorkspaceClientResponses[keyof GetWorkspaceClientResponses];

export type PutWorkspaceClientsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the client
         */
        client_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/clients/{client_id}';
};

export type PutWorkspaceClientsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Client name maximum length is {max_client_length}</li><li>Client name cannot be empty</li></ul>
     */
    400: unknown;
    /**
     * Forbidden
     */
    403: string;
    /**
     * Client doesn't exist in the workspace.
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspaceClientsError = PutWorkspaceClientsErrors[keyof PutWorkspaceClientsErrors];

export type PutWorkspaceClientsResponses = {
    /**
     * Successful operation.
     */
    200: ModelsClient;
};

export type PutWorkspaceClientsResponse = PutWorkspaceClientsResponses[keyof PutWorkspaceClientsResponses];

export type ArchiveClientData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the client
         */
        client_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/clients/{client_id}/archive';
};

export type ArchiveClientErrors = {
    /**
     * Forbidden
     */
    403: string;
    /**
     * No client with ID {client_id} was found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type ArchiveClientError = ArchiveClientErrors[keyof ArchiveClientErrors];

export type ArchiveClientResponses = {
    /**
     * Projects that were archived with the client
     */
    200: Array<number>;
};

export type ArchiveClientResponse = ArchiveClientResponses[keyof ArchiveClientResponses];

export type RestoreClientData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the client
         */
        client_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/clients/{client_id}/restore';
};

export type RestoreClientErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Forbidden
     */
    403: string;
    /**
     * No client with ID {client_id} was found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type RestoreClientError = RestoreClientErrors[keyof RestoreClientErrors];

export type RestoreClientResponses = {
    /**
     * Returns the restored client
     */
    200: ModelsClient;
};

export type RestoreClientResponse = RestoreClientResponses[keyof RestoreClientResponses];

export type GetWorkspaceCurrenciesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/currencies';
};

export type GetWorkspaceCurrenciesErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceCurrenciesError = GetWorkspaceCurrenciesErrors[keyof GetWorkspaceCurrenciesErrors];

export type GetWorkspaceCurrenciesResponses = {
    /**
     * Successful operation.
     */
    200: Array<string>;
};

export type GetWorkspaceCurrenciesResponse = GetWorkspaceCurrenciesResponses[keyof GetWorkspaceCurrenciesResponses];

export type GetWorkspaceAllActivitiesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/dashboard/all_activity';
};

export type GetWorkspaceAllActivitiesErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceAllActivitiesError = GetWorkspaceAllActivitiesErrors[keyof GetWorkspaceAllActivitiesErrors];

export type GetWorkspaceAllActivitiesResponses = {
    /**
     * Successful operation
     */
    200: Array<DashboardAllActivities>;
};

export type GetWorkspaceAllActivitiesResponse = GetWorkspaceAllActivitiesResponses[keyof GetWorkspaceAllActivitiesResponses];

export type GetWorkspaceMostActiveData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/dashboard/most_active';
};

export type GetWorkspaceMostActiveErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceMostActiveError = GetWorkspaceMostActiveErrors[keyof GetWorkspaceMostActiveErrors];

export type GetWorkspaceMostActiveResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsMostActiveUser>;
};

export type GetWorkspaceMostActiveResponse = GetWorkspaceMostActiveResponses[keyof GetWorkspaceMostActiveResponses];

export type GetWorkspaceTopActivityData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/dashboard/top_activity';
};

export type GetWorkspaceTopActivityErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceTopActivityError = GetWorkspaceTopActivityErrors[keyof GetWorkspaceTopActivityErrors];

export type GetWorkspaceTopActivityResponses = {
    /**
     * Successful operation
     */
    200: Array<DashboardAllActivities>;
};

export type GetWorkspaceTopActivityResponse = GetWorkspaceTopActivityResponses[keyof GetWorkspaceTopActivityResponses];

export type GetWorkspaceExportsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/exports';
};

export type GetWorkspaceExportsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceExportsError = GetWorkspaceExportsErrors[keyof GetWorkspaceExportsErrors];

export type GetWorkspaceExportsResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsDownloadRequestRecord>;
};

export type GetWorkspaceExportsResponse = GetWorkspaceExportsResponses[keyof GetWorkspaceExportsResponses];

export type PostWorkspaceExportsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/exports';
};

export type PostWorkspaceExportsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Cannot start another export until current one is complete</li><li>You must select at least one object to export</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceExportsError = PostWorkspaceExportsErrors[keyof PostWorkspaceExportsErrors];

export type PostWorkspaceExportsResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostWorkspaceExportsResponse = PostWorkspaceExportsResponses[keyof PostWorkspaceExportsResponses];

export type GetWorkspaceExportsDataUuidZipData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/exports/data/{uuid}.zip';
};

export type GetWorkspaceExportsDataUuidZipErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Workspace export data cannot be found or is expired</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceExportsDataUuidZipError = GetWorkspaceExportsDataUuidZipErrors[keyof GetWorkspaceExportsDataUuidZipErrors];

export type GetWorkspaceExportsDataUuidZipResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type GetWorkspaceExportsDataUuidZipResponse = GetWorkspaceExportsDataUuidZipResponses[keyof GetWorkspaceExportsDataUuidZipResponses];

export type GetWorkspaceFavoritesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces/{workspace_id}/favorites';
};

export type GetWorkspaceFavoritesErrors = {
    /**
     * User has no access to Favorites feature
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceFavoritesError = GetWorkspaceFavoritesErrors[keyof GetWorkspaceFavoritesErrors];

export type GetWorkspaceFavoritesResponses = {
    /**
     * List of favorites for a given user
     */
    200: Array<ModelsFavorite>;
};

export type GetWorkspaceFavoritesResponse = GetWorkspaceFavoritesResponses[keyof GetWorkspaceFavoritesResponses];

export type CreateWorkspaceFavoriteData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Should the response contain data for meta entities
         */
        meta?: boolean;
    };
    url: '/workspaces/{workspace_id}/favorites';
};

export type CreateWorkspaceFavoriteErrors = {
    /**
     * Possible error messages:<ul><li>the parameter '{parameter}' is invalid</li><li>we could not parse the provided parameters</li><li>user %d has no access to Favorites feature</li><li>favorite attributes are not valid: {attributes}</li><li>favorite constraints were not met: {constraints}</li></ul>
     */
    400: string;
    /**
     * Possible error messages:<ul><li>user {user_id} has no access to Favorites feature</li><li>user {user_id} has no access to all resources: {resources}</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type CreateWorkspaceFavoriteError = CreateWorkspaceFavoriteErrors[keyof CreateWorkspaceFavoriteErrors];

export type CreateWorkspaceFavoriteResponses = {
    /**
     * Created favorite with its ID
     */
    200: ModelsFavorite;
};

export type CreateWorkspaceFavoriteResponse = CreateWorkspaceFavoriteResponses[keyof CreateWorkspaceFavoriteResponses];

export type UpdateWorkspaceFavoritesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Should the response contain data for meta entities
         */
        meta?: boolean;
    };
    url: '/workspaces/{workspace_id}/favorites';
};

export type UpdateWorkspaceFavoritesErrors = {
    /**
     * Possible error messages:<ul><li>the parameter '{parameter}' is invalid</li><li>we could not parse the provided parameters</li><li>user %d has no access to Favorites feature</li><li>favorite attributes are not valid: {attributes}</li><li>favorite constraints were not met: {constraints}</li></ul>
     */
    400: string;
    /**
     * Possible error messages:<ul><li>user {user_id} has no access to Favorites feature</li><li>user {user_id} has no access to all resources: {resources}</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type UpdateWorkspaceFavoritesError = UpdateWorkspaceFavoritesErrors[keyof UpdateWorkspaceFavoritesErrors];

export type UpdateWorkspaceFavoritesResponses = {
    /**
     * Updated favorite
     */
    200: ModelsFavorite;
};

export type UpdateWorkspaceFavoritesResponse = UpdateWorkspaceFavoritesResponses[keyof UpdateWorkspaceFavoritesResponses];

export type PostWorkspaceFavoritesSuggestionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces/{workspace_id}/favorites/suggestions';
};

export type PostWorkspaceFavoritesSuggestionsErrors = {
    /**
     * User {user_id} has no access to Favorites feature
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceFavoritesSuggestionsError = PostWorkspaceFavoritesSuggestionsErrors[keyof PostWorkspaceFavoritesSuggestionsErrors];

export type PostWorkspaceFavoritesSuggestionsResponses = {
    /**
     * List of suggested favorites
     */
    201: Array<ModelsFavorite>;
    /**
     * No suggested favorites
     */
    204: string;
};

export type PostWorkspaceFavoritesSuggestionsResponse = PostWorkspaceFavoritesSuggestionsResponses[keyof PostWorkspaceFavoritesSuggestionsResponses];

export type DeleteWorkspaceFavoriteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces/{workspace_id}/favorites/{favorite_id}';
};

export type DeleteWorkspaceFavoriteErrors = {
    /**
     * {favorite_id} given favorite ID is invalid
     */
    400: string;
    /**
     * Possible error messages:<ul><li>user {user_id} has no access to Favorites feature</li><li>user {user_id} is not the owner of favorite ID {favorite_id}</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceFavoriteError = DeleteWorkspaceFavoriteErrors[keyof DeleteWorkspaceFavoriteErrors];

export type DeleteWorkspaceFavoriteResponses = {
    /**
     * Favorite deleted
     */
    204: unknown;
};

export type GetWorkspacesByWorkspaceIdGoalsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * team goals
         */
        team_goals?: boolean;
        /**
         * archived goals
         */
        active?: boolean;
        /**
         * Page number, default 1.
         */
        page?: number;
        /**
         * Number of items per page, default 20. Also defaults to 100 if provided a value greater than 100.
         */
        per_page?: number;
    };
    url: '/workspaces/{workspace_id}/goals';
};

export type GetWorkspacesByWorkspaceIdGoalsErrors = {
    /**
     * User has no access to team goals feature
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspacesByWorkspaceIdGoalsError = GetWorkspacesByWorkspaceIdGoalsErrors[keyof GetWorkspacesByWorkspaceIdGoalsErrors];

export type GetWorkspacesByWorkspaceIdGoalsResponses = {
    /**
     * List of goals for a given user
     */
    200: Array<HandlergoalsApiResponse>;
};

export type GetWorkspacesByWorkspaceIdGoalsResponse = GetWorkspacesByWorkspaceIdGoalsResponses[keyof GetWorkspacesByWorkspaceIdGoalsResponses];

export type PostWorkspacesByWorkspaceIdGoalsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces/{workspace_id}/goals';
};

export type PostWorkspacesByWorkspaceIdGoalsErrors = {
    /**
     * Some required parameter was not filled, have invalid format or goals limit was reached
     */
    400: string;
    /**
     * User doesn't belong to given workspace, project or task. It also fails if project or task don't belong to workspace
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspacesByWorkspaceIdGoalsError = PostWorkspacesByWorkspaceIdGoalsErrors[keyof PostWorkspacesByWorkspaceIdGoalsErrors];

export type PostWorkspacesByWorkspaceIdGoalsResponses = {
    /**
     * Created Goal
     */
    200: ModelsGoal;
};

export type PostWorkspacesByWorkspaceIdGoalsResponse = PostWorkspacesByWorkspaceIdGoalsResponses[keyof PostWorkspacesByWorkspaceIdGoalsResponses];

export type DeleteWorkspacesByWorkspaceIdGoalsByGoalIdData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
        /**
         * Goal ID
         */
        goal_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/goals/{goal_id}';
};

export type DeleteWorkspacesByWorkspaceIdGoalsByGoalIdErrors = {
    /**
     * Goal already deleted or was not created by this user
     */
    400: string;
    /**
     * User doesn't belong to given workspace, project or task. It also fails if project or task don't belong to workspace
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspacesByWorkspaceIdGoalsByGoalIdError = DeleteWorkspacesByWorkspaceIdGoalsByGoalIdErrors[keyof DeleteWorkspacesByWorkspaceIdGoalsByGoalIdErrors];

export type DeleteWorkspacesByWorkspaceIdGoalsByGoalIdResponses = {
    /**
     * Goal deleted
     */
    204: unknown;
};

export type GetWorkspacesByWorkspaceIdGoalsByGoalIdData = {
    body?: never;
    path: {
        /**
         * Workspace ID
         */
        workspace_id: number;
        /**
         * Goal ID
         */
        goal_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/goals/{goal_id}';
};

export type GetWorkspacesByWorkspaceIdGoalsByGoalIdErrors = {
    /**
     * goal not found for this user
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspacesByWorkspaceIdGoalsByGoalIdError = GetWorkspacesByWorkspaceIdGoalsByGoalIdErrors[keyof GetWorkspacesByWorkspaceIdGoalsByGoalIdErrors];

export type GetWorkspacesByWorkspaceIdGoalsByGoalIdResponses = {
    /**
     * the asked goal
     */
    200: HandlergoalsApiResponse;
};

export type GetWorkspacesByWorkspaceIdGoalsByGoalIdResponse = GetWorkspacesByWorkspaceIdGoalsByGoalIdResponses[keyof GetWorkspacesByWorkspaceIdGoalsByGoalIdResponses];

export type PutWorkspacesByWorkspaceIdGoalsByGoalIdData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces/{workspace_id}/goals/{goal_id}';
};

export type PutWorkspacesByWorkspaceIdGoalsByGoalIdErrors = {
    /**
     * Goal not found or not accessible by the user
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspacesByWorkspaceIdGoalsByGoalIdError = PutWorkspacesByWorkspaceIdGoalsByGoalIdErrors[keyof PutWorkspacesByWorkspaceIdGoalsByGoalIdErrors];

export type PutWorkspacesByWorkspaceIdGoalsByGoalIdResponses = {
    /**
     * Updated Goal with the changed field
     */
    200: ModelsGoal;
};

export type PutWorkspacesByWorkspaceIdGoalsByGoalIdResponse = PutWorkspacesByWorkspaceIdGoalsByGoalIdResponses[keyof PutWorkspacesByWorkspaceIdGoalsByGoalIdResponses];

export type GetWorkspaceGroupsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/groups';
};

export type GetWorkspaceGroupsErrors = {
    /**
     * User does not have access to this resource
     */
    403: string;
};

export type GetWorkspaceGroupsError = GetWorkspaceGroupsErrors[keyof GetWorkspaceGroupsErrors];

export type GetWorkspaceGroupsResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsGroup>;
};

export type GetWorkspaceGroupsResponse = GetWorkspaceGroupsResponses[keyof GetWorkspaceGroupsResponses];

export type PostWorkspaceGroupData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/groups';
};

export type PostWorkspaceGroupErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Group name must be present</li><li>Group name too long, maximum length is 200</li><li>Name has already been taken</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource
     */
    403: string;
};

export type PostWorkspaceGroupError = PostWorkspaceGroupErrors[keyof PostWorkspaceGroupErrors];

export type PostWorkspaceGroupResponses = {
    /**
     * Returns the created group data.
     */
    200: ModelsGroup;
};

export type PostWorkspaceGroupResponse = PostWorkspaceGroupResponses[keyof PostWorkspaceGroupResponses];

export type DeleteWorkspaceGroupData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
        /**
         * Numeric ID of the group.
         */
        group_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/groups/{group_id}';
};

export type DeleteWorkspaceGroupErrors = {
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Group was not found
     */
    404: string;
};

export type DeleteWorkspaceGroupError = DeleteWorkspaceGroupErrors[keyof DeleteWorkspaceGroupErrors];

export type DeleteWorkspaceGroupResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutWorkspaceGroupData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
        /**
         * Numeric ID of the group.
         */
        group_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/groups/{group_id}';
};

export type PutWorkspaceGroupErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Group name must be present</li><li>Group name too long, maximum length is 200</li><li>Name has already been taken</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Group was not found
     */
    404: string;
};

export type PutWorkspaceGroupError = PutWorkspaceGroupErrors[keyof PutWorkspaceGroupErrors];

export type PutWorkspaceGroupResponses = {
    /**
     * Returns the created updated data.
     */
    200: ModelsGroup;
};

export type PutWorkspaceGroupResponse = PutWorkspaceGroupResponses[keyof PutWorkspaceGroupResponses];

export type PostWorkspaceIcalResetData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/ical/reset';
};

export type PostWorkspaceIcalResetErrors = {
    /**
     * Workspace not found
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceIcalResetError = PostWorkspaceIcalResetErrors[keyof PostWorkspaceIcalResetErrors];

export type PostWorkspaceIcalResetResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostWorkspaceIcalResetResponse = PostWorkspaceIcalResetResponses[keyof PostWorkspaceIcalResetResponses];

export type PostWorkspaceIcalToggleData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/ical/toggle';
};

export type PostWorkspaceIcalToggleErrors = {
    /**
     * Workspace not found
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceIcalToggleError = PostWorkspaceIcalToggleErrors[keyof PostWorkspaceIcalToggleErrors];

export type PostWorkspaceIcalToggleResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostWorkspaceIcalToggleResponse = PostWorkspaceIcalToggleResponses[keyof PostWorkspaceIcalToggleResponses];

export type GetWorkspaceInvoicesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces/{workspace_id}/invoices';
};

export type GetWorkspaceInvoicesErrors = {
    /**
     * Operation Forbidden
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceInvoicesError = GetWorkspaceInvoicesErrors[keyof GetWorkspaceInvoicesErrors];

export type GetWorkspaceInvoicesResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsUserInvoice>;
};

export type GetWorkspaceInvoicesResponse = GetWorkspaceInvoicesResponses[keyof GetWorkspaceInvoicesResponses];

export type PostWorkspaceUserInvoiceData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/invoices';
};

export type PostWorkspaceUserInvoiceErrors = {
    /**
     * Possible errors:<ul><li>Invalid JSON input</li></ul>
     */
    400: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceUserInvoiceError = PostWorkspaceUserInvoiceErrors[keyof PostWorkspaceUserInvoiceErrors];

export type PostWorkspaceUserInvoiceResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsUserInvoice>;
};

export type PostWorkspaceUserInvoiceResponse = PostWorkspaceUserInvoiceResponses[keyof PostWorkspaceUserInvoiceResponses];

export type GetWorkspaceInvoiceData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
        /**
         * Numeric ID of the invoice.
         */
        invoice_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/invoices/{invoice_id}.pdf';
};

export type GetWorkspaceInvoiceErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Admin permissions required</li><li>Not authorized to access invoice {invoice_id}</li></ul>
     */
    403: Blob | File;
    /**
     * No invoice found
     */
    404: Blob | File;
    /**
     * Internal Server Error
     */
    500: Blob | File;
};

export type GetWorkspaceInvoiceError = GetWorkspaceInvoiceErrors[keyof GetWorkspaceInvoiceErrors];

export type GetWorkspaceInvoiceResponses = {
    /**
     * Invoice document in PDF form.
     */
    200: Blob | File;
};

export type GetWorkspaceInvoiceResponse = GetWorkspaceInvoiceResponses[keyof GetWorkspaceInvoiceResponses];

export type DeleteWorkspaceInvoiceData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * User invoice ID to be deleted
         */
        user_invoice_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/invoices/{user_invoice_id}';
};

export type DeleteWorkspaceInvoiceErrors = {
    /**
     * Invoice not found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceInvoiceError = DeleteWorkspaceInvoiceErrors[keyof DeleteWorkspaceInvoiceErrors];

export type DeleteWorkspaceInvoiceResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type DeleteWorkspaceInvoiceResponse = DeleteWorkspaceInvoiceResponses[keyof DeleteWorkspaceInvoiceResponses];

export type GetWorkspaceSsoData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/linked_sso_profiles';
};

export type GetWorkspaceSsoErrors = {
    /**
     * <p>Possible message errors:</p><ul><li>The user does not have a Toggl account</li><li>The user is not authorized to manage SSO</li></ul>"// @Failure	500 {string} string "We're sorry, but something went terribly wrong. We have been notified about the error. Please try again later.
     */
    403: string;
};

export type GetWorkspaceSsoError = GetWorkspaceSsoErrors[keyof GetWorkspaceSsoErrors];

export type GetWorkspaceSsoResponses = {
    /**
     * Successful operation.
     */
    200: Array<AccountsLinkedSsoProfile>;
};

export type GetWorkspaceSsoResponse = GetWorkspaceSsoResponses[keyof GetWorkspaceSsoResponses];

export type DeleteWorkspaceLinkedSsoProfilesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the SSO profile
         */
        sso_profile_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/linked_sso_profiles/{sso_profile_id}';
};

export type DeleteWorkspaceLinkedSsoProfilesErrors = {
    /**
     * <p>Possible message errors:</p><ul><li>error linking sso profile {sso_profile_id} to workspace {workspace_id}: SSO profile not found</li></ul>
     */
    400: string;
    /**
     * <p>Possible message errors:</p><ul><li>The user does not have a Toggl account</li><li>The user is not authorized to manage SSO</li></ul>
     */
    403: string;
    /**
     * We're sorry, but something went terribly wrong. We have been notified about the error. Please try again later.
     */
    500: string;
};

export type DeleteWorkspaceLinkedSsoProfilesError = DeleteWorkspaceLinkedSsoProfilesErrors[keyof DeleteWorkspaceLinkedSsoProfilesErrors];

export type DeleteWorkspaceLinkedSsoProfilesResponses = {
    /**
     * Successful operation.
     */
    200: Array<AccountsLinkedSsoProfile>;
};

export type DeleteWorkspaceLinkedSsoProfilesResponse = DeleteWorkspaceLinkedSsoProfilesResponses[keyof DeleteWorkspaceLinkedSsoProfilesResponses];

export type PutWorkspaceSsoData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the SSO profile
         */
        sso_profile_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/linked_sso_profiles/{sso_profile_id}';
};

export type PutWorkspaceSsoErrors = {
    /**
     * <p>Possible message errors:</p><ul><li>error linking sso profile {sso_profile_id} to workspace {workspace_id}: SSO profile not found</li><li>error linking sso profile {sso_profile_id} to workspace {workspace_id}: no access to given profile</li><li>error linking sso profile {sso_profile_id} to workspace {workspace_id}: SSO profile already linked to a workspace</li><li>error linking sso profile {sso_profile_id} to workspace {workspace_id}: SSO profile is not approved</li></ul>
     */
    400: string;
    /**
     * <p>Possible message errors:</p><ul><li>The user does not have a Toggl account</li><li>The user is not authorized to manage SSO</li></ul>
     */
    403: string;
    /**
     * We're sorry, but something went terribly wrong. We have been notified about the error. Please try again later.
     */
    500: string;
};

export type PutWorkspaceSsoError = PutWorkspaceSsoErrors[keyof PutWorkspaceSsoErrors];

export type PutWorkspaceSsoResponses = {
    /**
     * Successful operation.
     */
    200: Array<AccountsLinkedSsoProfile>;
};

export type PutWorkspaceSsoResponse = PutWorkspaceSsoResponses[keyof PutWorkspaceSsoResponses];

export type DeleteWorkspaceLogoData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/logo';
};

export type DeleteWorkspaceLogoErrors = {
    /**
     * Workspace not found
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceLogoError = DeleteWorkspaceLogoErrors[keyof DeleteWorkspaceLogoErrors];

export type DeleteWorkspaceLogoResponses = {
    /**
     * Successful operation.
     */
    200: ModelsLogo;
};

export type DeleteWorkspaceLogoResponse = DeleteWorkspaceLogoResponses[keyof DeleteWorkspaceLogoResponses];

export type GetWorkspaceLogoData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/logo';
};

export type GetWorkspaceLogoErrors = {
    /**
     * Workspace not found
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceLogoError = GetWorkspaceLogoErrors[keyof GetWorkspaceLogoErrors];

export type GetWorkspaceLogoResponses = {
    /**
     * Successful operation.
     */
    200: ModelsLogo;
};

export type GetWorkspaceLogoResponse = GetWorkspaceLogoResponses[keyof GetWorkspaceLogoResponses];

export type PostWorkspaceLogoData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/logo';
};

export type PostWorkspaceLogoErrors = {
    /**
     * Workspace not found
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceLogoError = PostWorkspaceLogoErrors[keyof PostWorkspaceLogoErrors];

export type PostWorkspaceLogoResponses = {
    /**
     * Successful operation.
     */
    200: ModelsLogo;
};

export type PostWorkspaceLogoResponse = PostWorkspaceLogoResponses[keyof PostWorkspaceLogoResponses];

export type WorkspaceOptionAddData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/options';
};

export type WorkspaceOptionAddErrors = {
    /**
     * invalid '<p>Possible error messages:</p><ul><li>invalid 'workspace_id' passed in URL</li><li>invalid JSON body</li></ul>
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type WorkspaceOptionAddResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type WorkspaceOptionAddResponse = WorkspaceOptionAddResponses[keyof WorkspaceOptionAddResponses];

export type WorkspaceOptionDeleteData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Option key
         */
        key: string;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/options/{key}';
};

export type WorkspaceOptionDeleteErrors = {
    /**
     * invalid '<p>Possible error messages:</p><ul><li>invalid 'workspace_id' passed in URL</li><li>invalid JSON body</li></ul>
     */
    400: unknown;
    /**
     * Internal error
     */
    500: unknown;
};

export type WorkspaceOptionDeleteResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type WorkspaceOptionDeleteResponse = WorkspaceOptionDeleteResponses[keyof WorkspaceOptionDeleteResponses];

export type GetWorkspacePaymentReceiptsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the receipt
         */
        payment_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/payment_receipts/{payment_id}.pdf';
};

export type GetWorkspacePaymentReceiptsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Payment {payment_id} not found for workspace {workspace_id}</li><li>Country not found for payment {payment_id}</li></ul>
     */
    404: Blob | File;
    /**
     * Internal Server Error
     */
    500: Blob | File;
};

export type GetWorkspacePaymentReceiptsError = GetWorkspacePaymentReceiptsErrors[keyof GetWorkspacePaymentReceiptsErrors];

export type GetWorkspacePaymentReceiptsResponses = {
    /**
     * Returns payment receipt pdf file.
     */
    200: Blob | File;
};

export type GetWorkspacePaymentReceiptsResponse = GetWorkspacePaymentReceiptsResponses[keyof GetWorkspacePaymentReceiptsResponses];

export type GetWorkspacePreferencesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/preferences';
};

export type GetWorkspacePreferencesErrors = {
    /**
     * Workspace not found
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspacePreferencesError = GetWorkspacePreferencesErrors[keyof GetWorkspacePreferencesErrors];

export type GetWorkspacePreferencesResponses = {
    /**
     * Successful operation.
     */
    200: ModelsLogo;
};

export type GetWorkspacePreferencesResponse = GetWorkspacePreferencesResponses[keyof GetWorkspacePreferencesResponses];

export type PostWorkspacePreferencesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/preferences';
};

export type PostWorkspacePreferencesErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>The field is not writable</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have the Locking time entries feature enabled
     */
    402: string;
    /**
     * Permission required to update time entries lock setting.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspacePreferencesError = PostWorkspacePreferencesErrors[keyof PostWorkspacePreferencesErrors];

export type PostWorkspacePreferencesResponses = {
    /**
     * Successful operation.
     */
    200: ModelsLogo;
};

export type PostWorkspacePreferencesResponse = PostWorkspacePreferencesResponses[keyof PostWorkspacePreferencesResponses];

export type GetProjectGroupsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/project_groups';
};

export type GetProjectGroupsErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetProjectGroupsError = GetProjectGroupsErrors[keyof GetProjectGroupsErrors];

export type GetProjectGroupsResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsProjectGroup>;
};

export type GetProjectGroupsResponse = GetProjectGroupsResponses[keyof GetProjectGroupsResponses];

export type PostProjectGroupData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/project_groups';
};

export type PostProjectGroupErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostProjectGroupError = PostProjectGroupErrors[keyof PostProjectGroupErrors];

export type PostProjectGroupResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PostProjectGroupResponse = PostProjectGroupResponses[keyof PostProjectGroupResponses];

export type DeleteProjectGroupData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project group
         */
        project_group_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/project_groups/{project_group_id}';
};

export type DeleteProjectGroupErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteProjectGroupError = DeleteProjectGroupErrors[keyof DeleteProjectGroupErrors];

export type DeleteProjectGroupResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type DeleteProjectGroupResponse = DeleteProjectGroupResponses[keyof DeleteProjectGroupResponses];

export type GetWorkspaceProjectUsersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: {
        /**
         * Numeric IDs of projects, comma-separated
         */
        project_ids?: string;
        /**
         * Numeric ID of user, if passed returns only project users for this user's projects
         */
        user_id?: string;
        /**
         * Include group members
         */
        with_group_members?: boolean;
    };
    url: '/workspaces/{workspace_id}/project_users';
};

export type GetWorkspaceProjectUsersErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>project_ids cannot exceed 200 elements.</li><li>Invalid user_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceProjectUsersError = GetWorkspaceProjectUsersErrors[keyof GetWorkspaceProjectUsersErrors];

export type GetWorkspaceProjectUsersResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsProjectUser>;
};

export type GetWorkspaceProjectUsersResponse = GetWorkspaceProjectUsersResponses[keyof GetWorkspaceProjectUsersResponses];

export type PostWorkspaceProjectUsersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/project_users';
};

export type PostWorkspaceProjectUsersErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid project_id</li><li>Invalid user_id</li><li>Project user already exists<li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceProjectUsersError = PostWorkspaceProjectUsersErrors[keyof PostWorkspaceProjectUsersErrors];

export type PostWorkspaceProjectUsersResponses = {
    /**
     * Successful operation.
     */
    200: ModelsProjectUser;
};

export type PostWorkspaceProjectUsersResponse = PostWorkspaceProjectUsersResponses[keyof PostWorkspaceProjectUsersResponses];

export type PostWorkspaceProjectUsersPaginatedData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: {
        /**
         * Include inactive users in the response
         */
        show_inactive?: boolean;
        /**
         * Number of users per project
         */
        users_per_project?: string;
        /**
         * Page number
         */
        page?: number;
    };
    url: '/workspaces/{workspace_id}/project_users/paginated';
};

export type PostWorkspaceProjectUsersPaginatedErrors = {
    400: unknown;
};

export type PostWorkspaceProjectUsersPaginatedResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsProjectUserWithMeta>;
};

export type PostWorkspaceProjectUsersPaginatedResponse = PostWorkspaceProjectUsersPaginatedResponses[keyof PostWorkspaceProjectUsersPaginatedResponses];

export type PatchWorkspaceProjectUsersIdsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query: {
        /**
         * Numeric IDs of the project users
         */
        project_user_ids: Array<number>;
    };
    url: '/workspaces/{workspace_id}/project_users/{project_user_ids}';
};

export type PatchWorkspaceProjectUsersIdsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Invalid value as user IDs</li><li>No patchable fields defined</li><li>PATCH expects at least one ID</li><li>PATCH request is limited to %d entries at once</li><li>Invalid op: </li><li>Invalid path format: </li><li>Path not found: </li><li>Operation not supported ({patch_operation} {patch_path})</li><li>Invalid path</li><li>/manager expects a boolean</li><li>/labor_cost expects an float64 or null</li><li>/rate expects an float64 or null</li><li>Operation not supported (add /labor_cost)</li><li>Operation not supported (add /rate)</li><li>Operation not supported (add /manager)</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PatchWorkspaceProjectUsersIdsError = PatchWorkspaceProjectUsersIdsErrors[keyof PatchWorkspaceProjectUsersIdsErrors];

export type PatchWorkspaceProjectUsersIdsResponses = {
    /**
     * Successful operation.
     */
    200: UserOutput;
};

export type PatchWorkspaceProjectUsersIdsResponse = PatchWorkspaceProjectUsersIdsResponses[keyof PatchWorkspaceProjectUsersIdsResponses];

export type DeleteWorkspaceProjectUsersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project user
         */
        project_user_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/project_users/{project_user_id}';
};

export type DeleteWorkspaceProjectUsersErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Project user not found/accessible</li><li>Invalid project_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceProjectUsersError = DeleteWorkspaceProjectUsersErrors[keyof DeleteWorkspaceProjectUsersErrors];

export type DeleteWorkspaceProjectUsersResponses = {
    /**
     * Successful operation.
     */
    200: number;
};

export type DeleteWorkspaceProjectUsersResponse = DeleteWorkspaceProjectUsersResponses[keyof DeleteWorkspaceProjectUsersResponses];

export type PutWorkspaceProjectUsersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project user
         */
        project_user_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/project_users/{project_user_id}';
};

export type PutWorkspaceProjectUsersErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Missing data</li><li>Invalid project_id</li><li>Invalid user_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspaceProjectUsersError = PutWorkspaceProjectUsersErrors[keyof PutWorkspaceProjectUsersErrors];

export type PutWorkspaceProjectUsersResponses = {
    /**
     * Successful operation.
     */
    200: ModelsProjectUser;
};

export type PutWorkspaceProjectUsersResponse = PutWorkspaceProjectUsersResponses[keyof PutWorkspaceProjectUsersResponses];

export type GetProjectsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query: {
        /**
         * Place pinned projects at top of response
         */
        sort_pinned: boolean;
    };
    url: '/workspaces/{workspace_id}/projects';
};

export type GetProjectsErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetProjectsError = GetProjectsErrors[keyof GetProjectsErrors];

export type GetProjectsResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsProject>;
};

export type GetProjectsResponse = GetProjectsResponses[keyof GetProjectsResponses];

export type PostWorkspaceProjectCreateData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects';
};

export type PostWorkspaceProjectCreateErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceProjectCreateError = PostWorkspaceProjectCreateErrors[keyof PostWorkspaceProjectCreateErrors];

export type PostWorkspaceProjectCreateResponses = {
    /**
     * Successful operation.
     */
    200: ModelsProject;
};

export type PostWorkspaceProjectCreateResponse = PostWorkspaceProjectCreateResponses[keyof PostWorkspaceProjectCreateResponses];

export type PostWorkspacesByWorkspaceIdProjectsBillableAmountsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/billable-amounts';
};

export type PostWorkspacesByWorkspaceIdProjectsBillableAmountsErrors = {
    /**
     * invalid body
     */
    400: string;
    /**
     * Operation Forbidden
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspacesByWorkspaceIdProjectsBillableAmountsError = PostWorkspacesByWorkspaceIdProjectsBillableAmountsErrors[keyof PostWorkspacesByWorkspaceIdProjectsBillableAmountsErrors];

export type PostWorkspacesByWorkspaceIdProjectsBillableAmountsResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsProject>;
};

export type PostWorkspacesByWorkspaceIdProjectsBillableAmountsResponse = PostWorkspacesByWorkspaceIdProjectsBillableAmountsResponses[keyof PostWorkspacesByWorkspaceIdProjectsBillableAmountsResponses];

export type WorkspaceProjectsTaskCountData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/task_count';
};

export type WorkspaceProjectsTaskCountErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type WorkspaceProjectsTaskCountError = WorkspaceProjectsTaskCountErrors[keyof WorkspaceProjectsTaskCountErrors];

export type WorkspaceProjectsTaskCountResponses = {
    /**
     * Successful operation.
     */
    200: Array<{
        [key: string]: number;
    }>;
};

export type WorkspaceProjectsTaskCountResponse = WorkspaceProjectsTaskCountResponses[keyof WorkspaceProjectsTaskCountResponses];

export type GetProjectsTemplatesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/templates';
};

export type GetProjectsTemplatesErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetProjectsTemplatesError = GetProjectsTemplatesErrors[keyof GetProjectsTemplatesErrors];

export type GetProjectsTemplatesResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type GetProjectsTemplatesResponse = GetProjectsTemplatesResponses[keyof GetProjectsTemplatesResponses];

export type PatchWorkspaceProjectsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric IDs of project ids, separated by comma. E.g.: `204301830,202700150,202687559`
         */
        project_ids: string;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/{project_ids}';
};

export type PatchWorkspaceProjectsErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type PatchWorkspaceProjectsError = PatchWorkspaceProjectsErrors[keyof PatchWorkspaceProjectsErrors];

export type PatchWorkspaceProjectsResponses = {
    /**
     * Successful operation.
     */
    200: ProjectsPatchOutput;
};

export type PatchWorkspaceProjectsResponse = PatchWorkspaceProjectsResponses[keyof PatchWorkspaceProjectsResponses];

export type DeleteWorkspaceProjectData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project
         */
        project_id: number;
    };
    query?: {
        /**
         * Time entries deletion mode: 'delete' or 'unassign'
         */
        teDeletionMode?: string;
    };
    url: '/workspaces/{workspace_id}/projects/{project_id}';
};

export type DeleteWorkspaceProjectErrors = {
    /**
     * Possible errors:<ul><li>Invalid project_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceProjectError = DeleteWorkspaceProjectErrors[keyof DeleteWorkspaceProjectErrors];

export type DeleteWorkspaceProjectResponses = {
    /**
     * Successful operation.
     */
    200: number;
};

export type DeleteWorkspaceProjectResponse = DeleteWorkspaceProjectResponses[keyof DeleteWorkspaceProjectResponses];

export type GetWorkspacesByWorkspaceIdProjectsByProjectIdData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project
         */
        project_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/{project_id}';
};

export type GetWorkspacesByWorkspaceIdProjectsByProjectIdErrors = {
    /**
     * Possible errors:<ul><li>Invalid project_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspacesByWorkspaceIdProjectsByProjectIdError = GetWorkspacesByWorkspaceIdProjectsByProjectIdErrors[keyof GetWorkspacesByWorkspaceIdProjectsByProjectIdErrors];

export type GetWorkspacesByWorkspaceIdProjectsByProjectIdResponses = {
    /**
     * Successful operation.
     */
    200: ModelsProject;
};

export type GetWorkspacesByWorkspaceIdProjectsByProjectIdResponse = GetWorkspacesByWorkspaceIdProjectsByProjectIdResponses[keyof GetWorkspacesByWorkspaceIdProjectsByProjectIdResponses];

export type PutWorkspaceProjectData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project
         */
        project_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/{project_id}';
};

export type PutWorkspaceProjectErrors = {
    /**
     * Possible errors:<ul><li>Client with the ID {client ID} isn't present in workspace {workspace ID}</li><li>Error in validating color '{color}'. Project color must be a hex value in the form of #[0-9a-f]{6}.</li></ul>
     */
    400: string;
    /**
     * Possible errors:<ul><li>Only admins may create projects in this workspace</li><li>Only admins may create private projects in this workspace</li><li>User does not have access to this resource.</li></ul>
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspaceProjectError = PutWorkspaceProjectErrors[keyof PutWorkspaceProjectErrors];

export type PutWorkspaceProjectResponses = {
    /**
     * Successful operation.
     */
    200: ModelsProject;
};

export type PutWorkspaceProjectResponse = PutWorkspaceProjectResponses[keyof PutWorkspaceProjectResponses];

export type GetWorkspaceProjectPeriodsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project
         */
        project_id: number;
    };
    query?: {
        /**
         * Smallest boundary date to search for recurring periods
         */
        start_date?: string;
        /**
         * Biggest boundary date to search for for recurring periods
         */
        end_date?: string;
    };
    url: '/workspaces/{workspace_id}/projects/{project_id}/periods';
};

export type GetWorkspaceProjectPeriodsErrors = {
    /**
     * Possible errors:<ul><li>Invalid project_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceProjectPeriodsError = GetWorkspaceProjectPeriodsErrors[keyof GetWorkspaceProjectPeriodsErrors];

export type GetWorkspaceProjectPeriodsResponses = {
    /**
     * Successful operation.
     */
    200: ModelsRecurringPeriod;
};

export type GetWorkspaceProjectPeriodsResponse = GetWorkspaceProjectPeriodsResponses[keyof GetWorkspaceProjectPeriodsResponses];

export type PostPinnedProjectData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project
         */
        project_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/{project_id}/pin';
};

export type PostPinnedProjectErrors = {
    /**
     * Possible error messages:<ul><li>Cannot pin more projects: Max 100 pins for paid plans</li><li>Cannot pin more projects: Max 1 pin for free plans</li></ul>
     */
    403: string;
    /**
     * Project not found/accessible
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostPinnedProjectError = PostPinnedProjectErrors[keyof PostPinnedProjectErrors];

export type PostPinnedProjectResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project
         */
        project_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/{project_id}/statistics';
};

export type GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsErrors = {
    /**
     * Possible errors:<ul><li>Invalid project_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsError = GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsErrors[keyof GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsErrors];

export type GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsResponses = {
    /**
     * Successful operation.
     */
    200: ModelsProjectStatistics;
};

export type GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsResponse = GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsResponses[keyof GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsResponses];

export type GetWorkspaceProjectTasksData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project
         */
        project_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/{project_id}/tasks';
};

export type GetWorkspaceProjectTasksErrors = {
    /**
     * Possible errors:<ul><li>Invalid project_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceProjectTasksError = GetWorkspaceProjectTasksErrors[keyof GetWorkspaceProjectTasksErrors];

export type GetWorkspaceProjectTasksResponses = {
    /**
     * Successful operation.
     */
    200: ModelsTask;
};

export type GetWorkspaceProjectTasksResponse = GetWorkspaceProjectTasksResponses[keyof GetWorkspaceProjectTasksResponses];

export type PostWorkspaceProjectTasksData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project
         */
        project_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/{project_id}/tasks';
};

export type PostWorkspaceProjectTasksErrors = {
    /**
     * Possible errors:<ul><li>"Project not found/accessible, Can not change tasks of archived project"</li><li>Invalid project_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceProjectTasksError = PostWorkspaceProjectTasksErrors[keyof PostWorkspaceProjectTasksErrors];

export type PostWorkspaceProjectTasksResponses = {
    /**
     * Successful operation.
     */
    200: ModelsTask;
};

export type PostWorkspaceProjectTasksResponse = PostWorkspaceProjectTasksResponses[keyof PostWorkspaceProjectTasksResponses];

export type PatchWorkspaceProjectTasksData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project
         */
        project_id: number;
        /**
         * Numeric IDs of project tasks separated by comma
         */
        task_ids: string;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_ids}';
};

export type PatchWorkspaceProjectTasksErrors = {
    /**
     * Possible errors:<ul><li>Invalid project_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PatchWorkspaceProjectTasksError = PatchWorkspaceProjectTasksErrors[keyof PatchWorkspaceProjectTasksErrors];

export type PatchWorkspaceProjectTasksResponses = {
    /**
     * Successful operation.
     */
    200: TaskPatchOutput;
};

export type PatchWorkspaceProjectTasksResponse = PatchWorkspaceProjectTasksResponses[keyof PatchWorkspaceProjectTasksResponses];

export type DeleteWorkspaceProjectTaskData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project
         */
        project_id: number;
        /**
         * Numeric ID of the task
         */
        task_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}';
};

export type DeleteWorkspaceProjectTaskErrors = {
    /**
     * Possible errors:<ul><li>Invalid project_id</li><li>Invalid task_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceProjectTaskError = DeleteWorkspaceProjectTaskErrors[keyof DeleteWorkspaceProjectTaskErrors];

export type DeleteWorkspaceProjectTaskResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type DeleteWorkspaceProjectTaskResponse = DeleteWorkspaceProjectTaskResponses[keyof DeleteWorkspaceProjectTaskResponses];

export type GetWorkspaceProjectTaskData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project
         */
        project_id: number;
        /**
         * Numeric ID of the task
         */
        task_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}';
};

export type GetWorkspaceProjectTaskErrors = {
    /**
     * Possible errors:<ul><li>Invalid project_id</li><li>Invalid task_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceProjectTaskError = GetWorkspaceProjectTaskErrors[keyof GetWorkspaceProjectTaskErrors];

export type GetWorkspaceProjectTaskResponses = {
    /**
     * Successful operation.
     */
    200: ModelsTask;
};

export type GetWorkspaceProjectTaskResponse = GetWorkspaceProjectTaskResponses[keyof GetWorkspaceProjectTaskResponses];

export type PutWorkspaceProjectTaskData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the project
         */
        project_id: number;
        /**
         * Numeric ID of project task
         */
        task_id: string;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}';
};

export type PutWorkspaceProjectTaskErrors = {
    /**
     * Possible errors:<ul><li>Invalid project_id</li><li>Invalid task_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspaceProjectTaskError = PutWorkspaceProjectTaskErrors[keyof PutWorkspaceProjectTaskErrors];

export type PutWorkspaceProjectTaskResponses = {
    /**
     * Successful operation.
     */
    200: ModelsTask;
};

export type PutWorkspaceProjectTaskResponse = PutWorkspaceProjectTaskResponses[keyof PutWorkspaceProjectTaskResponses];

export type CreateRateData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/rates';
};

export type CreateRateErrors = {
    /**
     * Possible error messages:<ul><li>Request payload must be informed</li><li>Invalid workspace ID</li></ul>
     */
    400: string;
    /**
     * Billable rates are available for Starter and higher plans.
     */
    402: string;
    /**
     * User cannot access billable rate(s).
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type CreateRateError = CreateRateErrors[keyof CreateRateErrors];

export type CreateRateResponses = {
    /**
     * Successfully created.
     */
    201: unknown;
};

export type GetRatesByLevelData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Rates level: workspace, project, task or user
         */
        level: string;
        /**
         * Numeric ID of the entity level
         */
        level_id: number;
    };
    query?: {
        /**
         * Type of rate values to be returned: `billable_rates` or `labor_costs`. Default is `billable_rates`.
         */
        type?: string;
    };
    url: '/workspaces/{workspace_id}/rates/{level}/{level_id}';
};

export type GetRatesByLevelErrors = {
    /**
     * Possible error messages:<ul><li>Invalid workspace ID</li><li>Invalid entity ID</li><li>Invalid level: it should be workspace, workspace_user, project or project_user</li><li>User not found in workspace</li><li>Task not found in workspace</li></ul>
     */
    400: string;
    /**
     * Billable rates are available for Starter and higher plans.
     */
    402: string;
    /**
     * User cannot access billable rate(s).
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetRatesByLevelError = GetRatesByLevelErrors[keyof GetRatesByLevelErrors];

export type GetRatesByLevelResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsRate>;
};

export type GetRatesByLevelResponse = GetRatesByLevelResponses[keyof GetRatesByLevelResponses];

export type GetSharedReportData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
    };
    query?: {
        fixed_dates?: boolean;
        name?: string;
        page?: number;
        per_page?: number;
        public?: boolean;
        requestingUserID?: number;
        scheduled?: boolean;
        sort_direction?: string;
        sort_field?: string;
    };
    url: '/workspaces/{workspace_id}/reports/shared';
};

export type GetSharedReportErrors = {
    /**
     * Invalid parameter {parameter_name}.
     */
    400: string;
    /**
     * Available only for premium workspaces.
     */
    402: string;
    /**
     * Workspace not found/accessible.
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetSharedReportError = GetSharedReportErrors[keyof GetSharedReportErrors];

export type GetSharedReportResponses = {
    /**
     * Successful operation
     */
    200: Array<ModelsSavedReport>;
};

export type GetSharedReportResponse = GetSharedReportResponses[keyof GetSharedReportResponses];

export type PostSharedReportData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/reports/shared';
};

export type PostSharedReportErrors = {
    /**
     * Possible errors:<ul><li>JSON is not valid</li><li>saved report name field can't be blank</li><li>saved report fixed_daterange can't be blank</li><li>saved report public can't be blank</li><li>parameter report_type is invalid or blank</li></ul>
     */
    400: string;
    /**
     * Available only for premium workspaces.
     */
    402: string;
    /**
     * Public reports can be saved only by admins.
     */
    403: string;
    /**
     * Workspace not found/accessible.
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostSharedReportError = PostSharedReportErrors[keyof PostSharedReportErrors];

export type PostSharedReportResponses = {
    /**
     * Returns shared report.
     */
    200: ModelsSavedReport;
};

export type PostSharedReportResponse = PostSharedReportResponses[keyof PostSharedReportResponses];

export type PutSharedReportData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
        /**
         * Numeric ID of the report.
         */
        report_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/reports/shared';
};

export type PutSharedReportErrors = {
    /**
     * Possible errors:<ul><li>JSON is not valid</li><li>Report ID {report_id} failed with: saved report name field can't be blank</li><li>Report ID {report_id} failed with: parameter report_type invalid or blank</li></ul>
     */
    400: string;
    /**
     * Available only for premium workspaces.
     */
    402: string;
    /**
     * Public reports can be saved only by admins.
     */
    403: string;
    /**
     * Possible errors:<ul><li>Workspace not found/accessible.</li><li>Some IDs were not found: Only {found_count} Saved Reports found for {requested_count} given IDs.</li></ul>
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutSharedReportError = PutSharedReportErrors[keyof PutSharedReportErrors];

export type PutSharedReportResponses = {
    /**
     * Returns shared report.
     */
    200: ModelsSavedReport;
};

export type PutSharedReportResponse = PutSharedReportResponses[keyof PutSharedReportResponses];

export type BulkDeleteSavedReportResourceData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/reports/shared/bulk_delete';
};

export type BulkDeleteSavedReportResourceErrors = {
    /**
     * JSON is not valid.
     */
    400: string;
    /**
     * Available only for premium workspaces.
     */
    402: string;
    /**
     * Possible errors:<ul><li>Workspace not found/accessible.</li><li>Some IDs were not found: Only {found_count} Saved Reports found for {requested_count} given IDs.</li></ul>
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type BulkDeleteSavedReportResourceError = BulkDeleteSavedReportResourceErrors[keyof BulkDeleteSavedReportResourceErrors];

export type BulkDeleteSavedReportResourceResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsSavedReport>;
};

export type BulkDeleteSavedReportResourceResponse = BulkDeleteSavedReportResourceResponses[keyof BulkDeleteSavedReportResourceResponses];

export type DeleteSavedReportResourceData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
        /**
         * Numeric ID of the report.
         */
        report_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/reports/shared/{report_id}';
};

export type DeleteSavedReportResourceErrors = {
    /**
     * Available only for premium workspaces.
     */
    402: string;
    /**
     * Possible errors:<ul><li>Workspace not found/accessible.</li><li>Report ID {report_id} not found/accessible.</li></ul>
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteSavedReportResourceError = DeleteSavedReportResourceErrors[keyof DeleteSavedReportResourceErrors];

export type DeleteSavedReportResourceResponses = {
    /**
     * Successful operation.
     */
    200: ModelsSavedReport;
};

export type DeleteSavedReportResourceResponse = DeleteSavedReportResourceResponses[keyof DeleteSavedReportResourceResponses];

export type GetSavedReportResourceData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
        /**
         * Numeric ID of the report.
         */
        report_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/reports/shared/{report_id}';
};

export type GetSavedReportResourceErrors = {
    /**
     * Available only for premium workspaces.
     */
    402: string;
    /**
     * Possible errors:<ul><li>Workspace not found/accessible.</li><li>Report ID {report_id} not found/accessible.</li></ul>
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetSavedReportResourceError = GetSavedReportResourceErrors[keyof GetSavedReportResourceErrors];

export type GetSavedReportResourceResponses = {
    /**
     * Successful operation
     */
    200: ModelsSavedReport;
};

export type GetSavedReportResourceResponse = GetSavedReportResourceResponses[keyof GetSavedReportResourceResponses];

export type PutSavedReportResourceData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
        /**
         * Numeric ID of the report.
         */
        report_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/reports/shared/{report_id}';
};

export type PutSavedReportResourceErrors = {
    /**
     * Possible errors:<ul><li>JSON is not valid</li><li>saved report name field can't be blank</li><li>parameter report_type invalid or blank</li></ul>
     */
    400: string;
    /**
     * Available only for premium workspaces.
     */
    402: string;
    /**
     * Public reports can be saved only by admins.
     */
    403: string;
    /**
     * Workspace not found/accessible.
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutSavedReportResourceError = PutSavedReportResourceErrors[keyof PutSavedReportResourceErrors];

export type PutSavedReportResourceResponses = {
    /**
     * Returns saved report.
     */
    200: ModelsSavedReport;
};

export type PutSavedReportResourceResponse = PutSavedReportResourceResponses[keyof PutSavedReportResourceResponses];

export type RestoreWorkspaceData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/restore';
};

export type RestoreWorkspaceResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type RestoreWorkspaceResponse = RestoreWorkspaceResponses[keyof RestoreWorkspaceResponses];

export type GetWorkspaceScheduledReportsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/scheduled_reports';
};

export type GetWorkspaceScheduledReportsErrors = {
    /**
     * Workspace needs to have the {feature_name} feature enabled.
     */
    402: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Workspace not found/accessible
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceScheduledReportsError = GetWorkspaceScheduledReportsErrors[keyof GetWorkspaceScheduledReportsErrors];

export type GetWorkspaceScheduledReportsResponses = {
    /**
     * Lists scheduled reports.
     */
    200: Array<ModelsScheduledReport>;
};

export type GetWorkspaceScheduledReportsResponse = GetWorkspaceScheduledReportsResponses[keyof GetWorkspaceScheduledReportsResponses];

export type PostWorkspaceScheduledReportsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/scheduled_reports';
};

export type PostWorkspaceScheduledReportsErrors = {
    /**
     * Possible error messages: <ul><li>Bookmark not found.</li><li>Unable to use all requested recipients.</li><li>No usable recipients found.</li><li>Invalid scheduled report frequency. Must be one of: 1 (daily), 7 (weekly) or 30 (monthly).</li></ul>
     */
    400: string;
    /**
     * Workspace needs to have the {feature_name} feature enabled.
     */
    402: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Workspace not found/accessible
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceScheduledReportsError = PostWorkspaceScheduledReportsErrors[keyof PostWorkspaceScheduledReportsErrors];

export type PostWorkspaceScheduledReportsResponses = {
    /**
     * Returns created schedule report.
     */
    200: ModelsScheduledReport;
};

export type PostWorkspaceScheduledReportsResponse = PostWorkspaceScheduledReportsResponses[keyof PostWorkspaceScheduledReportsResponses];

export type DeleteWorkspaceScheduledReportsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the report
         */
        report_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/scheduled_reports/{report_id}';
};

export type DeleteWorkspaceScheduledReportsErrors = {
    /**
     * Workspace needs to have the {feature_name} feature enabled.
     */
    402: string;
    /**
     * Possible error messages: <ul><li>User does not have access to this resource.</li><li>Can't remove the schedule.</li></ul>
     */
    403: string;
    /**
     * Possible error messages: <ul><li>Scheduled report not found.</li><li>Workspace not found/accessible</li></ul>
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceScheduledReportsError = DeleteWorkspaceScheduledReportsErrors[keyof DeleteWorkspaceScheduledReportsErrors];

export type DeleteWorkspaceScheduledReportsResponses = {
    /**
     * Returns only status code.
     */
    200: string;
};

export type DeleteWorkspaceScheduledReportsResponse = DeleteWorkspaceScheduledReportsResponses[keyof DeleteWorkspaceScheduledReportsResponses];

export type GetWorkspaceStatisticsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workspaces/{workspace_id}/statistics';
};

export type GetWorkspaceStatisticsErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceStatisticsError = GetWorkspaceStatisticsErrors[keyof GetWorkspaceStatisticsErrors];

export type GetWorkspaceStatisticsResponses = {
    /**
     * Successful operation.
     */
    200: ModelsStatistics;
};

export type GetWorkspaceStatisticsResponse = GetWorkspaceStatisticsResponses[keyof GetWorkspaceStatisticsResponses];

export type GetWorkspaceSubscriptionData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/subscription';
};

export type GetWorkspaceSubscriptionErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceSubscriptionError = GetWorkspaceSubscriptionErrors[keyof GetWorkspaceSubscriptionErrors];

export type GetWorkspaceSubscriptionResponses = {
    /**
     * Returns subscription data.
     */
    200: SubscriptionOutData;
};

export type GetWorkspaceSubscriptionResponse = GetWorkspaceSubscriptionResponses[keyof GetWorkspaceSubscriptionResponses];

export type GetWorkspacePurchaseOrderPdfData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
        /**
         * Numeric ID of the purchase order.
         */
        purchase_order_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/subscription/purchase_orders/{purchase_order_id}.pdf';
};

export type GetWorkspacePurchaseOrderPdfErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Purchase order not found</li><li>Company not found</li></ul>
     */
    404: Blob | File;
    /**
     * Internal Server Error
     */
    500: Blob | File;
};

export type GetWorkspacePurchaseOrderPdfError = GetWorkspacePurchaseOrderPdfErrors[keyof GetWorkspacePurchaseOrderPdfErrors];

export type GetWorkspacePurchaseOrderPdfResponses = {
    /**
     * Purchase order document in PDF form.
     */
    200: Blob | File;
};

export type GetWorkspacePurchaseOrderPdfResponse = GetWorkspacePurchaseOrderPdfResponses[keyof GetWorkspacePurchaseOrderPdfResponses];

export type GetWorkspaceTagData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Number of items per page
         */
        per_page?: number;
        /**
         * Search by task name
         */
        search?: string;
    };
    url: '/workspaces/{workspace_id}/tags';
};

export type GetWorkspaceTagErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceTagError = GetWorkspaceTagErrors[keyof GetWorkspaceTagErrors];

export type GetWorkspaceTagResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsTag>;
};

export type GetWorkspaceTagResponse = GetWorkspaceTagResponses[keyof GetWorkspaceTagResponses];

export type PatchWorkspaceTagsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/tags';
};

export type PatchWorkspaceTagsErrors = {
    /**
     * Some tag IDs do not belong to workspace.
     */
    400: string;
    /**
     * Only organization or workspace administrators may manage tags in this workspace.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PatchWorkspaceTagsError = PatchWorkspaceTagsErrors[keyof PatchWorkspaceTagsErrors];

export type PatchWorkspaceTagsResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PatchWorkspaceTagsResponse = PatchWorkspaceTagsResponses[keyof PatchWorkspaceTagsResponses];

export type PostWorkspaceTagData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/tags';
};

export type PostWorkspaceTagErrors = {
    /**
     * Possible errors:<ul><li>Invalid JSON input</li><li>tag name can't be blank</li><li>a tag with the name '{tag_name}' already exists</li></ul>
     */
    400: string;
    /**
     * Only organization or workspace administrators may manage tags in this workspace.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceTagError = PostWorkspaceTagErrors[keyof PostWorkspaceTagErrors];

export type PostWorkspaceTagResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsTag>;
};

export type PostWorkspaceTagResponse = PostWorkspaceTagResponses[keyof PostWorkspaceTagResponses];

export type DeleteWorkspaceTagData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the tag
         */
        tag_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/tags/{tag_id}';
};

export type DeleteWorkspaceTagErrors = {
    /**
     * Invalid tag ID.
     */
    400: string;
    /**
     * Only organization or workspace administrators may manage tags in this workspace.
     */
    403: string;
    /**
     * Tag was not found.
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceTagError = DeleteWorkspaceTagErrors[keyof DeleteWorkspaceTagErrors];

export type DeleteWorkspaceTagResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type DeleteWorkspaceTagResponse = DeleteWorkspaceTagResponses[keyof DeleteWorkspaceTagResponses];

export type PutWorkspaceTagData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the tag
         */
        tag_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/tags/{tag_id}';
};

export type PutWorkspaceTagErrors = {
    /**
     * Possible errors:<ul><li>Invalid JSON input</li><li>Invalid tag ID</li><li>tag name can't be blank</li><li>a tag with the name '{tag_name}' already exists</li></ul>
     */
    400: string;
    /**
     * Only organization or workspace administrators may manage tags in this workspace.
     */
    403: string;
    /**
     * Tag was not found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspaceTagError = PutWorkspaceTagErrors[keyof PutWorkspaceTagErrors];

export type PutWorkspaceTagResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsTag>;
};

export type PutWorkspaceTagResponse = PutWorkspaceTagResponses[keyof PutWorkspaceTagResponses];

export type GetWorkspaceTasksData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: {
        /**
         * Retrieve tasks created/modified/deleted since this date using UNIX timestamp.
         */
        since?: number;
        /**
         * Page number, default 1
         */
        page?: number;
        /**
         * Number of items per page, default 50
         */
        per_page?: number;
        /**
         * Sort order, default ASC
         */
        sort_order?: string;
        /**
         * Field used for sorting. Default is name. Valid values are 'name' and 'created_at'
         */
        sort_field?: string;
        /**
         * Filter by active state. You can also pass 'both' to get both active and inactive tasks.
         */
        active?: boolean;
        /**
         * Filter by project id
         */
        pid?: number;
        /**
         * Smallest boundary date in the format YYYY-MM-DD
         */
        start_date?: string;
        /**
         * Biggest boundary date in the format YYYY-MM-DD
         */
        end_date?: string;
        /**
         * Search by task name
         */
        search?: string;
    };
    url: '/workspaces/{workspace_id}/tasks';
};

export type GetWorkspaceTasksErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceTasksError = GetWorkspaceTasksErrors[keyof GetWorkspaceTasksErrors];

export type GetWorkspaceTasksResponses = {
    /**
     * Successful operation.
     */
    200: TaskResponse;
};

export type GetWorkspaceTasksResponse = GetWorkspaceTasksResponses[keyof GetWorkspaceTasksResponses];

export type GetWorkspaceTasksBasicData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: {
        /**
         * Page number, default 1
         */
        page?: number;
        /**
         * Number of items per page, default 50
         */
        per_page?: number;
        /**
         * Sort order, default ASC
         */
        sort_order?: string;
        /**
         * Field used for sorting. Default is name. Valid values are 'name' and 'created_at'
         */
        sort_field?: string;
        /**
         * Filter by active state. You can also pass 'both' to get both active and inactive tasks. Default is true.
         */
        active?: boolean;
        /**
         * Search for tasks by name.
         */
        search?: string;
    };
    url: '/workspaces/{workspace_id}/tasks/basic';
};

export type GetWorkspaceTasksBasicErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceTasksBasicError = GetWorkspaceTasksBasicErrors[keyof GetWorkspaceTasksBasicErrors];

export type GetWorkspaceTasksBasicResponses = {
    /**
     * Successful operation.
     */
    200: TaskResponse;
};

export type GetWorkspaceTasksBasicResponse = GetWorkspaceTasksBasicResponses[keyof GetWorkspaceTasksBasicResponses];

export type GetWorkspaceTasksDataData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/tasks/data';
};

export type GetWorkspaceTasksDataErrors = {
    400: unknown;
};

export type GetWorkspaceTasksDataResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsTask>;
};

export type GetWorkspaceTasksDataResponse = GetWorkspaceTasksDataResponses[keyof GetWorkspaceTasksDataResponses];

export type PostWorkspaceTimeEntriesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: {
        /**
         * Should the response contain data for meta entities
         */
        meta?: boolean;
    };
    url: '/workspaces/{workspace_id}/time_entries';
};

export type PostWorkspaceTimeEntriesErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceTimeEntriesError = PostWorkspaceTimeEntriesErrors[keyof PostWorkspaceTimeEntriesErrors];

export type PostWorkspaceTimeEntriesResponses = {
    /**
     * A workspace TimeEntry.
     */
    200: ModelsTimeEntry;
};

export type PostWorkspaceTimeEntriesResponse = PostWorkspaceTimeEntriesResponses[keyof PostWorkspaceTimeEntriesResponses];

export type PatchTimeEntriesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric IDs of time_entries, separated by comma. E.g.: `204301830,202700150,202687559`. The limit is 100 IDs per request.
         */
        time_entry_ids: string;
    };
    query?: {
        /**
         * Should the response contain data for meta entities
         */
        meta?: boolean;
    };
    url: '/workspaces/{workspace_id}/time_entries/{time_entry_ids}';
};

export type PatchTimeEntriesErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type PatchTimeEntriesError = PatchTimeEntriesErrors[keyof PatchTimeEntriesErrors];

export type PatchTimeEntriesResponses = {
    /**
     * Successful operation.
     */
    200: TimeentryPatchOutput;
};

export type PatchTimeEntriesResponse = PatchTimeEntriesResponses[keyof PatchTimeEntriesResponses];

export type DeleteWorkspaceTimeEntriesData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * TimeEntry ID.
         */
        time_entry_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/time_entries/{time_entry_id}';
};

export type DeleteWorkspaceTimeEntriesErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceTimeEntriesError = DeleteWorkspaceTimeEntriesErrors[keyof DeleteWorkspaceTimeEntriesErrors];

export type DeleteWorkspaceTimeEntriesResponses = {
    /**
     * Returns only status code.
     */
    200: string;
};

export type DeleteWorkspaceTimeEntriesResponse = DeleteWorkspaceTimeEntriesResponses[keyof DeleteWorkspaceTimeEntriesResponses];

export type PutWorkspaceTimeEntryHandlerData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * TimeEntry ID.
         */
        time_entry_id: number;
    };
    query?: {
        /**
         * Should the response contain data for meta entities
         */
        meta?: boolean;
        /**
         * Should the response contain time entry sharing details
         */
        include_sharing?: boolean;
    };
    url: '/workspaces/{workspace_id}/time_entries/{time_entry_id}';
};

export type PutWorkspaceTimeEntryHandlerErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspaceTimeEntryHandlerError = PutWorkspaceTimeEntryHandlerErrors[keyof PutWorkspaceTimeEntryHandlerErrors];

export type PutWorkspaceTimeEntryHandlerResponses = {
    /**
     * A workspace TimeEntry.
     */
    200: ModelsTimeEntry;
};

export type PutWorkspaceTimeEntryHandlerResponse = PutWorkspaceTimeEntryHandlerResponses[keyof PutWorkspaceTimeEntryHandlerResponses];

export type PatchWorkspaceStopTimeEntryHandlerData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * TimeEntry ID.
         */
        time_entry_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/time_entries/{time_entry_id}/stop';
};

export type PatchWorkspaceStopTimeEntryHandlerErrors = {
    /**
     * Invalid or missing time_entry_id
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Time entry not found
     */
    404: string;
    /**
     * Time entry already stopped
     */
    409: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PatchWorkspaceStopTimeEntryHandlerError = PatchWorkspaceStopTimeEntryHandlerErrors[keyof PatchWorkspaceStopTimeEntryHandlerErrors];

export type PatchWorkspaceStopTimeEntryHandlerResponses = {
    /**
     * The stopped workspace TimeEntry.
     */
    200: ModelsTimeEntry;
};

export type PatchWorkspaceStopTimeEntryHandlerResponse = PatchWorkspaceStopTimeEntryHandlerResponses[keyof PatchWorkspaceStopTimeEntryHandlerResponses];

export type GetWorkspaceTimeEntryConstraintsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/time_entry_constraints';
};

export type GetWorkspaceTimeEntryConstraintsErrors = {
    /**
     * Workspace not found
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceTimeEntryConstraintsError = GetWorkspaceTimeEntryConstraintsErrors[keyof GetWorkspaceTimeEntryConstraintsErrors];

export type GetWorkspaceTimeEntryConstraintsResponses = {
    /**
     * Successful operation.
     */
    200: ModelsTimeEntryConstraints;
};

export type GetWorkspaceTimeEntryConstraintsResponse = GetWorkspaceTimeEntryConstraintsResponses[keyof GetWorkspaceTimeEntryConstraintsResponses];

export type PostWorkspaceTimeEntryConstraintsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/time_entry_constraints';
};

export type PostWorkspaceTimeEntryConstraintsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Admin permissions required</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceTimeEntryConstraintsError = PostWorkspaceTimeEntryConstraintsErrors[keyof PostWorkspaceTimeEntryConstraintsErrors];

export type PostWorkspaceTimeEntryConstraintsResponses = {
    /**
     * Successful operation.
     */
    200: WorkspacesJsonResult;
};

export type PostWorkspaceTimeEntryConstraintsResponse = PostWorkspaceTimeEntryConstraintsResponses[keyof PostWorkspaceTimeEntryConstraintsResponses];

export type GetWorkspaceTimeEntryInvitationsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/time_entry_invitations';
};

export type GetWorkspaceTimeEntryInvitationsErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceTimeEntryInvitationsError = GetWorkspaceTimeEntryInvitationsErrors[keyof GetWorkspaceTimeEntryInvitationsErrors];

export type GetWorkspaceTimeEntryInvitationsResponses = {
    /**
     * Returns a list of time entry invitations.
     */
    200: Array<TimeentriesGetTimEntryInvitationsResponse>;
};

export type GetWorkspaceTimeEntryInvitationsResponse = GetWorkspaceTimeEntryInvitationsResponses[keyof GetWorkspaceTimeEntryInvitationsResponses];

export type PostWorkspaceTimeEntryInvitationActionData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the time entry invitation
         */
        time_entry_invitation_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/time_entry_invitations/{time_entry_invitation_id}/{action}';
};

export type PostWorkspaceTimeEntryInvitationActionErrors = {
    /**
     * Possible errors:<ul><li>invalid time_entry_invitation_id</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceTimeEntryInvitationActionError = PostWorkspaceTimeEntryInvitationActionErrors[keyof PostWorkspaceTimeEntryInvitationActionErrors];

export type PostWorkspaceTimeEntryInvitationActionResponses = {
    /**
     * Successful operation
     */
    204: string;
};

export type PostWorkspaceTimeEntryInvitationActionResponse = PostWorkspaceTimeEntryInvitationActionResponses[keyof PostWorkspaceTimeEntryInvitationActionResponses];

export type GetTimesheetSetupsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: {
        /**
         * Numeric ID of the members, comma-separated
         */
        member_ids?: number;
        /**
         * Numeric ID of the approvers, comma-separated
         */
        approver_ids?: number;
        /**
         * Field used for sorting, default start_date.
         */
        sort_field?: string;
        /**
         * Sort order.
         */
        sort_order?: string;
    };
    url: '/workspaces/{workspace_id}/timesheet_setups';
};

export type GetTimesheetSetupsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid user ID</li><li>User not in workspace</li></ul>
     */
    400: string;
    /**
     * Approvals are a premium feature
     */
    402: string;
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetTimesheetSetupsError = GetTimesheetSetupsErrors[keyof GetTimesheetSetupsErrors];

export type GetTimesheetSetupsResponses = {
    /**
     * Successful operation
     */
    200: TimesheetsetupsGetPaginatedResponse;
};

export type GetTimesheetSetupsResponse = GetTimesheetSetupsResponses[keyof GetTimesheetSetupsResponses];

export type PostTimesheetSetupsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/timesheet_setups';
};

export type PostTimesheetSetupsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid user ID</li><li>Too many user IDs</li><li>Invalid date</li><li>Invalid periodicity</li><li>User not in workspace</li><li>User is not an admin in the workspace</li><li>Approver cannot be member</li><li>Member already has a timesheet setup</li></ul>
     */
    400: string;
    /**
     * Approvals are a premium feature
     */
    402: string;
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostTimesheetSetupsError = PostTimesheetSetupsErrors[keyof PostTimesheetSetupsErrors];

export type PostTimesheetSetupsResponses = {
    /**
     * Successful operation
     */
    200: Array<TimesheetsetupsApiTimesheetSetup>;
};

export type PostTimesheetSetupsResponse = PostTimesheetSetupsResponses[keyof PostTimesheetSetupsResponses];

export type DeleteTimesheetSetupsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the timesheet setup
         */
        setup_id?: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/timesheet_setups/{setup_id}';
};

export type DeleteTimesheetSetupsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid setup ID</li><li>Failed to delete timesheet setup, member has approved, rejected or submitted timesheets</li></ul>
     */
    400: string;
    /**
     * Approvals are a premium feature
     */
    402: string;
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteTimesheetSetupsError = DeleteTimesheetSetupsErrors[keyof DeleteTimesheetSetupsErrors];

export type DeleteTimesheetSetupsResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type DeleteTimesheetSetupsResponse = DeleteTimesheetSetupsResponses[keyof DeleteTimesheetSetupsResponses];

export type PutTimesheetSetupsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the timesheet setup
         */
        setup_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/timesheet_setups/{setup_id}';
};

export type PutTimesheetSetupsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid user ID</li><li>Invalid date</li><li>User is not an admin in the workspace</li><li>End date must respect periodicity</li><li>Member already has a timesheet setup</li></ul>
     */
    400: string;
    /**
     * Approvals are a premium feature
     */
    402: string;
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Timesheet setup was not found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutTimesheetSetupsError = PutTimesheetSetupsErrors[keyof PutTimesheetSetupsErrors];

export type PutTimesheetSetupsResponses = {
    /**
     * Successful operation
     */
    200: TimesheetsetupsApiTimesheetSetup;
};

export type PutTimesheetSetupsResponse = PutTimesheetSetupsResponses[keyof PutTimesheetSetupsResponses];

export type GetWorkspaceTimesheetsHandlerData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: {
        /**
         * Numeric ID of the members, comma-separated
         */
        member_ids?: number;
        /**
         * Numeric ID of the approvers, comma-separated
         */
        approver_ids?: number;
        /**
         * Numeric ID for timesheet setup, comma-separated.
         */
        timesheet_setup_ids?: number;
        /**
         * Timesheet status, comma-separated.
         */
        statuses?: number;
        /**
         * Timesheets starting before this date (YYYY-MM-DD).
         */
        before?: number;
        /**
         * Timesheets starting after this date (YYYY-MM-DD).
         */
        after?: number;
        /**
         * Page number, default 1.
         */
        page?: number;
        /**
         * Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000.
         */
        per_page?: number;
        /**
         * Field used for sorting, default start_date.
         */
        sort_field?: string;
        /**
         * Sort order.
         */
        sort_order?: string;
    };
    url: '/workspaces/{workspace_id}/timesheets';
};

export type GetWorkspaceTimesheetsHandlerErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid ID</li><li>Invalid date</li><li>Invalid status</li></ul>
     */
    400: string;
    /**
     * Approvals are a premium feature
     */
    402: string;
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceTimesheetsHandlerError = GetWorkspaceTimesheetsHandlerErrors[keyof GetWorkspaceTimesheetsHandlerErrors];

export type GetWorkspaceTimesheetsHandlerResponses = {
    /**
     * Successful operation.
     */
    200: Array<TimesheetsGetPaginatedResponse>;
};

export type GetWorkspaceTimesheetsHandlerResponse = GetWorkspaceTimesheetsHandlerResponses[keyof GetWorkspaceTimesheetsHandlerResponses];

export type PutWorkspaceTimesheetsData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/timesheets';
};

export type PutWorkspaceTimesheetsErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid ID</li><li>Invalid date</li><li>Invalid status</li><li>Invalid status for rejection comment</li><li>Invalid timesheet transition</li></ul>
     */
    400: string;
    /**
     * Approvals are a premium feature
     */
    402: string;
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspaceTimesheetsError = PutWorkspaceTimesheetsErrors[keyof PutWorkspaceTimesheetsErrors];

export type PutWorkspaceTimesheetsResponses = {
    /**
     * Successful operation.
     */
    200: TimesheetsApiTimesheet;
};

export type PutWorkspaceTimesheetsResponse = PutWorkspaceTimesheetsResponses[keyof PutWorkspaceTimesheetsResponses];

export type GetWorkspaceTimesheetHoursHandlerData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/timesheets/hours';
};

export type GetWorkspaceTimesheetHoursHandlerErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid ID</li><li>Invalid date</li></ul>
     */
    400: string;
    /**
     * Approvals are a premium feature
     */
    402: string;
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceTimesheetHoursHandlerError = GetWorkspaceTimesheetHoursHandlerErrors[keyof GetWorkspaceTimesheetHoursHandlerErrors];

export type GetWorkspaceTimesheetHoursHandlerResponses = {
    /**
     * Successful operation.
     */
    200: Array<TimesheetsTimesheetHoursResponse>;
};

export type GetWorkspaceTimesheetHoursHandlerResponse = GetWorkspaceTimesheetHoursHandlerResponses[keyof GetWorkspaceTimesheetHoursHandlerResponses];

export type PutWorkspaceTimesheetData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the timesheet setup.
         */
        setup_id: number;
        /**
         * Start date (YYYY-MM-DD) of the timesheet.
         */
        start_date: string;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}';
};

export type PutWorkspaceTimesheetErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid ID</li><li>Invalid date</li><li>Invalid status</li><li>Invalid status for rejection comment</li><li>Invalid timesheet transition</li></ul>
     */
    400: string;
    /**
     * Approvals are a premium feature
     */
    402: string;
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspaceTimesheetError = PutWorkspaceTimesheetErrors[keyof PutWorkspaceTimesheetErrors];

export type PutWorkspaceTimesheetResponses = {
    /**
     * Successful operation.
     */
    200: TimesheetsApiTimesheet;
};

export type PutWorkspaceTimesheetResponse = PutWorkspaceTimesheetResponses[keyof PutWorkspaceTimesheetResponses];

export type GetWorkspaceTimesheetTimeEntriesHandlerData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the timesheet setup.
         */
        setup_id: number;
        /**
         * Start date (YYYY-MM-DD) of the timesheet.
         */
        start_date: string;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}/time_entries';
};

export type GetWorkspaceTimesheetTimeEntriesHandlerErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>Invalid ID</li><li>Invalid date</li></ul>
     */
    400: string;
    /**
     * Approvals are a premium feature
     */
    402: string;
    /**
     * User does not have access to this resource
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceTimesheetTimeEntriesHandlerError = GetWorkspaceTimesheetTimeEntriesHandlerErrors[keyof GetWorkspaceTimesheetTimeEntriesHandlerErrors];

export type GetWorkspaceTimesheetTimeEntriesHandlerResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsTimeEntry>;
};

export type GetWorkspaceTimesheetTimeEntriesHandlerResponse = GetWorkspaceTimesheetTimeEntriesHandlerResponses[keyof GetWorkspaceTimesheetTimeEntriesHandlerResponses];

export type GetWorkspaceTrackRemindersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/track_reminders';
};

export type GetWorkspaceTrackRemindersErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceTrackRemindersError = GetWorkspaceTrackRemindersErrors[keyof GetWorkspaceTrackRemindersErrors];

export type GetWorkspaceTrackRemindersResponses = {
    /**
     * Returns a list of track reminders.
     */
    200: Array<ModelsTrackReminder>;
};

export type GetWorkspaceTrackRemindersResponse = GetWorkspaceTrackRemindersResponses[keyof GetWorkspaceTrackRemindersResponses];

export type PostWorkspaceTrackRemindersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/track_reminders';
};

export type PostWorkspaceTrackRemindersErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceTrackRemindersError = PostWorkspaceTrackRemindersErrors[keyof PostWorkspaceTrackRemindersErrors];

export type PostWorkspaceTrackRemindersResponses = {
    /**
     * Creates a workspace tracking reminder.
     */
    200: ModelsTrackReminder;
};

export type PostWorkspaceTrackRemindersResponse = PostWorkspaceTrackRemindersResponses[keyof PostWorkspaceTrackRemindersResponses];

export type DeleteWorkspaceTrackReminderData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Reminder ID.
         */
        reminder_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/track_reminders/{reminder_id}';
};

export type DeleteWorkspaceTrackReminderErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceTrackReminderError = DeleteWorkspaceTrackReminderErrors[keyof DeleteWorkspaceTrackReminderErrors];

export type DeleteWorkspaceTrackReminderResponses = {
    /**
     * Returns only status code.
     */
    200: string;
};

export type DeleteWorkspaceTrackReminderResponse = DeleteWorkspaceTrackReminderResponses[keyof DeleteWorkspaceTrackReminderResponses];

export type PutWorkspaceTrackReminderData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Reminder ID.
         */
        reminder_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/track_reminders/{reminder_id}';
};

export type PutWorkspaceTrackReminderErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspaceTrackReminderError = PutWorkspaceTrackReminderErrors[keyof PutWorkspaceTrackReminderErrors];

export type PutWorkspaceTrackReminderResponses = {
    /**
     * Updates a workspace tracking reminder.
     */
    200: ModelsTrackReminder;
};

export type PutWorkspaceTrackReminderResponse = PutWorkspaceTrackReminderResponses[keyof PutWorkspaceTrackReminderResponses];

export type UnsuspendWorkspaceData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/unsuspend';
};

export type UnsuspendWorkspaceResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type UnsuspendWorkspaceResponse = UnsuspendWorkspaceResponses[keyof UnsuspendWorkspaceResponses];

export type GetWorkspaceUsersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: {
        /**
         * Exclude deleted records in the response
         */
        exclude_deleted?: boolean;
    };
    url: '/workspaces/{workspace_id}/users';
};

export type GetWorkspaceUsersErrors = {
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceUsersError = GetWorkspaceUsersErrors[keyof GetWorkspaceUsersErrors];

export type GetWorkspaceUsersResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsSimpleWorkspaceUser>;
};

export type GetWorkspaceUsersResponse = GetWorkspaceUsersResponses[keyof GetWorkspaceUsersResponses];

export type PostWorkspaceUsersDataData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/users/data';
};

export type PostWorkspaceUsersDataErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>user_ids must not be empty</li><li>user_ids must not contain more than 150 elements</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PostWorkspaceUsersDataError = PostWorkspaceUsersDataErrors[keyof PostWorkspaceUsersDataErrors];

export type PostWorkspaceUsersDataResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsSimpleWorkspaceUser>;
};

export type PostWorkspaceUsersDataResponse = PostWorkspaceUsersDataResponses[keyof PostWorkspaceUsersDataResponses];

export type PutWorkspaceUsersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the user
         */
        user_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/users/{user_id}';
};

export type PutWorkspaceUsersErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Not Found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspaceUsersError = PutWorkspaceUsersErrors[keyof PutWorkspaceUsersErrors];

export type PutWorkspaceUsersResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PutWorkspaceUsersResponse = PutWorkspaceUsersResponses[keyof PutWorkspaceUsersResponses];

export type ValidateTaxData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/validate_vat';
};

export type ValidateTaxErrors = {
    /**
     * invalid '<p>Possible error messages:</p><ul><li>invalid 'workspace_id' passed in URL</li><li>invalid JSON body</li></ul>
     */
    400: unknown;
};

export type ValidateTaxResponses = {
    /**
     * Successful operation
     */
    200: string;
};

export type ValidateTaxResponse = ValidateTaxResponses[keyof ValidateTaxResponses];

export type GetWorkspaceWorkspaceUsersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
    };
    query: {
        /**
         * If true, includes indirect users (i.e. users assigned via group) to workspace user list
         */
        includeIndirect: string;
    };
    url: '/workspaces/{workspace_id}/workspace_users';
};

export type GetWorkspaceWorkspaceUsersErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found</li><li>User not found</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetWorkspaceWorkspaceUsersError = GetWorkspaceWorkspaceUsersErrors[keyof GetWorkspaceWorkspaceUsersErrors];

export type GetWorkspaceWorkspaceUsersResponses = {
    /**
     * Successful operation.
     */
    200: Array<ModelsWorkspaceUser>;
};

export type GetWorkspaceWorkspaceUsersResponse = GetWorkspaceWorkspaceUsersResponses[keyof GetWorkspaceWorkspaceUsersResponses];

export type DeleteWorkspaceUserData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace.
         */
        workspace_id: number;
        /**
         * Numeric ID of the workspace user.
         */
        workspace_user_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/workspace_users/{workspace_user_id}';
};

export type DeleteWorkspaceUserErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Workspace user is not found or accessible
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type DeleteWorkspaceUserError = DeleteWorkspaceUserErrors[keyof DeleteWorkspaceUserErrors];

export type DeleteWorkspaceUserResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutWorkspaceWorkspaceUsersData = {
    body?: never;
    path: {
        /**
         * Numeric ID of the workspace
         */
        workspace_id: number;
        /**
         * Numeric ID of the workspace user
         */
        workspace_user_id: number;
    };
    query?: never;
    url: '/workspaces/{workspace_id}/workspace_users/{workspace_user_id}';
};

export type PutWorkspaceWorkspaceUsersErrors = {
    /**
     * <p>Possible error messages:</p><ul><li>Workspace not found/accessible</li><li>User not found</li><li>Workspace user not found/accessible by user</li><li>Working hours must be positive or null</li><li>Invalid role_id.</li><li>Cannot use both admin flags and role_id.</li><li>User does not exist in the organization.</li><li>User does not exist in the workspace.</li></ul>
     */
    400: string;
    /**
     * User does not have access to this resource.
     */
    403: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type PutWorkspaceWorkspaceUsersError = PutWorkspaceWorkspaceUsersErrors[keyof PutWorkspaceWorkspaceUsersErrors];

export type PutWorkspaceWorkspaceUsersResponses = {
    /**
     * Successful operation.
     */
    200: string;
};

export type PutWorkspaceWorkspaceUsersResponse = PutWorkspaceWorkspaceUsersResponses[keyof PutWorkspaceWorkspaceUsersResponses];

export type ClientOptions = {
    baseUrl: 'localhost:8080/api/v9' | (string & {});
};