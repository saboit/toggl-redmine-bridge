// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetAuditLogsData, GetAuditLogsResponse, GetAuditLogsError, GetSaml2LoginUrlData, GetSaml2LoginUrlResponse, GetSaml2LoginUrlError, PostSaml2CallbackData, PostSaml2CallbackError, DeleteAvatarsData, DeleteAvatarsResponse, DeleteAvatarsError, PostAvatarsData, PostAvatarsResponse, PostAvatarsError, PostUseGravatarData, PostUseGravatarResponse, PostUseGravatarError, GetAllUsersData, GetAllUsersResponse, AddBackofficeUserData, AddBackofficeUserResponse, DeleteBackofficeUserData, DeleteBackofficeUserResponse, GetBackofficeUserData, GetBackofficeUserResponse, UpdateBackofficeUserData, UpdateBackofficeUserResponse, AddBetaFeatureData, AddBetaFeatureResponse, CreateRolloutJobData, CreateRolloutJobResponse, DeleteRolloutJobData, DeleteRolloutJobResponse, RollbackBetaFeatureRolloutData, RollbackBetaFeatureRolloutResponse, GetCountriesData, GetCountriesResponse, GetCountriesError, GetCountriesCountryIdSubdivisionsData, GetCountriesCountryIdSubdivisionsResponse, GetCountriesCountryIdSubdivisionsError, GetCurrenciesData, GetCurrenciesResponse, GetCurrenciesError, GetDesktopLoginData, GetDesktopLoginError, PostDesktopLoginTokensData, PostDesktopLoginTokensResponse, PostDesktopLoginTokensError, PostUnifiedFeedbackData, PostFeedbackWebData, GetIcalData, PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsData, PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsResponse, PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsError, PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionData, PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionResponse, PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionError, PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionData, PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionResponse, PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionError, PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionData, PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionResponse, PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionError, GetIntegrationsCalendarData, GetIntegrationsCalendarResponse, GetIntegrationsCalendarError, GetIntegrationsCalendarCalendarsSelectedData, GetIntegrationsCalendarCalendarsSelectedResponse, GetIntegrationsCalendarCalendarsSelectedError, GetIntegrationsCalendarCallbackByProviderData, GetIntegrationsCalendarCallbackByProviderError, GetIntegrationsCalendarEventsData, GetIntegrationsCalendarEventsResponse, GetIntegrationsCalendarEventsError, PostIntegrationsCalendarEventsDetailsSuggestionData, PostIntegrationsCalendarEventsDetailsSuggestionResponse, PostIntegrationsCalendarEventsDetailsSuggestionError, PostIntegrationsCalendarEventsUpdateData, PostIntegrationsCalendarEventsUpdateResponse, PostIntegrationsCalendarEventsUpdateError, GetIntegrationsCalendarEventsByEventIdDetailsSuggestionData, GetIntegrationsCalendarEventsByEventIdDetailsSuggestionResponse, GetIntegrationsCalendarEventsByEventIdDetailsSuggestionError, GetIntegrationsCalendarSetupData, GetIntegrationsCalendarSetupError, DeleteIntegrationsCalendarByIntegrationIdData, DeleteIntegrationsCalendarByIntegrationIdResponse, DeleteIntegrationsCalendarByIntegrationIdError, PutIntegrationsCalendarByIntegrationIdData, PutIntegrationsCalendarByIntegrationIdResponse, PutIntegrationsCalendarByIntegrationIdError, GetIntegrationsCalendarByIntegrationIdCalendarsData, GetIntegrationsCalendarByIntegrationIdCalendarsResponse, GetIntegrationsCalendarByIntegrationIdCalendarsError, PostIntegrationsCalendarByIntegrationIdCalendarsUpdateData, PostIntegrationsCalendarByIntegrationIdCalendarsUpdateResponse, PostIntegrationsCalendarByIntegrationIdCalendarsUpdateError, PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdData, PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdResponse, PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdError, GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsData, GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsResponse, GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsError, GetInvitationsData, GetInvitationsResponse, GetInvitationsError, GetKeysData, GetKeysResponse, GetKeysError, GetMeData, GetMeResponse, GetMeError, PutMeData, PutMeResponse, PutMeError, PostMeAcceptTosData, PostMeAcceptTosResponse, PostMeAcceptTosError, GetClientsData, GetClientsResponse, GetClientsError, PostCloseAccountData, PostCloseAccountResponse, PostCloseAccountError, PostMeDisableProductEmailsData, PostMeDisableProductEmailsResponse, PostMeDisableProductEmailsError, PostMeDisableWeeklyReportData, PostMeDisableWeeklyReportResponse, PostMeDisableWeeklyReportError, PostEnableSsoData, PostEnableSsoResponse, PostEnableSsoError, GetMeExportData, GetMeExportResponse, GetMeExportError, PostMeExportData, PostMeExportResponse, PostMeExportError, GetMeExportDataUuidZipData, GetMeExportDataUuidZipResponse, GetMeExportDataUuidZipError, GetMyFavoritesData, GetMyFavoritesResponse, GetMyFavoritesError, CreateMyFavoriteData, CreateMyFavoriteResponse, CreateMyFavoriteError, UpdateMyFavoritesData, UpdateMyFavoritesResponse, UpdateMyFavoritesError, PostMyFavoritesSuggestionsData, PostMyFavoritesSuggestionsResponse, PostMyFavoritesSuggestionsError, DeleteMyFavoriteData, DeleteMyFavoriteError, GetMeFeaturesData, GetMeFeaturesResponse, GetMeFeaturesError, GetMeFlagsData, GetMeFlagsResponse, GetMeFlagsError, PostMeFlagsData, PostMeFlagsResponse, PostMeFlagsError, GetMeLocationData, GetMeLocationResponse, GetMeLocationError, GetMeLoggedData, GetMeLoggedError, GetOrganizationsData, GetOrganizationsResponse, GetOrganizationsError, GetPreferencesData, GetPreferencesResponse, GetPreferencesError, PostPreferencesData, PostPreferencesResponse, PostPreferencesError, GetPreferencesClientData, GetPreferencesClientResponse, GetPreferencesClientError, PostPreferencesClientData, PostPreferencesClientResponse, PostPreferencesClientError, GetMeProjectsData, GetMeProjectsResponse, GetMeProjectsError, GetMeProjectsPaginatedData, GetMeProjectsPaginatedResponse, GetMeProjectsPaginatedError, DeletePushServicesData, DeletePushServicesResponse, DeletePushServicesError, GetPushServicesData, GetPushServicesResponse, GetPushServicesError, PostPushServicesData, PostPushServicesResponse, PostPushServicesError, PostResetTokenData, PostResetTokenResponse, PostResetTokenError, GetTagsData, GetTagsResponse, GetTagsError, GetTasksData, GetTasksResponse, GetTasksError, GetMyTimeEntriesData, GetMyTimeEntriesResponse, GetMyTimeEntriesError, GetTimeEntriesChecklistData, GetTimeEntriesChecklistResponse, GetCurrentTimeEntryData, GetCurrentTimeEntryResponse, GetCurrentTimeEntryError, GetTimeEntryNotesBulkData, GetTimeEntryNotesBulkResponse, GetTimeEntryNotesBulkError, GetTimeEntryByIdData, GetTimeEntryByIdResponse, GetTimeEntryByIdError, DeleteTimeEntryNotesData, DeleteTimeEntryNotesResponse, DeleteTimeEntryNotesError, GetTimeEntryNotesByIdData, GetTimeEntryNotesByIdResponse, GetTimeEntryNotesByIdError, PutTimeEntryNotesData, PutTimeEntryNotesResponse, PutTimeEntryNotesError, PostMeTimeEntriesSharedWithData, PostMeTimeEntriesSharedWithResponse, PostMeTimeEntriesSharedWithError, GetMeTimesheetsData, GetMeTimesheetsResponse, GetMeTimesheetsError, GetMeTrackRemindersData, GetMeTrackRemindersResponse, GetMeTrackRemindersError, GetWebTimerData, GetWebTimerResponse, GetWebTimerError, GetWorkspacesData, GetWorkspacesResponse, GetWorkspacesError, PostMobileFeedbackData, PostMobileFeedbackResponse, PostMobileFeedbackError, GetAllWebappNotificationsData, GetAllWebappNotificationsResponse, PostWebappNotificationsData, PostWebappNotificationsResponse, GetWebappNotificationsData, GetWebappNotificationsResponse, OrganizationSearchData, OrganizationSearchResponse, PostOrganizationData, PostOrganizationResponse, PostOrganizationError, PostOrganizationAcceptInvitationData, PostOrganizationAcceptInvitationResponse, PostOrganizationAcceptInvitationError, PostRejectInvitationData, PostRejectInvitationResponse, PostRejectInvitationError, OrganizationGetSubscriptionBulkData, OrganizationGetSubscriptionBulkResponse, GetOrganizationData, GetOrganizationResponse, PutOrganizationData, PutOrganizationResponse, PutOrganizationError, OrganizationAddCommentData, OrganizationAddCommentResponse, OrganizationBlacklistData, OrganizationBlacklistResponse, OrganizationGetCachedSubscriptionData, OrganizationGetCachedSubscriptionResponse, OrganizationChangeEmailBlacklistingData, OrganizationChangeEmailBlacklistingResponse, GetOrganizationGroupsData, GetOrganizationGroupsResponse, GetOrganizationGroupsError, PostOrganizationGroupData, PostOrganizationGroupResponse, PostOrganizationGroupError, DeleteOrganizationGroupData, DeleteOrganizationGroupResponse, DeleteOrganizationGroupError, PatchOrganizationGroupData, PatchOrganizationGroupResponse, PatchOrganizationGroupError, PutOrganizationGroupData, PutOrganizationGroupResponse, PutOrganizationGroupError, PostOrganizationInvitationData, PostOrganizationInvitationResponse, PostOrganizationInvitationError, OrganizationDeleteInvitationData, OrganizationDeleteInvitationResponse, PutInvitationData, PutInvitationResponse, PutInvitationError, OrganizationGetInvoicePdfData, OrganizationGetInvoicePdfResponse, OrganizationGetInvoicePdfError, GetOrganizationInvoiceData, GetOrganizationInvoiceResponse, GetOrganizationInvoiceError, OrganizationMigrateData, OrganizationMigrateResponse, OrganizationOptionAddData, OrganizationOptionAddResponse, OrganizationOptionDeleteData, OrganizationOptionDeleteResponse, OrganizationRestoreUserData, OrganizationRestoreUserResponse, GetOrganizationOwnerData, GetOrganizationOwnerResponse, GetOrganizationOwnerError, GetOwnershipTransfersData, GetOwnershipTransfersResponse, GetOwnershipTransfersError, PostOwnershipTransferData, PostOwnershipTransferResponse, PostOwnershipTransferError, GetOwnershipTransferData, GetOwnershipTransferResponse, GetOwnershipTransferError, PostOwnershipTransferActionsData, PostOwnershipTransferActionsResponse, PostOwnershipTransferActionsError, GetOrganizationsPaymentsRecordsData, GetOrganizationsPaymentsRecordsResponse, GetOrganizationsPaymentsRecordsError, OrganizationCreatePaymentPdfData, OrganizationCreatePaymentPdfResponse, OrganizationCreatePaymentPdfError, GetOrganizationsPlansData, GetOrganizationsPlansResponse, GetOrganizationsPlansError, GetOrganizationsPlanData, GetOrganizationsPlanResponse, GetOrganizationsPlanError, OrganizationGetPurchaseOrderPdfData, OrganizationGetPurchaseOrderPdfResponse, OrganizationGetPurchaseOrderPdfError, OrganizationRestoreData, OrganizationRestoreResponse, GetOrganizationRolesData, GetOrganizationRolesResponse, GetOrganizationRolesError, GetOrganizationSegmentationData, GetOrganizationSegmentationResponse, PutOrganizationSegmentationData, PutOrganizationSegmentationResponse, DeleteOrganizationSubscriptionData, DeleteOrganizationSubscriptionResponse, DeleteOrganizationSubscriptionError, OrganizationGetSubscriptionData, OrganizationGetSubscriptionResponse, PostOrganizationSubscriptionData, PostOrganizationSubscriptionError, PutOrganizationSubscriptionData, PutOrganizationSubscriptionError, PostOrganizationSubscriptionCancellationFeedbackData, PostOrganizationSubscriptionCancellationFeedbackError, GetUnifiedCustomerData, GetUnifiedCustomerResponse, GetUnifiedCustomerError, PostUnifiedCustomerData, PostUnifiedCustomerResponse, PostUnifiedCustomerError, PutUnifiedCustomerData, PutUnifiedCustomerResponse, PutUnifiedCustomerError, PostOrganizationSubscriptionDiscountRequestData, PostOrganizationSubscriptionDiscountRequestResponse, PostOrganizationSubscriptionDiscountRequestError, GetFeatureUpsellMultiData, GetFeatureUpsellMultiResponse, GetFeatureUpsellMultiError, GetOrganizationInvoiceSummaryData, GetOrganizationInvoiceSummaryResponse, GetOrganizationInvoiceSummaryError, GetOrganizationSubscriptionPaymentFailedData, GetOrganizationSubscriptionPaymentFailedResponse, GetOrganizationSubscriptionPaymentFailedError, DeletePromotionCodeData, PostPromotionCodeData, GetOrganizationPurchaseOrderPdfData, GetOrganizationPurchaseOrderPdfResponse, GetOrganizationPurchaseOrderPdfError, PostReferralBonusData, CreateSetupIntentData, PostOrganizationSubscriptionTrialData, PostOrganizationSubscriptionTrialError, PostOrganizationSubscriptionUpgradeRequestData, PostOrganizationSubscriptionUpgradeRequestResponse, PostOrganizationSubscriptionUpgradeRequestError, OrganizationDeleteSubscriptionData, OrganizationDeleteSubscriptionResponse, OrganizationCreateCustomerData, OrganizationCreateCustomerResponse, OrganizationCancelForcedTrialData, OrganizationCancelForcedTrialResponse, OrganizationAddForcedTrialData, OrganizationAddForcedTrialResponse, OrganizationGetSubscriptionSeatsLogsData, OrganizationGetSubscriptionSeatsLogsResponse, OrganizationSyncSubscriptionData, OrganizationSyncSubscriptionResponse, OrganizationGetTrialData, OrganizationGetTrialResponse, OrganizationCancelTrialData, OrganizationCancelTrialResponse, OrganizationCreateTrialData, OrganizationCreateTrialResponse, OrganizationUnsuspendData, OrganizationUnsuspendResponse, GetOrganizationUsersData, GetOrganizationUsersResponse, GetOrganizationUsersError, PatchOrganizationUsersData, PatchOrganizationUsersResponse, PatchOrganizationUsersError, GetOrganizationUsersDetailedData, GetOrganizationUsersDetailedResponse, GetOrganizationUsersDetailedError, DeleteOrganizationUsersLeaveData, DeleteOrganizationUsersLeaveResponse, DeleteOrganizationUsersLeaveError, PutOrganizationUsersData, PutOrganizationUsersResponse, PutOrganizationUsersError, OrganizationValidateTaxData, OrganizationValidateTaxResponse, PostOrganizationWorkspacesData, PostOrganizationWorkspacesResponse, PostOrganizationWorkspacesError, GetOrganizationWorkspacesStatisticsData, GetOrganizationWorkspacesStatisticsResponse, GetOrganizationWorkspacesStatisticsError, PutOrganizationWorkspacesAssignmentsData, PutOrganizationWorkspacesAssignmentsResponse, PutOrganizationWorkspacesAssignmentsError, GetOrganizationWorkspacesGroupsData, GetOrganizationWorkspacesGroupsResponse, GetOrganizationWorkspacesGroupsError, GetOrganizationWorkspacesWorkspaceusersData, GetOrganizationWorkspacesWorkspaceusersResponse, GetOrganizationWorkspacesWorkspaceusersError, PatchOrganizationWorkspaceUsersData, PatchOrganizationWorkspaceUsersResponse, PatchOrganizationWorkspaceUsersError, GetPermissionsByProductIdData, GetPermissionsByProductIdResponse, GetPermissionsByProductIdError, PostReportsApiV3SharedByReportTokenData, PostReportsApiV3SharedByReportTokenResponse, PostReportsApiV3SharedByReportTokenError, PostReportsApiV3SharedByReportTokenCsvData, PostReportsApiV3SharedByReportTokenCsvResponse, PostReportsApiV3SharedByReportTokenCsvError, PostReportsApiV3SharedByReportTokenXlsxData, PostReportsApiV3SharedByReportTokenXlsxResponse, PostReportsApiV3SharedByReportTokenXlsxError, PostReportsApiV3SharedByReportTokenPdfData, PostReportsApiV3SharedByReportTokenPdfResponse, PostReportsApiV3SharedByReportTokenPdfError, PostReportsApiV3WorkspaceByWorkspaceIdComparativeData, PostReportsApiV3WorkspaceByWorkspaceIdComparativeResponse, PostReportsApiV3WorkspaceByWorkspaceIdComparativeError, PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsData, PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsResponse, PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsError, PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsData, PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsResponse, PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsError, PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersData, PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersResponse, PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersError, PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsData, PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsError, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsData, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsError, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersData, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersError, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsData, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsError, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusData, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusError, PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusData, PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusError, PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersData, PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersError, PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsData, PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsResponse, PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsError, PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryData, PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryResponse, PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryError, PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryData, PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryResponse, PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryError, PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsData, PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsError, PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsData, PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsError, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesData, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesError, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfData, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfError, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionData, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionError, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsData, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsError, PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersData, PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersError, PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesData, PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesResponse, PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesError, PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfData, PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfResponse, PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfError, PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionData, PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionResponse, PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionError, PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesData, PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesResponse, PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesError, PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvData, PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvResponse, PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvError, PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfData, PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfResponse, PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfError, PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksData, PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksResponse, PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksError, GetRolesByProductIdData, GetRolesByProductIdResponse, GetRolesByProductIdError, PostRolesByProductIdFindData, PostRolesByProductIdFindResponse, PostRolesByProductIdFindError, GetRolesByProductIdByOrganizationIdData, GetRolesByProductIdByOrganizationIdResponse, GetRolesByProductIdByOrganizationIdError, PostRolesByProductIdByOrganizationIdData, PostRolesByProductIdByOrganizationIdResponse, PostRolesByProductIdByOrganizationIdError, PostRolesByProductIdByOrganizationIdUsersData, PostRolesByProductIdByOrganizationIdUsersResponse, PostRolesByProductIdByOrganizationIdUsersError, DeleteRolesByProductIdByOrganizationIdByRoleIdData, DeleteRolesByProductIdByOrganizationIdByRoleIdResponse, DeleteRolesByProductIdByOrganizationIdByRoleIdError, GetRolesByProductIdByOrganizationIdByRoleIdData, GetRolesByProductIdByOrganizationIdByRoleIdResponse, GetRolesByProductIdByOrganizationIdByRoleIdError, PutRolesByProductIdByOrganizationIdByRoleIdData, PutRolesByProductIdByOrganizationIdByRoleIdResponse, PutRolesByProductIdByOrganizationIdByRoleIdError, PostRolesByProductIdByOrganizationIdByRoleIdDuplicateData, PostRolesByProductIdByOrganizationIdByRoleIdDuplicateResponse, PostRolesByProductIdByOrganizationIdByRoleIdDuplicateError, PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersData, PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersResponse, PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersError, PostSmailContactData, PostSmailContactResponse, PostSmailContactError, PostSmailDemoData, PostSmailDemoResponse, PostSmailDemoError, PostSmailMeetData, PostSmailMeetResponse, PostSmailMeetError, GetStatusData, GetStatusResponse, GetStatusError, GetAllPlansData, GetAllPlansResponse, GetAllPlansError, GetSyncServerMeGoalsData, GetSyncServerMeGoalsResponse, GetSyncServerMeGoalsError, DeleteTimelineData, DeleteTimelineError, GetTimelineData, GetTimelineResponse, GetTimelineError, PostTimelineData, PostTimelineResponse, PostTimelineError, GetTimezonesData, GetTimezonesResponse, GetTimezonesError, GetOffsetsData, GetOffsetsResponse, GetOffsetsError, PostUserRolesByProductIdData, PostUserRolesByProductIdResponse, PostUserRolesByProductIdError, SearchUserData, SearchUserResponse, PostUsersByProductIdRolesData, PostUsersByProductIdRolesResponse, PostUsersByProductIdRolesError, PostUsersByProductIdByOrganizationIdRolesData, PostUsersByProductIdByOrganizationIdRolesResponse, PostUsersByProductIdByOrganizationIdRolesError, GetUserData, GetUserResponse, UserDeleteTimelineDataData, UserDeleteTimelineDataResponse, GetUserServiceNotificationsData, GetUserServiceNotificationsResponse, UserUpdatePreferencesData, UserUpdatePreferencesResponse, UserRestoreData, UserRestoreResponse, GetUsersTimeEntriesData, GetUsersTimeEntriesResponse, WorkspaceUserRestoreData, WorkspaceUserRestoreResponse, GenerateAggregationsData, GenerateAggregationsResponse, GenerateAggregationsError, SearchWorkspaceData, SearchWorkspaceResponse, GetPublicSubscriptionPlansData, GetPublicSubscriptionPlansResponse, GetPublicSubscriptionPlansError, GetWorkspaceData, GetWorkspaceResponse, PutWorkspacesData, PutWorkspacesResponse, PutWorkspacesError, WorkspaceAddCommentData, WorkspaceAddCommentResponse, GetAlertsData, GetAlertsResponse, GetAlertsError, PostAlertsData, PostAlertsResponse, PostAlertsError, WorkspaceGetAlertLogData, WorkspaceGetAlertLogResponse, DeleteAlertsData, DeleteAlertsResponse, DeleteAlertsError, PutAlertsData, PutAlertsResponse, PutAlertsError, WorkspaceDeleteAlertLogData, WorkspaceDeleteAlertLogResponse, GetWorkspaceClientsData, GetWorkspaceClientsResponse, GetWorkspaceClientsError, PostWorkspaceClientsData, PostWorkspaceClientsResponse, PostWorkspaceClientsError, ArchiveClientsData, ArchiveClientsResponse, ArchiveClientsError, GetWorkspaceClientsDataData, GetWorkspaceClientsDataResponse, DeleteWorkspaceClientsData, DeleteWorkspaceClientsResponse, DeleteWorkspaceClientsError, DeleteWorkspaceClientData, DeleteWorkspaceClientResponse, DeleteWorkspaceClientError, GetWorkspaceClientData, GetWorkspaceClientResponse, GetWorkspaceClientError, PutWorkspaceClientsData, PutWorkspaceClientsResponse, PutWorkspaceClientsError, ArchiveClientData, ArchiveClientResponse, ArchiveClientError, RestoreClientData, RestoreClientResponse, RestoreClientError, GetWorkspaceCurrenciesData, GetWorkspaceCurrenciesResponse, GetWorkspaceCurrenciesError, GetWorkspaceAllActivitiesData, GetWorkspaceAllActivitiesResponse, GetWorkspaceAllActivitiesError, GetWorkspaceMostActiveData, GetWorkspaceMostActiveResponse, GetWorkspaceMostActiveError, GetWorkspaceTopActivityData, GetWorkspaceTopActivityResponse, GetWorkspaceTopActivityError, GetWorkspaceExportsData, GetWorkspaceExportsResponse, GetWorkspaceExportsError, PostWorkspaceExportsData, PostWorkspaceExportsResponse, PostWorkspaceExportsError, GetWorkspaceExportsDataUuidZipData, GetWorkspaceExportsDataUuidZipResponse, GetWorkspaceExportsDataUuidZipError, GetWorkspaceFavoritesData, GetWorkspaceFavoritesResponse, GetWorkspaceFavoritesError, CreateWorkspaceFavoriteData, CreateWorkspaceFavoriteResponse, CreateWorkspaceFavoriteError, UpdateWorkspaceFavoritesData, UpdateWorkspaceFavoritesResponse, UpdateWorkspaceFavoritesError, PostWorkspaceFavoritesSuggestionsData, PostWorkspaceFavoritesSuggestionsResponse, PostWorkspaceFavoritesSuggestionsError, DeleteWorkspaceFavoriteData, DeleteWorkspaceFavoriteError, GetWorkspacesByWorkspaceIdGoalsData, GetWorkspacesByWorkspaceIdGoalsResponse, GetWorkspacesByWorkspaceIdGoalsError, PostWorkspacesByWorkspaceIdGoalsData, PostWorkspacesByWorkspaceIdGoalsResponse, PostWorkspacesByWorkspaceIdGoalsError, DeleteWorkspacesByWorkspaceIdGoalsByGoalIdData, DeleteWorkspacesByWorkspaceIdGoalsByGoalIdError, GetWorkspacesByWorkspaceIdGoalsByGoalIdData, GetWorkspacesByWorkspaceIdGoalsByGoalIdResponse, GetWorkspacesByWorkspaceIdGoalsByGoalIdError, PutWorkspacesByWorkspaceIdGoalsByGoalIdData, PutWorkspacesByWorkspaceIdGoalsByGoalIdResponse, PutWorkspacesByWorkspaceIdGoalsByGoalIdError, GetWorkspaceGroupsData, GetWorkspaceGroupsResponse, GetWorkspaceGroupsError, PostWorkspaceGroupData, PostWorkspaceGroupResponse, PostWorkspaceGroupError, DeleteWorkspaceGroupData, DeleteWorkspaceGroupError, PutWorkspaceGroupData, PutWorkspaceGroupResponse, PutWorkspaceGroupError, PostWorkspaceIcalResetData, PostWorkspaceIcalResetResponse, PostWorkspaceIcalResetError, PostWorkspaceIcalToggleData, PostWorkspaceIcalToggleResponse, PostWorkspaceIcalToggleError, GetWorkspaceInvoicesData, GetWorkspaceInvoicesResponse, GetWorkspaceInvoicesError, PostWorkspaceUserInvoiceData, PostWorkspaceUserInvoiceResponse, PostWorkspaceUserInvoiceError, GetWorkspaceInvoiceData, GetWorkspaceInvoiceResponse, GetWorkspaceInvoiceError, DeleteWorkspaceInvoiceData, DeleteWorkspaceInvoiceResponse, DeleteWorkspaceInvoiceError, GetWorkspaceSsoData, GetWorkspaceSsoResponse, GetWorkspaceSsoError, DeleteWorkspaceLinkedSsoProfilesData, DeleteWorkspaceLinkedSsoProfilesResponse, DeleteWorkspaceLinkedSsoProfilesError, PutWorkspaceSsoData, PutWorkspaceSsoResponse, PutWorkspaceSsoError, DeleteWorkspaceLogoData, DeleteWorkspaceLogoResponse, DeleteWorkspaceLogoError, GetWorkspaceLogoData, GetWorkspaceLogoResponse, GetWorkspaceLogoError, PostWorkspaceLogoData, PostWorkspaceLogoResponse, PostWorkspaceLogoError, WorkspaceOptionAddData, WorkspaceOptionAddResponse, WorkspaceOptionDeleteData, WorkspaceOptionDeleteResponse, GetWorkspacePaymentReceiptsData, GetWorkspacePaymentReceiptsResponse, GetWorkspacePaymentReceiptsError, GetWorkspacePreferencesData, GetWorkspacePreferencesResponse, GetWorkspacePreferencesError, PostWorkspacePreferencesData, PostWorkspacePreferencesResponse, PostWorkspacePreferencesError, GetProjectGroupsData, GetProjectGroupsResponse, GetProjectGroupsError, PostProjectGroupData, PostProjectGroupResponse, PostProjectGroupError, DeleteProjectGroupData, DeleteProjectGroupResponse, DeleteProjectGroupError, GetWorkspaceProjectUsersData, GetWorkspaceProjectUsersResponse, GetWorkspaceProjectUsersError, PostWorkspaceProjectUsersData, PostWorkspaceProjectUsersResponse, PostWorkspaceProjectUsersError, PostWorkspaceProjectUsersPaginatedData, PostWorkspaceProjectUsersPaginatedResponse, PatchWorkspaceProjectUsersIdsData, PatchWorkspaceProjectUsersIdsResponse, PatchWorkspaceProjectUsersIdsError, DeleteWorkspaceProjectUsersData, DeleteWorkspaceProjectUsersResponse, DeleteWorkspaceProjectUsersError, PutWorkspaceProjectUsersData, PutWorkspaceProjectUsersResponse, PutWorkspaceProjectUsersError, GetProjectsData, GetProjectsResponse, GetProjectsError, PostWorkspaceProjectCreateData, PostWorkspaceProjectCreateResponse, PostWorkspaceProjectCreateError, PostWorkspacesByWorkspaceIdProjectsBillableAmountsData, PostWorkspacesByWorkspaceIdProjectsBillableAmountsResponse, PostWorkspacesByWorkspaceIdProjectsBillableAmountsError, WorkspaceProjectsTaskCountData, WorkspaceProjectsTaskCountResponse, WorkspaceProjectsTaskCountError, GetProjectsTemplatesData, GetProjectsTemplatesResponse, GetProjectsTemplatesError, PatchWorkspaceProjectsData, PatchWorkspaceProjectsResponse, PatchWorkspaceProjectsError, DeleteWorkspaceProjectData, DeleteWorkspaceProjectResponse, DeleteWorkspaceProjectError, GetWorkspacesByWorkspaceIdProjectsByProjectIdData, GetWorkspacesByWorkspaceIdProjectsByProjectIdResponse, GetWorkspacesByWorkspaceIdProjectsByProjectIdError, PutWorkspaceProjectData, PutWorkspaceProjectResponse, PutWorkspaceProjectError, GetWorkspaceProjectPeriodsData, GetWorkspaceProjectPeriodsResponse, GetWorkspaceProjectPeriodsError, PostPinnedProjectData, PostPinnedProjectError, GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsData, GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsResponse, GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsError, GetWorkspaceProjectTasksData, GetWorkspaceProjectTasksResponse, GetWorkspaceProjectTasksError, PostWorkspaceProjectTasksData, PostWorkspaceProjectTasksResponse, PostWorkspaceProjectTasksError, PatchWorkspaceProjectTasksData, PatchWorkspaceProjectTasksResponse, PatchWorkspaceProjectTasksError, DeleteWorkspaceProjectTaskData, DeleteWorkspaceProjectTaskResponse, DeleteWorkspaceProjectTaskError, GetWorkspaceProjectTaskData, GetWorkspaceProjectTaskResponse, GetWorkspaceProjectTaskError, PutWorkspaceProjectTaskData, PutWorkspaceProjectTaskResponse, PutWorkspaceProjectTaskError, CreateRateData, CreateRateError, GetRatesByLevelData, GetRatesByLevelResponse, GetRatesByLevelError, GetSharedReportData, GetSharedReportResponse, GetSharedReportError, PostSharedReportData, PostSharedReportResponse, PostSharedReportError, PutSharedReportData, PutSharedReportResponse, PutSharedReportError, BulkDeleteSavedReportResourceData, BulkDeleteSavedReportResourceResponse, BulkDeleteSavedReportResourceError, DeleteSavedReportResourceData, DeleteSavedReportResourceResponse, DeleteSavedReportResourceError, GetSavedReportResourceData, GetSavedReportResourceResponse, GetSavedReportResourceError, PutSavedReportResourceData, PutSavedReportResourceResponse, PutSavedReportResourceError, RestoreWorkspaceData, RestoreWorkspaceResponse, GetWorkspaceScheduledReportsData, GetWorkspaceScheduledReportsResponse, GetWorkspaceScheduledReportsError, PostWorkspaceScheduledReportsData, PostWorkspaceScheduledReportsResponse, PostWorkspaceScheduledReportsError, DeleteWorkspaceScheduledReportsData, DeleteWorkspaceScheduledReportsResponse, DeleteWorkspaceScheduledReportsError, GetWorkspaceStatisticsData, GetWorkspaceStatisticsResponse, GetWorkspaceStatisticsError, GetWorkspaceSubscriptionData, GetWorkspaceSubscriptionResponse, GetWorkspaceSubscriptionError, GetWorkspacePurchaseOrderPdfData, GetWorkspacePurchaseOrderPdfResponse, GetWorkspacePurchaseOrderPdfError, GetWorkspaceTagData, GetWorkspaceTagResponse, GetWorkspaceTagError, PatchWorkspaceTagsData, PatchWorkspaceTagsResponse, PatchWorkspaceTagsError, PostWorkspaceTagData, PostWorkspaceTagResponse, PostWorkspaceTagError, DeleteWorkspaceTagData, DeleteWorkspaceTagResponse, DeleteWorkspaceTagError, PutWorkspaceTagData, PutWorkspaceTagResponse, PutWorkspaceTagError, GetWorkspaceTasksData, GetWorkspaceTasksResponse, GetWorkspaceTasksError, GetWorkspaceTasksBasicData, GetWorkspaceTasksBasicResponse, GetWorkspaceTasksBasicError, GetWorkspaceTasksDataData, GetWorkspaceTasksDataResponse, PostWorkspaceTimeEntriesData, PostWorkspaceTimeEntriesResponse, PostWorkspaceTimeEntriesError, PatchTimeEntriesData, PatchTimeEntriesResponse, PatchTimeEntriesError, DeleteWorkspaceTimeEntriesData, DeleteWorkspaceTimeEntriesResponse, DeleteWorkspaceTimeEntriesError, PutWorkspaceTimeEntryHandlerData, PutWorkspaceTimeEntryHandlerResponse, PutWorkspaceTimeEntryHandlerError, PatchWorkspaceStopTimeEntryHandlerData, PatchWorkspaceStopTimeEntryHandlerResponse, PatchWorkspaceStopTimeEntryHandlerError, GetWorkspaceTimeEntryConstraintsData, GetWorkspaceTimeEntryConstraintsResponse, GetWorkspaceTimeEntryConstraintsError, PostWorkspaceTimeEntryConstraintsData, PostWorkspaceTimeEntryConstraintsResponse, PostWorkspaceTimeEntryConstraintsError, GetWorkspaceTimeEntryInvitationsData, GetWorkspaceTimeEntryInvitationsResponse, GetWorkspaceTimeEntryInvitationsError, PostWorkspaceTimeEntryInvitationActionData, PostWorkspaceTimeEntryInvitationActionResponse, PostWorkspaceTimeEntryInvitationActionError, GetTimesheetSetupsData, GetTimesheetSetupsResponse, GetTimesheetSetupsError, PostTimesheetSetupsData, PostTimesheetSetupsResponse, PostTimesheetSetupsError, DeleteTimesheetSetupsData, DeleteTimesheetSetupsResponse, DeleteTimesheetSetupsError, PutTimesheetSetupsData, PutTimesheetSetupsResponse, PutTimesheetSetupsError, GetWorkspaceTimesheetsHandlerData, GetWorkspaceTimesheetsHandlerResponse, GetWorkspaceTimesheetsHandlerError, PutWorkspaceTimesheetsData, PutWorkspaceTimesheetsResponse, PutWorkspaceTimesheetsError, GetWorkspaceTimesheetHoursHandlerData, GetWorkspaceTimesheetHoursHandlerResponse, GetWorkspaceTimesheetHoursHandlerError, PutWorkspaceTimesheetData, PutWorkspaceTimesheetResponse, PutWorkspaceTimesheetError, GetWorkspaceTimesheetTimeEntriesHandlerData, GetWorkspaceTimesheetTimeEntriesHandlerResponse, GetWorkspaceTimesheetTimeEntriesHandlerError, GetWorkspaceTrackRemindersData, GetWorkspaceTrackRemindersResponse, GetWorkspaceTrackRemindersError, PostWorkspaceTrackRemindersData, PostWorkspaceTrackRemindersResponse, PostWorkspaceTrackRemindersError, DeleteWorkspaceTrackReminderData, DeleteWorkspaceTrackReminderResponse, DeleteWorkspaceTrackReminderError, PutWorkspaceTrackReminderData, PutWorkspaceTrackReminderResponse, PutWorkspaceTrackReminderError, UnsuspendWorkspaceData, UnsuspendWorkspaceResponse, GetWorkspaceUsersData, GetWorkspaceUsersResponse, GetWorkspaceUsersError, PostWorkspaceUsersDataData, PostWorkspaceUsersDataResponse, PostWorkspaceUsersDataError, PutWorkspaceUsersData, PutWorkspaceUsersResponse, PutWorkspaceUsersError, ValidateTaxData, ValidateTaxResponse, GetWorkspaceWorkspaceUsersData, GetWorkspaceWorkspaceUsersResponse, GetWorkspaceWorkspaceUsersError, DeleteWorkspaceUserData, DeleteWorkspaceUserError, PutWorkspaceWorkspaceUsersData, PutWorkspaceWorkspaceUsersResponse, PutWorkspaceWorkspaceUsersError } from './types.gen.js';
import { client as _heyApiClient } from './client.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Fetch audit logs.
 * Returns a list of audit log events for the specified organization and time range.
 */
export const getAuditLogs = <ThrowOnError extends boolean = false>(options: Options<GetAuditLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAuditLogsResponse, GetAuditLogsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/audit_logs/{organization_id}/{from}/{to}',
        ...options
    });
};

/**
 * SAML2 Identity Provider URL
 * Returns the SSO URL given an email address for authenticating in an Identity Provider.
 */
export const getSaml2LoginUrl = <ThrowOnError extends boolean = false>(options: Options<GetSaml2LoginUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSaml2LoginUrlResponse, GetSaml2LoginUrlError, ThrowOnError>({
        url: '/auth/saml2/login',
        ...options
    });
};

/**
 * SAML2 Identity Provider Callback
 * Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP.
 */
export const postSaml2Callback = <ThrowOnError extends boolean = false>(options: Options<PostSaml2CallbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PostSaml2CallbackError, ThrowOnError>({
        url: '/auth/saml2/login/{workspace_id}',
        ...options
    });
};

/**
 * Avatars
 * Handles DELETE avatar requests.
 */
export const deleteAvatars = <ThrowOnError extends boolean = false>(options?: Options<DeleteAvatarsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteAvatarsResponse, DeleteAvatarsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/avatars',
        ...options
    });
};

/**
 * Avatars
 * Handles POST avatar requests.
 */
export const postAvatars = <ThrowOnError extends boolean = false>(options?: Options<PostAvatarsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAvatarsResponse, PostAvatarsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/avatars',
        ...options
    });
};

/**
 * UseGravatar
 * Change user avatar to gravatar.
 */
export const postUseGravatar = <ThrowOnError extends boolean = false>(options?: Options<PostUseGravatarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUseGravatarResponse, PostUseGravatarError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/avatars/use_gravatar',
        ...options
    });
};

/**
 * Returns all Backoffice users.
 * Returns all non-deleted Backoffice users.
 */
export const getAllUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/backoffice/users',
        ...options
    });
};

/**
 * Add new Backoffice user.
 * Add new Backoffice user.
 */
export const addBackofficeUser = <ThrowOnError extends boolean = false>(options: Options<AddBackofficeUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddBackofficeUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/backoffice/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a Backoffice user.
 * Delete a Backoffice user.
 */
export const deleteBackofficeUser = <ThrowOnError extends boolean = false>(options: Options<DeleteBackofficeUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBackofficeUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/backoffice/users/{user_id}',
        ...options
    });
};

/**
 * Get existing Backoffice user.
 * Get existing Backoffice user.
 */
export const getBackofficeUser = <ThrowOnError extends boolean = false>(options: Options<GetBackofficeUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBackofficeUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/backoffice/users/{user_id}',
        ...options
    });
};

/**
 * Update an existing Backoffice user data.
 * Update an existing Backoffice user data.
 */
export const updateBackofficeUser = <ThrowOnError extends boolean = false>(options: Options<UpdateBackofficeUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateBackofficeUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/backoffice/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Creates a new beta feature
 * Creates a new beta feature
 */
export const addBetaFeature = <ThrowOnError extends boolean = false>(options: Options<AddBetaFeatureData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddBetaFeatureResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/beta_features',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Creates rollout job
 * Creates rollout job
 */
export const createRolloutJob = <ThrowOnError extends boolean = false>(options: Options<CreateRolloutJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRolloutJobResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/beta_features/{beta_feature_id}/rollout/scheduled_job',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes rollout job
 * Delete rollout job
 */
export const deleteRolloutJob = <ThrowOnError extends boolean = false>(options: Options<DeleteRolloutJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRolloutJobResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/beta_features/{beta_feature_id}/rollout/scheduled_job/{scheduled_job_id}',
        ...options
    });
};

/**
 * Rolls back rollout job
 * Rolls back rollout job
 */
export const rollbackBetaFeatureRollout = <ThrowOnError extends boolean = false>(options: Options<RollbackBetaFeatureRolloutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RollbackBetaFeatureRolloutResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/beta_features/{beta_feature_id}/rollout/{rollout_id}/rollback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Countries
 * Returns a list of existing countries
 */
export const getCountries = <ThrowOnError extends boolean = false>(options?: Options<GetCountriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCountriesResponse, GetCountriesError, ThrowOnError>({
        url: '/countries',
        ...options
    });
};

/**
 * CountrySubdivisions
 * Returns a list of subdivisions for a specific country.
 */
export const getCountriesCountryIdSubdivisions = <ThrowOnError extends boolean = false>(options: Options<GetCountriesCountryIdSubdivisionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCountriesCountryIdSubdivisionsResponse, GetCountriesCountryIdSubdivisionsError, ThrowOnError>({
        url: '/countries/{country_id}/subdivisions',
        ...options
    });
};

/**
 * Currencies
 * Returns a list of available currencies.
 */
export const getCurrencies = <ThrowOnError extends boolean = false>(options?: Options<GetCurrenciesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrenciesResponse, GetCurrenciesError, ThrowOnError>({
        url: '/currencies',
        ...options
    });
};

/**
 * Get desktop login token
 * Store new desktop login token
 */
export const getDesktopLogin = <ThrowOnError extends boolean = false>(options?: Options<GetDesktopLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetDesktopLoginError, ThrowOnError>({
        url: '/desktop_login',
        ...options
    });
};

/**
 * Post desktop login token
 * Store new desktop login token
 */
export const postDesktopLoginTokens = <ThrowOnError extends boolean = false>(options?: Options<PostDesktopLoginTokensData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDesktopLoginTokensResponse, PostDesktopLoginTokensError, ThrowOnError>({
        url: '/desktop_login_tokens',
        ...options
    });
};

/**
 * Feedback
 * Send Feedback
 */
export const postUnifiedFeedback = <ThrowOnError extends boolean = false>(options?: Options<PostUnifiedFeedbackData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/feedback',
        ...options
    });
};

/**
 * FeedbackWeb
 * Send Feedback web.
 */
export const postFeedbackWeb = <ThrowOnError extends boolean = false>(options?: Options<PostFeedbackWebData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/feedback/web',
        ...options
    });
};

/**
 * Ical file
 * Returns ical file with TEs from last 14 days
 */
export const getIcal = <ThrowOnError extends boolean = false>(options?: Options<GetIcalData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/ical/workspace_user/{token}',
        ...options
    });
};

/**
 * Load projects' data trends
 * Returns the projects' data trends projects from a workspace.
 */
export const postInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjects = <ThrowOnError extends boolean = false>(options: Options<PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsResponse, PostInsightsApiV1WorkspaceByWorkspaceIdDataTrendsProjectsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/insights/api/v1/workspace/{workspace_id}/data_trends/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Export employee profitability insights
 * Downloads employee profitability insights in the specified format: csv or xlsx.
 */
export const postInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtension = <ThrowOnError extends boolean = false>(options: Options<PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionResponse, PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityEmployeesByExtensionError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/insights/api/v1/workspace/{workspace_id}/profitability/employees.{extension}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Export profitability project insights
 * Downloads profitability project insights in the specified format: csv or xlsx.
 */
export const postInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtension = <ThrowOnError extends boolean = false>(options: Options<PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionResponse, PostInsightsApiV1WorkspaceByWorkspaceIdProfitabilityProjectsByExtensionError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/insights/api/v1/workspace/{workspace_id}/profitability/projects.{extension}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Export projects data trends
 * Downloads projects data trends in the specified format: csv or xlsx.
 */
export const postInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtension = <ThrowOnError extends boolean = false>(options: Options<PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionResponse, PostInsightsApiV1WorkspaceByWorkspaceIdTrendsProjectsByExtensionError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/insights/api/v1/workspace/{workspace_id}/trends/projects.{extension}',
        ...options
    });
};

/**
 * Get all integrations a user has.
 * Get all integrations a user has. Each user may have at most one integration per provider.
 */
export const getIntegrationsCalendar = <ThrowOnError extends boolean = false>(options?: Options<GetIntegrationsCalendarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetIntegrationsCalendarResponse, GetIntegrationsCalendarError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar',
        ...options
    });
};

/**
 * Get all calendars for a given user.
 * Get all calendars for a given user that was previously saved in the database.
 */
export const getIntegrationsCalendarCalendarsSelected = <ThrowOnError extends boolean = false>(options?: Options<GetIntegrationsCalendarCalendarsSelectedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetIntegrationsCalendarCalendarsSelectedResponse, GetIntegrationsCalendarCalendarsSelectedError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/calendars/selected',
        ...options
    });
};

/**
 * Callback for provider OAuth setup.
 * Callback endpoint used only by the Calendar Service Provider, which fetches the code
 */
export const getIntegrationsCalendarCallbackByProvider = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationsCalendarCallbackByProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetIntegrationsCalendarCallbackByProviderError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/callback/{provider}',
        ...options
    });
};

/**
 * Get all events for the caller user.
 * Get all events from selected calendars for the caller user. This endpoint will only return events if events were fetched from provider before the request is made. Check which is the endpoint for the events.
 */
export const getIntegrationsCalendarEvents = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationsCalendarEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIntegrationsCalendarEventsResponse, GetIntegrationsCalendarEventsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/events',
        ...options
    });
};

/**
 * Get details suggestion for given events.
 * Given one or more event IDs, this endpoint responds with the most probable event details
 * (and its accuracy) to assign to the to-be-created time entry for each event ID.
 * This endpoint will only suggests time entries with description and project not empty, because it uses
 * the description to tell if the TE is similar and the project as the main detail to be suggested.
 *
 * If the description is equal, as well as all the other details, the accuracy will be 100%, in the case
 * the description is equal but the other details differs, the most frequent will be suggested and the
 * accuracy will be given based on the frequency. In the case there is no TE with the same description
 * the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the
 * similarity rating.
 *
 * This endpoint returns status 200 OK with only the successful suggestions. Any event ID that is invalid
 * or the user does not have access to will be ignored, as well as any event that has no available suggestion.
 */
export const postIntegrationsCalendarEventsDetailsSuggestion = <ThrowOnError extends boolean = false>(options: Options<PostIntegrationsCalendarEventsDetailsSuggestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostIntegrationsCalendarEventsDetailsSuggestionResponse, PostIntegrationsCalendarEventsDetailsSuggestionError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/events/details-suggestion',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update all events from selected calendars for a user.
 * Fetch all events from a user's selected calendars and save in database.
 */
export const postIntegrationsCalendarEventsUpdate = <ThrowOnError extends boolean = false>(options?: Options<PostIntegrationsCalendarEventsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostIntegrationsCalendarEventsUpdateResponse, PostIntegrationsCalendarEventsUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/events/update',
        ...options
    });
};

/**
 * Get details suggestion for a given event.
 * Given an event ID, this endpoint responds with the most probable event details (and the accuracy) to
 * assign to the to-be-created time entry.
 * This endpoint will only suggests time entries with description and project not empty, because it uses the
 * description to tell if the TE is similar and the project as the main detail to be suggested.
 *
 * If the description is equal, as well as all the other details, the accuracy will be 100%, in the case
 * the description is equal but the other details differs, the most frequent will be suggested and the
 * accuracy will be given based on the frequency. In the case there is no TE with the same description
 * the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the
 * similarity rating.
 *
 * This endpoint returns status 200 OK and a "null" string in case no suggestion was found.
 */
export const getIntegrationsCalendarEventsByEventIdDetailsSuggestion = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationsCalendarEventsByEventIdDetailsSuggestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIntegrationsCalendarEventsByEventIdDetailsSuggestionResponse, GetIntegrationsCalendarEventsByEventIdDetailsSuggestionError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/events/{event_id}/details-suggestion',
        ...options
    });
};

/**
 * Get URL for setting up a calendar integration with given provider.
 * Set up an integration with a given provider, returning a URL to the said provider in order to
 */
export const getIntegrationsCalendarSetup = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationsCalendarSetupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetIntegrationsCalendarSetupError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/setup',
        ...options
    });
};

/**
 * Delete a given integration.
 * Executes logic deletion of an integration.
 */
export const deleteIntegrationsCalendarByIntegrationId = <ThrowOnError extends boolean = false>(options: Options<DeleteIntegrationsCalendarByIntegrationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteIntegrationsCalendarByIntegrationIdResponse, DeleteIntegrationsCalendarByIntegrationIdError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/{integration_id}',
        ...options
    });
};

/**
 * Update a given integration.
 * Updates an integration properties.
 */
export const putIntegrationsCalendarByIntegrationId = <ThrowOnError extends boolean = false>(options: Options<PutIntegrationsCalendarByIntegrationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutIntegrationsCalendarByIntegrationIdResponse, PutIntegrationsCalendarByIntegrationIdError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/{integration_id}',
        ...options
    });
};

/**
 * Get all calendars for a given integration.
 * Get all calendars for a given integration that was previously saved in the database.
 */
export const getIntegrationsCalendarByIntegrationIdCalendars = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationsCalendarByIntegrationIdCalendarsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIntegrationsCalendarByIntegrationIdCalendarsResponse, GetIntegrationsCalendarByIntegrationIdCalendarsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/{integration_id}/calendars',
        ...options
    });
};

/**
 * Updates calendar data according to provider API.
 * This endpoint uses the passed integration to get a provider and update all the calendars from that
 */
export const postIntegrationsCalendarByIntegrationIdCalendarsUpdate = <ThrowOnError extends boolean = false>(options: Options<PostIntegrationsCalendarByIntegrationIdCalendarsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostIntegrationsCalendarByIntegrationIdCalendarsUpdateResponse, PostIntegrationsCalendarByIntegrationIdCalendarsUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/{integration_id}/calendars/update',
        ...options
    });
};

/**
 * Sets whether a calendar is or not selected by the user.
 * This endpoint is used to set updatable fields of a calendar like selected field.
 */
export const patchIntegrationsCalendarByIntegrationIdCalendarsByCalendarId = <ThrowOnError extends boolean = false>(options: Options<PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdResponse, PatchIntegrationsCalendarByIntegrationIdCalendarsByCalendarIdError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/{integration_id}/calendars/{calendar_id}',
        ...options
    });
};

/**
 * (DEPRECATED) Get all events for a given calendar in a given integration.
 * Get all events for a given calendar in a given integration.
 */
export const getIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEvents = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsResponse, GetIntegrationsCalendarByIntegrationIdCalendarsByIdCalendarEventsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/integrations/calendar/{integration_id}/calendars/{id_calendar}/events',
        ...options
    });
};

/**
 * Get an invitation
 * Returns an invitation data by code.
 */
export const getInvitations = <ThrowOnError extends boolean = false>(options: Options<GetInvitationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInvitationsResponse, GetInvitationsError, ThrowOnError>({
        url: '/invitations/{invitation_code}',
        ...options
    });
};

/**
 * get keys
 * Returns the current JWKS keyset used to sign JWT tokens.
 */
export const getKeys = <ThrowOnError extends boolean = false>(options?: Options<GetKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetKeysResponse, GetKeysError, ThrowOnError>({
        url: '/keys',
        ...options
    });
};

/**
 * Me
 * Returns details for the current user.
 */
export const getMe = <ThrowOnError extends boolean = false>(options?: Options<GetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeResponse, GetMeError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me',
        ...options
    });
};

/**
 * Me
 * Updates details for the current user.
 */
export const putMe = <ThrowOnError extends boolean = false>(options: Options<PutMeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMeResponse, PutMeError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * AcceptTOS
 * Accepts the last version of the Terms of Service for the current user.
 */
export const postMeAcceptTos = <ThrowOnError extends boolean = false>(options?: Options<PostMeAcceptTosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMeAcceptTosResponse, PostMeAcceptTosError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/accept_tos',
        ...options
    });
};

/**
 * Clients
 * Get Clients.
 */
export const getClients = <ThrowOnError extends boolean = false>(options?: Options<GetClientsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetClientsResponse, GetClientsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/clients',
        ...options
    });
};

/**
 * CloseAccount
 * Close Account
 */
export const postCloseAccount = <ThrowOnError extends boolean = false>(options?: Options<PostCloseAccountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostCloseAccountResponse, PostCloseAccountError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/close_account',
        ...options
    });
};

/**
 * Disable product emails
 * Disable product emails.
 */
export const postMeDisableProductEmails = <ThrowOnError extends boolean = false>(options: Options<PostMeDisableProductEmailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMeDisableProductEmailsResponse, PostMeDisableProductEmailsError, ThrowOnError>({
        url: '/me/disable_product_emails/{disable_code}',
        ...options
    });
};

/**
 * Disable weekly report
 * Disable weekly report.
 */
export const postMeDisableWeeklyReport = <ThrowOnError extends boolean = false>(options: Options<PostMeDisableWeeklyReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMeDisableWeeklyReportResponse, PostMeDisableWeeklyReportError, ThrowOnError>({
        url: '/me/disable_weekly_report/{weekly_report_code}',
        ...options
    });
};

/**
 * Confirm SSO enabling for user account
 * Confirm SSO enabling in existing Toggl account after successful SSO
 */
export const postEnableSso = <ThrowOnError extends boolean = false>(options?: Options<PostEnableSsoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostEnableSsoResponse, PostEnableSsoError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/enable_sso',
        ...options
    });
};

/**
 * Get a list of objects to be downloaded
 * List of objects to be downloaded for an user
 */
export const getMeExport = <ThrowOnError extends boolean = false>(options?: Options<GetMeExportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeExportResponse, GetMeExportError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/export',
        ...options
    });
};

/**
 * Post an object which data to be downloaded
 * An object which data to be downloaded for an user
 */
export const postMeExport = <ThrowOnError extends boolean = false>(options?: Options<PostMeExportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMeExportResponse, PostMeExportError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/export',
        ...options
    });
};

/**
 * Get the zip file with download requests
 * Get a zip file List of download requests from an user.
 */
export const getMeExportDataUuidZip = <ThrowOnError extends boolean = false>(options?: Options<GetMeExportDataUuidZipData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeExportDataUuidZipResponse, GetMeExportDataUuidZipError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/export/data/{uuid}.zip',
        ...options
    });
};

/**
 * Get a list of favorites
 * Gets all favorites for the requesting user
 */
export const getMyFavorites = <ThrowOnError extends boolean = false>(options?: Options<GetMyFavoritesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyFavoritesResponse, GetMyFavoritesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/favorites',
        ...options
    });
};

/**
 * Create a favorite
 * This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well
 * as either description or project (no favorite without both will be accepted). The user is also required,
 * but it already goes in the authentication.
 * Also, the user must have access to all resources being referenced in the favorite attributes, and these
 * resources should have valid relationships. For instance, if you want a favorite in a given workspace and
 * with some tags, the tags must belong to that workspace. In case of user having no access to an attribute,
 * a 403 status is returned, if the attributes don't relate correctly between themselves the status
 * returned will be 400.
 */
export const createMyFavorite = <ThrowOnError extends boolean = false>(options?: Options<CreateMyFavoriteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateMyFavoriteResponse, CreateMyFavoriteError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/favorites',
        ...options
    });
};

/**
 * Update an array of favorites
 * This endpoint allows updating an array of favorites. It follow all the requirements
 * and behavior from the [post] (Create Favorite) counterpart.
 */
export const updateMyFavorites = <ThrowOnError extends boolean = false>(options?: Options<UpdateMyFavoritesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateMyFavoritesResponse, UpdateMyFavoritesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/favorites',
        ...options
    });
};

/**
 * Generates and returns a list of suggested favorites.
 * It will create 3 favorites based on past user's TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won't be suggested favorites either.
 */
export const postMyFavoritesSuggestions = <ThrowOnError extends boolean = false>(options?: Options<PostMyFavoritesSuggestionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMyFavoritesSuggestionsResponse, PostMyFavoritesSuggestionsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/favorites/suggestions',
        ...options
    });
};

/**
 * Deletes a given favorite
 * Deletes a given favorite logically from database, as well as its tags.
 */
export const deleteMyFavorite = <ThrowOnError extends boolean = false>(options?: Options<DeleteMyFavoriteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteMyFavoriteError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/favorites/{favorite_id}',
        ...options
    });
};

/**
 * Features
 * Get features.
 */
export const getMeFeatures = <ThrowOnError extends boolean = false>(options?: Options<GetMeFeaturesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeFeaturesResponse, GetMeFeaturesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/features',
        ...options
    });
};

/**
 * Flags
 * Returns flags for the current user. They will be represented by an object with dynamic string keys, where the value can be of any type.
 */
export const getMeFlags = <ThrowOnError extends boolean = false>(options?: Options<GetMeFlagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeFlagsResponse, GetMeFlagsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/flags',
        ...options
    });
};

/**
 * Flags
 * Add flags for the current user. The current limits are 4 flags per request, 128 flags in total. Keys and values can be up to 32 and 64 characters, respectively.
 */
export const postMeFlags = <ThrowOnError extends boolean = false>(options?: Options<PostMeFlagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMeFlagsResponse, PostMeFlagsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/flags',
        ...options
    });
};

/**
 * User's last known location
 * Returns the client's IP-based location. If no data is present, empty response will be yielded.
 */
export const getMeLocation = <ThrowOnError extends boolean = false>(options?: Options<GetMeLocationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeLocationResponse, GetMeLocationError, ThrowOnError>({
        url: '/me/location',
        ...options
    });
};

/**
 * Logged
 * Used to check if authentication works.
 */
export const getMeLogged = <ThrowOnError extends boolean = false>(options?: Options<GetMeLoggedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetMeLoggedError, ThrowOnError>({
        url: '/me/logged',
        ...options
    });
};

/**
 * Organizations that a user is part of
 * Get all organizations a given user is part of.
 */
export const getOrganizations = <ThrowOnError extends boolean = false>(options?: Options<GetOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOrganizationsResponse, GetOrganizationsError, ThrowOnError>({
        url: '/me/organizations',
        ...options
    });
};

/**
 * Preferences for the current user
 * Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the `enabled` flag specifying if that feature should be enabled or disabled for the user.
 */
export const getPreferences = <ThrowOnError extends boolean = false>(options?: Options<GetPreferencesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPreferencesResponse, GetPreferencesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/preferences',
        ...options
    });
};

/**
 * Update the preferences for the current user
 * With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
 */
export const postPreferences = <ThrowOnError extends boolean = false>(options?: Options<PostPreferencesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPreferencesResponse, PostPreferencesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/preferences',
        ...options
    });
};

/**
 * Preferences for an specific client of the current user
 * Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the `enabled` flag specifying if that feature should be enabled or disabled for the user.
 */
export const getPreferencesClient = <ThrowOnError extends boolean = false>(options?: Options<GetPreferencesClientData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPreferencesClientResponse, GetPreferencesClientError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/preferences/{client}',
        ...options
    });
};

/**
 * Update the preferences for an specific client of the current user
 * With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
 */
export const postPreferencesClient = <ThrowOnError extends boolean = false>(options?: Options<PostPreferencesClientData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPreferencesClientResponse, PostPreferencesClientError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/preferences/{client}',
        ...options
    });
};

/**
 * Projects
 * Get projects
 */
export const getMeProjects = <ThrowOnError extends boolean = false>(options?: Options<GetMeProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeProjectsResponse, GetMeProjectsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/projects',
        ...options
    });
};

/**
 * ProjectsPaginated
 * Get paginated projects.
 */
export const getMeProjectsPaginated = <ThrowOnError extends boolean = false>(options?: Options<GetMeProjectsPaginatedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeProjectsPaginatedResponse, GetMeProjectsPaginatedError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/projects/paginated',
        ...options
    });
};

/**
 * PushServices
 * Unregister Firebase token for current user
 */
export const deletePushServices = <ThrowOnError extends boolean = false>(options?: Options<DeletePushServicesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeletePushServicesResponse, DeletePushServicesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/push_services',
        ...options
    });
};

/**
 * PushServices
 * Get list of firebase tokens registered for current user.
 */
export const getPushServices = <ThrowOnError extends boolean = false>(options?: Options<GetPushServicesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPushServicesResponse, GetPushServicesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/push_services',
        ...options
    });
};

/**
 * PushServices
 * Register Firebase token for current user
 */
export const postPushServices = <ThrowOnError extends boolean = false>(options?: Options<PostPushServicesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPushServicesResponse, PostPushServicesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/push_services',
        ...options
    });
};

/**
 * ResetToken
 * Resets API token for the current user.
 */
export const postResetToken = <ThrowOnError extends boolean = false>(options?: Options<PostResetTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostResetTokenResponse, PostResetTokenError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/reset_token',
        ...options
    });
};

/**
 * Tags
 * Returns tags for the current user.
 */
export const getTags = <ThrowOnError extends boolean = false>(options?: Options<GetTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTagsResponse, GetTagsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/tags',
        ...options
    });
};

/**
 * Tasks
 * Returns tasks from projects in which the user is participating.
 */
export const getTasks = <ThrowOnError extends boolean = false>(options?: Options<GetTasksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTasksResponse, GetTasksError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/tasks',
        ...options
    });
};

/**
 * TimeEntries
 * Lists latest time entries.
 */
export const getMyTimeEntries = <ThrowOnError extends boolean = false>(options?: Options<GetMyTimeEntriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyTimeEntriesResponse, GetMyTimeEntriesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/time_entries',
        ...options
    });
};

/**
 * TimeEntries
 * Check the needed time entries requirement to offer coupon to user
 */
export const getTimeEntriesChecklist = <ThrowOnError extends boolean = false>(options?: Options<GetTimeEntriesChecklistData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTimeEntriesChecklistResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/time_entries/checklist',
        ...options
    });
};

/**
 * Get current time entry
 * Load running time entry for user ID.
 */
export const getCurrentTimeEntry = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentTimeEntryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentTimeEntryResponse, GetCurrentTimeEntryError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/time_entries/current',
        ...options
    });
};

/**
 * Get a time entries' notes by ID.
 * Load time entry by ID that is accessible by the current user.
 */
export const getTimeEntryNotesBulk = <ThrowOnError extends boolean = false>(options: Options<GetTimeEntryNotesBulkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetTimeEntryNotesBulkResponse, GetTimeEntryNotesBulkError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/time_entries/notes',
        ...options
    });
};

/**
 * Get a time entry by ID.
 * Load time entry by ID that is accessible by the current user.
 */
export const getTimeEntryById = <ThrowOnError extends boolean = false>(options: Options<GetTimeEntryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTimeEntryByIdResponse, GetTimeEntryByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/time_entries/{time_entry_id}',
        ...options
    });
};

/**
 * delete a time entry note by ID.
 * Delete time entry notes by ID that is accessible by the current user.
 */
export const deleteTimeEntryNotes = <ThrowOnError extends boolean = false>(options: Options<DeleteTimeEntryNotesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTimeEntryNotesResponse, DeleteTimeEntryNotesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/time_entries/{time_entry_id}/notes',
        ...options
    });
};

/**
 * Get a time entries' notes by ID.
 * Load time entry by ID that is accessible by the current user.
 */
export const getTimeEntryNotesById = <ThrowOnError extends boolean = false>(options: Options<GetTimeEntryNotesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTimeEntryNotesByIdResponse, GetTimeEntryNotesByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/time_entries/{time_entry_id}/notes',
        ...options
    });
};

/**
 * Put a time entry notes by ID.
 * Load time entry notes by ID that is accessible by the current user.
 */
export const putTimeEntryNotes = <ThrowOnError extends boolean = false>(options: Options<PutTimeEntryNotesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTimeEntryNotesResponse, PutTimeEntryNotesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/time_entries/{time_entry_id}/notes',
        ...options
    });
};

/**
 * TimeEntries
 * Get the sharing details of the specified time entries in bulk
 */
export const postMeTimeEntriesSharedWith = <ThrowOnError extends boolean = false>(options?: Options<PostMeTimeEntriesSharedWithData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMeTimeEntriesSharedWithResponse, PostMeTimeEntriesSharedWithError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/time_entries_shared_with',
        ...options
    });
};

/**
 * User's Timesheets
 * Returns the timehseets for the current user.
 */
export const getMeTimesheets = <ThrowOnError extends boolean = false>(options?: Options<GetMeTimesheetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeTimesheetsResponse, GetMeTimesheetsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/timesheets',
        ...options
    });
};

/**
 * TrackReminders
 * Returns a list of track reminders.
 */
export const getMeTrackReminders = <ThrowOnError extends boolean = false>(options?: Options<GetMeTrackRemindersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeTrackRemindersResponse, GetMeTrackRemindersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/track_reminders',
        ...options
    });
};

/**
 * WebTimer
 * Get web timer.
 */
export const getWebTimer = <ThrowOnError extends boolean = false>(options?: Options<GetWebTimerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWebTimerResponse, GetWebTimerError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/web-timer',
        ...options
    });
};

/**
 * Workspaces
 * Lists workspaces for given user.
 */
export const getWorkspaces = <ThrowOnError extends boolean = false>(options?: Options<GetWorkspacesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkspacesResponse, GetWorkspacesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/me/workspaces',
        ...options
    });
};

/**
 * MobileFeedback
 * Send Mobile Feedback.
 */
export const postMobileFeedback = <ThrowOnError extends boolean = false>(options?: Options<PostMobileFeedbackData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMobileFeedbackResponse, PostMobileFeedbackError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mobile/feedback',
        ...options
    });
};

/**
 * Retrieve all webapp notifications created in BO.
 * Retrieves a summarized list of all the webapp notifications created in BO, with default paging of 50 per page.
 */
export const getAllWebappNotifications = <ThrowOnError extends boolean = false>(options?: Options<GetAllWebappNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllWebappNotificationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/notifications',
        ...options
    });
};

/**
 * Create webapp notification for users
 * Allows backoffice to create a shared notification to be sent to all, or targeted group of users. Will return immediately upon DB insertion, publishing happens asynchronously.
 */
export const postWebappNotifications = <ThrowOnError extends boolean = false>(options?: Options<PostWebappNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWebappNotificationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/notifications',
        ...options
    });
};

/**
 * Retrieve a single web app notification.
 * Retrieves all details for a webapp notifications created in BO, identified by the notification's id.
 */
export const getWebappNotifications = <ThrowOnError extends boolean = false>(options: Options<GetWebappNotificationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWebappNotificationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/notifications/{notification_id}',
        ...options
    });
};

/**
 * Organizations containing search term
 * Returns organization data containing the search term
 */
export const organizationSearch = <ThrowOnError extends boolean = false>(options?: Options<OrganizationSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OrganizationSearchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations',
        ...options
    });
};

/**
 * Creates a new organization
 * Creates a new organization with a single workspace and assigns current user as the organization owner
 */
export const postOrganization = <ThrowOnError extends boolean = false>(options?: Options<PostOrganizationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostOrganizationResponse, PostOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations',
        ...options
    });
};

/**
 * Accepts invitation
 * User connected with invitation is marked as joined, email is sent to the inviter.
 */
export const postOrganizationAcceptInvitation = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationAcceptInvitationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationAcceptInvitationResponse, PostOrganizationAcceptInvitationError, ThrowOnError>({
        url: '/organizations/invitations/{invitation_code}/accept',
        ...options
    });
};

/**
 * Rejects invitation
 * User connected with invitation is marked as deleted.
 */
export const postRejectInvitation = <ThrowOnError extends boolean = false>(options: Options<PostRejectInvitationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRejectInvitationResponse, PostRejectInvitationError, ThrowOnError>({
        url: '/organizations/invitations/{invitation_code}/reject',
        ...options
    });
};

/**
 * Get subscriptions for multiple organizations.
 * Get subscriptions for multiple organizations.
 */
export const organizationGetSubscriptionBulk = <ThrowOnError extends boolean = false>(options?: Options<OrganizationGetSubscriptionBulkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<OrganizationGetSubscriptionBulkResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/subscriptions/bulk_get',
        ...options
    });
};

/**
 * Organization data
 * Returns organization name and current pricing plan
 */
export const getOrganization = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}',
        ...options
    });
};

/**
 * Updates an existing organization
 * Updates an existing organization
 */
export const putOrganization = <ThrowOnError extends boolean = false>(options: Options<PutOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutOrganizationResponse, PutOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}',
        ...options
    });
};

/**
 * Add Organization comment
 * Adds comment to an organization.
 */
export const organizationAddComment = <ThrowOnError extends boolean = false>(options: Options<OrganizationAddCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationAddCommentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/add_comment',
        ...options
    });
};

/**
 * Blacklist or unblacklist an organization
 * Adds or removes the organization to/from blacklist.
 */
export const organizationBlacklist = <ThrowOnError extends boolean = false>(options: Options<OrganizationBlacklistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationBlacklistResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/blacklist',
        ...options
    });
};

/**
 * Returns the unified subscription for an organization.
 * Returns the unified subscription for an organization.
 */
export const organizationGetCachedSubscription = <ThrowOnError extends boolean = false>(options: Options<OrganizationGetCachedSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationGetCachedSubscriptionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/cached_subscription',
        ...options
    });
};

/**
 * Adds or removes an email from blacklist, depending on whether it was currently blacklisted.
 * Adds or removes an email from blacklist, depending on whether it was currently blacklisted.
 */
export const organizationChangeEmailBlacklisting = <ThrowOnError extends boolean = false>(options: Options<OrganizationChangeEmailBlacklistingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationChangeEmailBlacklistingResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/change_email_blacklisting',
        ...options
    });
};

/**
 * List of groups in organization with user and workspace assignments
 * Returns list of groups in organization based on set of url parameters.
 * List is sorted by name.
 */
export const getOrganizationGroups = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationGroupsResponse, GetOrganizationGroupsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/groups',
        ...options
    });
};

/**
 * Create group
 * Creates a group in the specified organization
 */
export const postOrganizationGroup = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationGroupResponse, PostOrganizationGroupError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/groups',
        ...options
    });
};

/**
 * Deletes group
 * Deletes a group from the specified organization
 */
export const deleteOrganizationGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrganizationGroupResponse, DeleteOrganizationGroupError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/groups/{group_id}',
        ...options
    });
};

/**
 * Patch group
 * Patches a group in the specified organization. Patches are applied individually.
 */
export const patchOrganizationGroup = <ThrowOnError extends boolean = false>(options: Options<PatchOrganizationGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchOrganizationGroupResponse, PatchOrganizationGroupError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/groups/{group_id}',
        ...options
    });
};

/**
 * Edit group
 * Edits a group in the specified organization
 */
export const putOrganizationGroup = <ThrowOnError extends boolean = false>(options: Options<PutOrganizationGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutOrganizationGroupResponse, PutOrganizationGroupError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/groups/{group_id}',
        ...options
    });
};

/**
 * Creates a new invitation for the user
 * Creates a new invitation for the user.
 */
export const postOrganizationInvitation = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationInvitationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationInvitationResponse, PostOrganizationInvitationError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/invitations',
        ...options
    });
};

/**
 * Delete given invitation for organization.
 * Delete given invitation for organization.
 */
export const organizationDeleteInvitation = <ThrowOnError extends boolean = false>(options: Options<OrganizationDeleteInvitationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationDeleteInvitationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/invitations/{invitation_id}',
        ...options
    });
};

/**
 * Resends user their invitation
 * Resend invitation email to user.
 */
export const putInvitation = <ThrowOnError extends boolean = false>(options: Options<PutInvitationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutInvitationResponse, PutInvitationError, ThrowOnError>({
        url: '/organizations/{organization_id}/invitations/{invitation_id}/resend',
        ...options
    });
};

/**
 * Creates invoice PDF for the given invoice ID.
 * Creates invoice PDF for the given invoice ID.
 */
export const organizationGetInvoicePdf = <ThrowOnError extends boolean = false>(options: Options<OrganizationGetInvoicePdfData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationGetInvoicePdfResponse, OrganizationGetInvoicePdfError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/invoices/{invoice_id}.pdf',
        ...options
    });
};

/**
 * InvoicePdf
 * Returns a Invoice document in PDF form.
 */
export const getOrganizationInvoice = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationInvoiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationInvoiceResponse, GetOrganizationInvoiceError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/invoices/{invoice_uid}.pdf',
        ...options
    });
};

/**
 * Migrate organization.
 * Migrate organization.
 */
export const organizationMigrate = <ThrowOnError extends boolean = false>(options: Options<OrganizationMigrateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationMigrateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/migrate',
        ...options
    });
};

/**
 * Add organization option.
 * Add organization option.
 */
export const organizationOptionAdd = <ThrowOnError extends boolean = false>(options: Options<OrganizationOptionAddData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationOptionAddResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/options',
        ...options
    });
};

/**
 * Delete organization option.
 * Delete organization option.
 */
export const organizationOptionDelete = <ThrowOnError extends boolean = false>(options: Options<OrganizationOptionDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationOptionDeleteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/options/{key}',
        ...options
    });
};

/**
 * Restore organization user.
 * Restore organization user.
 */
export const organizationRestoreUser = <ThrowOnError extends boolean = false>(options: Options<OrganizationRestoreUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationRestoreUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/organization_user/{organization_user_id}/restore',
        ...options
    });
};

/**
 * Get owner of the organization
 * Returns organization owner data.
 */
export const getOrganizationOwner = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationOwnerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationOwnerResponse, GetOrganizationOwnerError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/owner',
        ...options
    });
};

/**
 * Returns list of organization transfers made in the organization
 */
export const getOwnershipTransfers = <ThrowOnError extends boolean = false>(options: Options<GetOwnershipTransfersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOwnershipTransfersResponse, GetOwnershipTransfersError, ThrowOnError>({
        url: '/organizations/{organization_id}/owner/transfer',
        ...options
    });
};

/**
 * Creates new ownership transfer process
 * Return the ownership transfer for a given organization.
 */
export const postOwnershipTransfer = <ThrowOnError extends boolean = false>(options: Options<PostOwnershipTransferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOwnershipTransferResponse, PostOwnershipTransferError, ThrowOnError>({
        url: '/organizations/{organization_id}/owner/transfer',
        ...options
    });
};

/**
 * Returns single organization transfer in the organization
 */
export const getOwnershipTransfer = <ThrowOnError extends boolean = false>(options: Options<GetOwnershipTransferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOwnershipTransferResponse, GetOwnershipTransferError, ThrowOnError>({
        url: '/organizations/{organization_id}/owner/transfer/{transfer_id}',
        ...options
    });
};

/**
 * Updates transfer process and emails stakeholders
 * Return the ownership transfer for a given organization and emails stakeholders.
 */
export const postOwnershipTransferActions = <ThrowOnError extends boolean = false>(options: Options<PostOwnershipTransferActionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOwnershipTransferActionsResponse, PostOwnershipTransferActionsError, ThrowOnError>({
        url: '/organizations/{organization_id}/owner/transfer/{transfer_id}/{action}',
        ...options
    });
};

/**
 * OrganizationsPaymentRecords
 * Returns paid invoices
 */
export const getOrganizationsPaymentsRecords = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsPaymentsRecordsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsPaymentsRecordsResponse, GetOrganizationsPaymentsRecordsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/payment_records',
        ...options
    });
};

/**
 * Export a payment receipt in PDF format.
 * Export a payment receipt in PDF format.
 */
export const organizationCreatePaymentPdf = <ThrowOnError extends boolean = false>(options: Options<OrganizationCreatePaymentPdfData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationCreatePaymentPdfResponse, OrganizationCreatePaymentPdfError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/payments/{payment_id}.pdf',
        ...options
    });
};

/**
 * OrganizationsPlans
 * Returns pricing plans for an organization
 */
export const getOrganizationsPlans = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsPlansData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsPlansResponse, GetOrganizationsPlansError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/plans',
        ...options
    });
};

/**
 * OrganizationsPlan
 * Returns pricing plan for an organization identified by plan_id
 */
export const getOrganizationsPlan = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsPlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsPlanResponse, GetOrganizationsPlanError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/plans/{plan_id}',
        ...options
    });
};

/**
 * Get organization purchase order in PDF form.
 * Get organization purchase order in PDF form.
 */
export const organizationGetPurchaseOrderPdf = <ThrowOnError extends boolean = false>(options: Options<OrganizationGetPurchaseOrderPdfData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationGetPurchaseOrderPdfResponse, OrganizationGetPurchaseOrderPdfError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/purchase_orders/{purchase_order_uid}.pdf',
        ...options
    });
};

/**
 * Restore closed organization.
 * Restore closed organization.
 */
export const organizationRestore = <ThrowOnError extends boolean = false>(options: Options<OrganizationRestoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationRestoreResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/restore',
        ...options
    });
};

/**
 * Organization roles.
 * Returns a list of organization specific and global roles.
 */
export const getOrganizationRoles = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationRolesResponse, GetOrganizationRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/roles',
        ...options
    });
};

/**
 * Organization segmentation data
 * Returns organization segmentation information
 */
export const getOrganizationSegmentation = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationSegmentationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationSegmentationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/segmentation',
        ...options
    });
};

/**
 * Organization segmentation data
 * Save organization segmentation information
 */
export const putOrganizationSegmentation = <ThrowOnError extends boolean = false>(options: Options<PutOrganizationSegmentationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutOrganizationSegmentationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/segmentation',
        ...options
    });
};

/**
 * Subscription
 * Cancels an existing subscription.
 */
export const deleteOrganizationSubscription = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrganizationSubscriptionResponse, DeleteOrganizationSubscriptionError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription',
        ...options
    });
};

/**
 * Retrieve active organization subscription.
 * Retrieve active organization subscription.
 */
export const organizationGetSubscription = <ThrowOnError extends boolean = false>(options: Options<OrganizationGetSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationGetSubscriptionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription',
        ...options
    });
};

/**
 * Subscription
 * Allows to create a new unified subscription for an organization.
 */
export const postOrganizationSubscription = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PostOrganizationSubscriptionError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription',
        ...options
    });
};

/**
 * Subscription
 * Allows to update existing unified subscription for an organization.
 */
export const putOrganizationSubscription = <ThrowOnError extends boolean = false>(options: Options<PutOrganizationSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, PutOrganizationSubscriptionError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription',
        ...options
    });
};

/**
 * Subscription cancellation feedback
 * Allows to create a cancellation feedback for an organization subscription.
 */
export const postOrganizationSubscriptionCancellationFeedback = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationSubscriptionCancellationFeedbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PostOrganizationSubscriptionCancellationFeedbackError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/cancellation_feedback',
        ...options
    });
};

/**
 * Retrieve unified customer
 * Retrieve unified customer belonging to the organization.
 */
export const getUnifiedCustomer = <ThrowOnError extends boolean = false>(options: Options<GetUnifiedCustomerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUnifiedCustomerResponse, GetUnifiedCustomerError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/customer',
        ...options
    });
};

/**
 * Create unified customer
 * Creates unified customer for organization.
 */
export const postUnifiedCustomer = <ThrowOnError extends boolean = false>(options: Options<PostUnifiedCustomerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUnifiedCustomerResponse, PostUnifiedCustomerError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/customer',
        ...options
    });
};

/**
 * Update unified customer
 * Allows to update unified customer data.
 * Customer name, email, country & postal code are mandatory fields.
 * Optional fields will be cleared if they don't have a value.
 */
export const putUnifiedCustomer = <ThrowOnError extends boolean = false>(options: Options<PutUnifiedCustomerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUnifiedCustomerResponse, PutUnifiedCustomerError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/customer',
        ...options
    });
};

/**
 * Discount request
 * Endpoint for client's feedback when canceling plan. It triggers an e-mail to support with feedbacks and discount request.
 */
export const postOrganizationSubscriptionDiscountRequest = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationSubscriptionDiscountRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationSubscriptionDiscountRequestResponse, PostOrganizationSubscriptionDiscountRequestError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/discount_request',
        ...options
    });
};

/**
 * Get feature upsell for multiple organizations
 * Gets feature upsell information for all organizations the user has access to
 */
export const getFeatureUpsellMulti = <ThrowOnError extends boolean = false>(options?: Options<GetFeatureUpsellMultiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GetFeatureUpsellMultiResponse, GetFeatureUpsellMultiError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/feature_upsell_multi',
        ...options
    });
};

/**
 * Invoice Summary
 * Returns a summary of the next invoice for an Organization
 */
export const getOrganizationInvoiceSummary = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationInvoiceSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationInvoiceSummaryResponse, GetOrganizationInvoiceSummaryError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/invoice_summary',
        ...options
    });
};

/**
 * Subscription Payment Failed
 * Returns subscription payment failed details.
 */
export const getOrganizationSubscriptionPaymentFailed = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationSubscriptionPaymentFailedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationSubscriptionPaymentFailedResponse, GetOrganizationSubscriptionPaymentFailedError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/payment_failed',
        ...options
    });
};

/**
 * Removes any discount (promotion code) applied to the organization's customer
 * Removes any discount (promotion code) applied to the organization's customer
 */
export const deletePromotionCode = <ThrowOnError extends boolean = false>(options: Options<DeletePromotionCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/promocode',
        ...options
    });
};

/**
 * Applies the given promotion code to organization's customer
 * Applies the given promotion code to organization's customer
 * If the customer already has the promotion code, then it will be overridden
 */
export const postPromotionCode = <ThrowOnError extends boolean = false>(options: Options<PostPromotionCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/promocode',
        ...options
    });
};

/**
 * PurchaseOrderPdf
 * Returns a Purchase Order document in PDF form.
 */
export const getOrganizationPurchaseOrderPdf = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationPurchaseOrderPdfData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationPurchaseOrderPdfResponse, GetOrganizationPurchaseOrderPdfError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/purchase_orders/{purchase_order_uid}.pdf',
        ...options
    });
};

/**
 * Applies the Referral Bonus if the customer is elligible
 */
export const postReferralBonus = <ThrowOnError extends boolean = false>(options: Options<PostReferralBonusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/referral_bonus',
        ...options
    });
};

/**
 * Create a setup intent for collecting customer's payment method
 * Create a setup intent for collecting customer's payment method for future payments
 */
export const createSetupIntent = <ThrowOnError extends boolean = false>(options: Options<CreateSetupIntentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/setup_intent',
        ...options
    });
};

/**
 * Subscription
 * Allows to create a new unified subscription on initial 30-day trial for an organization.
 */
export const postOrganizationSubscriptionTrial = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationSubscriptionTrialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PostOrganizationSubscriptionTrialError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/trial',
        ...options
    });
};

/**
 * Upgrade request for a feature
 * Endpoint for triggering a call to action on admins for upgrading their subscription.
 */
export const postOrganizationSubscriptionUpgradeRequest = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationSubscriptionUpgradeRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationSubscriptionUpgradeRequestResponse, PostOrganizationSubscriptionUpgradeRequestError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscription/upgrade_request/{feature_id}',
        ...options
    });
};

/**
 * Delete the subscription of an organization.
 * Delete the subscription of an organization.
 */
export const organizationDeleteSubscription = <ThrowOnError extends boolean = false>(options: Options<OrganizationDeleteSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationDeleteSubscriptionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscriptions',
        ...options
    });
};

/**
 * Creates a new customer for the organization.
 * Creates a new customer for the organization.
 */
export const organizationCreateCustomer = <ThrowOnError extends boolean = false>(options: Options<OrganizationCreateCustomerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationCreateCustomerResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscriptions/customer',
        ...options
    });
};

/**
 * Cancel premium trial plan to organization.
 * Cancel premium trial plan to organization.
 */
export const organizationCancelForcedTrial = <ThrowOnError extends boolean = false>(options: Options<OrganizationCancelForcedTrialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationCancelForcedTrialResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscriptions/forced_trial',
        ...options
    });
};

/**
 * Adds (force) premium trial plan to organization.
 * Adds (force) premium trial plan to organization.
 */
export const organizationAddForcedTrial = <ThrowOnError extends boolean = false>(options: Options<OrganizationAddForcedTrialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationAddForcedTrialResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscriptions/forced_trial',
        ...options
    });
};

/**
 * Get organization subscription seat logs.
 * Get organization subscription seat logs.
 */
export const organizationGetSubscriptionSeatsLogs = <ThrowOnError extends boolean = false>(options: Options<OrganizationGetSubscriptionSeatsLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationGetSubscriptionSeatsLogsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscriptions/seats_logs',
        ...options
    });
};

/**
 * Sync organization subscription state.
 * Sync organization subscription state.
 */
export const organizationSyncSubscription = <ThrowOnError extends boolean = false>(options: Options<OrganizationSyncSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OrganizationSyncSubscriptionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/subscriptions/sync',
        ...options
    });
};

/**
 * Returns the organization current trial plan, if any.
 * Returns the organization current trial plan, if any.
 */
export const organizationGetTrial = <ThrowOnError extends boolean = false>(options: Options<OrganizationGetTrialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationGetTrialResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/trial',
        ...options
    });
};

/**
 * Cancel organization trial.
 * Cancel organization trial.
 */
export const organizationCancelTrial = <ThrowOnError extends boolean = false>(options: Options<OrganizationCancelTrialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationCancelTrialResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/trial/cancel',
        ...options
    });
};

/**
 * Start trial for organization.
 * Allows to set a premium trial plan for the organization.
 */
export const organizationCreateTrial = <ThrowOnError extends boolean = false>(options: Options<OrganizationCreateTrialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationCreateTrialResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/trial/start',
        ...options
    });
};

/**
 * Unsuspend and organization.
 * Unsuspend and organization.
 */
export const organizationUnsuspend = <ThrowOnError extends boolean = false>(options: Options<OrganizationUnsuspendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationUnsuspendResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/unsuspend',
        ...options
    });
};

/**
 * List of users in organization
 * Returns list of users in organization based on set of url parameters:
 * Result is paginated. Pagination params are returned in headers
 */
export const getOrganizationUsers = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationUsersResponse, GetOrganizationUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/users',
        ...options
    });
};

/**
 * Apply changes in bulk to users in an organization
 * Apply changes in bulk to users in an organization (currently deletion only).
 */
export const patchOrganizationUsers = <ThrowOnError extends boolean = false>(options: Options<PatchOrganizationUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchOrganizationUsersResponse, PatchOrganizationUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/users',
        ...options
    });
};

/**
 * List of users in organization with details
 * Returns list of users in organization based on set of url parameters:
 * Result is paginated. Pagination params are returned in headers
 */
export const getOrganizationUsersDetailed = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationUsersDetailedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationUsersDetailedResponse, GetOrganizationUsersDetailedError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/users/detailed',
        ...options
    });
};

/**
 * Leaves organization
 * Leaves organization, effectively delete user account in org and delete organization if it is last user
 */
export const deleteOrganizationUsersLeave = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationUsersLeaveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrganizationUsersLeaveResponse, DeleteOrganizationUsersLeaveError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/users/leave',
        ...options
    });
};

/**
 * Changes a single organization-user
 * Changes a single organization-user. Can affect the following values:
 */
export const putOrganizationUsers = <ThrowOnError extends boolean = false>(options: Options<PutOrganizationUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutOrganizationUsersResponse, PutOrganizationUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/users/{organization_user_id}',
        ...options
    });
};

/**
 * Validate an organization VAT number.
 * Validate an organization VAT number.
 */
export const organizationValidateTax = <ThrowOnError extends boolean = false>(options: Options<OrganizationValidateTaxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationValidateTaxResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/validate_tax',
        ...options
    });
};

/**
 * Create a new workspace.
 * Create a workspace within an existing organization.
 */
export const postOrganizationWorkspaces = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationWorkspacesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationWorkspacesResponse, PostOrganizationWorkspacesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/workspaces',
        ...options
    });
};

/**
 * Statistics for all workspaces in the organization
 * Returns map indexed by workspace ID where each map element contains workspace admins list,
 * members count and groups count.
 */
export const getOrganizationWorkspacesStatistics = <ThrowOnError extends boolean = false>(options?: Options<GetOrganizationWorkspacesStatisticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOrganizationWorkspacesStatisticsResponse, GetOrganizationWorkspacesStatisticsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/workspaces/statistics',
        ...options
    });
};

/**
 * Change assignments of users within a workspace.
 * Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
 */
export const putOrganizationWorkspacesAssignments = <ThrowOnError extends boolean = false>(options: Options<PutOrganizationWorkspacesAssignmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutOrganizationWorkspacesAssignmentsResponse, PutOrganizationWorkspacesAssignmentsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/workspaces/{workspace_id}/assignments',
        ...options
    });
};

/**
 * List of groups in a workspace within an organization with user assignments.
 * Returns list of groups in a workspace based on set of url parameters.
 * List is sorted by name.
 */
export const getOrganizationWorkspacesGroups = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationWorkspacesGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationWorkspacesGroupsResponse, GetOrganizationWorkspacesGroupsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/workspaces/{workspace_id}/groups',
        ...options
    });
};

/**
 * List of users who belong to the given workspace.
 * Returns any users who belong to the workspace directly or through at least one group.
 */
export const getOrganizationWorkspacesWorkspaceusers = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationWorkspacesWorkspaceusersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationWorkspacesWorkspaceusersResponse, GetOrganizationWorkspacesWorkspaceusersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users',
        ...options
    });
};

/**
 * Changes the users in a workspace.
 * Changes the users in a workspace (currently deletion only).
 */
export const patchOrganizationWorkspaceUsers = <ThrowOnError extends boolean = false>(options: Options<PatchOrganizationWorkspaceUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchOrganizationWorkspaceUsersResponse, PatchOrganizationWorkspaceUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users',
        ...options
    });
};

/**
 * Get permissions
 * Retrieves permissions based on product ID.
 */
export const getPermissionsByProductId = <ThrowOnError extends boolean = false>(options: Options<GetPermissionsByProductIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPermissionsByProductIdResponse, GetPermissionsByProductIdError, ThrowOnError>({
        url: '/permissions/{product_id}',
        ...options
    });
};

/**
 * Load the previously saved report
 * <p>Returns the previously saved report.</p>
 * <p><b>Authentication</b></p><p>A public report is accessible by anyone, a private one is only accessible by the report's owner or workspace admin. If the criteria aren't met it returns 403 status code.</p>
 * <p><b>Parameters</b></p><p>The report can be executed without parameters, and in this case the saved or default parameters will be used.</p>
 */
export const postReportsApiV3SharedByReportToken = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3SharedByReportTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3SharedByReportTokenResponse, PostReportsApiV3SharedByReportTokenError, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/shared/{report_token}',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options?.headers
        }
    });
};

/**
 * Export CSV for saved report
 * <p>Downloads a previously saved report in csv.</p>
 * <p><b>Authentication</b></p><p>A public report is accessible by anyone, a private one is only accessible by the report's owner or workspace admin. If the criteria aren't met it returns 403 status code.</p>
 * <p><b>Parameters</b></p><p>The report can be executed without parameters, and in this case the saved or default parameters will be used.</p>
 */
export const postReportsApiV3SharedByReportTokenCsv = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3SharedByReportTokenCsvData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3SharedByReportTokenCsvResponse, PostReportsApiV3SharedByReportTokenCsvError, ThrowOnError>({
        bodySerializer: null,
        url: '/reports/api/v3/shared/{report_token}.csv',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options?.headers
        }
    });
};

/**
 * Export XSLX saved report
 * <p>Downloads a previously saved report in xlsx.</p>
 * <p><b>Authentication</b></p><p>A public report is accessible by anyone, a private one is only accessible by the report's owner or workspace admin. If the criteria aren't met it returns 403 status code.</p>
 * <p><b>Parameters</b></p><p>The report can be executed without parameters, and in this case the saved or default parameters will be used.</p>
 */
export const postReportsApiV3SharedByReportTokenXlsx = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3SharedByReportTokenXlsxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3SharedByReportTokenXlsxResponse, PostReportsApiV3SharedByReportTokenXlsxError, ThrowOnError>({
        bodySerializer: null,
        url: '/reports/api/v3/shared/{report_token}.xlsx',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options?.headers
        }
    });
};

/**
 * Export saved report in pdf format
 * <p><b>Authentication</b></p><p>A public report is accessible by anyone, a private one is only accessible by the report's owner or workspace admin. If the criteria aren't met it returns 403 status code.</p>
 * <p><b>Parameters</b></p><p>The report can be executed without parameters, and in this case the saved or default parameters will be used.</p>
 */
export const postReportsApiV3SharedByReportTokenPdf = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3SharedByReportTokenPdfData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3SharedByReportTokenPdfResponse, PostReportsApiV3SharedByReportTokenPdfError, ThrowOnError>({
        bodySerializer: null,
        url: '/reports/api/v3/shared/{report_token}/pdf',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options?.headers
        }
    });
};

/**
 * Load comparative report
 * Returns comparative report.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdComparative = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdComparativeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdComparativeResponse, PostReportsApiV3WorkspaceByWorkspaceIdComparativeError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/comparative',
        ...options
    });
};

/**
 * Load clients' data trends
 * Returns the clients' data trends.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdDataTrendsClients = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsResponse, PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsClientsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/data_trends/clients',
        ...options
    });
};

/**
 * Load projects' data trends
 * Returns projects' data trends.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjects = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsResponse, PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsProjectsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/data_trends/projects',
        ...options
    });
};

/**
 * Load users' data trends
 * Returns users' data trends.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsers = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersResponse, PostReportsApiV3WorkspaceByWorkspaceIdDataTrendsUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/data_trends/users',
        ...options
    });
};

/**
 * List clients
 * Returns filtered clients from a workspace (only ID and name).
 */
export const postReportsApiV3WorkspaceByWorkspaceIdFiltersClients = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersClientsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/filters/clients',
        ...options
    });
};

/**
 * List project groups filter
 * Returns the project groups from a workspace.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroups = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectGroupsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/filters/project_groups',
        ...options
    });
};

/**
 * List project users
 * Returns filtered user projects.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsers = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/filters/project_users',
        ...options
    });
};

/**
 * List projects
 * Returns filtered projects from a workspace.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdFiltersProjects = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/filters/projects',
        ...options
    });
};

/**
 * List projects statuses
 * Returns	filtered projects statuses from a workspace.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatus = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersProjectsStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/filters/projects/status',
        ...options
    });
};

/**
 * List tasks statuses
 * Filter tasks statuses from a workspace
 */
export const postReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatus = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersTasksStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/filters/tasks/status',
        ...options
    });
};

/**
 * List users
 * Returns filtered users from a workspace.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdFiltersUsers = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersResponse, PostReportsApiV3WorkspaceByWorkspaceIdFiltersUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/filters/users',
        ...options
    });
};

/**
 * Load profitability projects report
 * Returns profitability projects report.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjects = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsResponse, PostReportsApiV3WorkspaceByWorkspaceIdProfitabilityProjectsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/profitability/projects',
        ...options
    });
};

/**
 * List project users
 * Returns summary user projects.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdProjectsSummary = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryResponse, PostReportsApiV3WorkspaceByWorkspaceIdProjectsSummaryError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/projects/summary',
        ...options
    });
};

/**
 * Load project summary
 * Returns project's summary.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummary = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryResponse, PostReportsApiV3WorkspaceByWorkspaceIdProjectsByProjectIdSummaryError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/projects/{project_id}/summary',
        ...options
    });
};

/**
 * Search clients
 * Returns filtered clients from a workspace (whole client object).
 */
export const postReportsApiV3WorkspaceByWorkspaceIdSearchClients = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchClientsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/search/clients',
        ...options
    });
};

/**
 * List projects
 * Returns filtered projects from a workspace (whole project object).
 */
export const postReportsApiV3WorkspaceByWorkspaceIdSearchProjects = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchProjectsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/search/projects',
        ...options
    });
};

/**
 * Search time entries
 * Returns time entries for detailed report according to the given filters.
 * Supports pagination via X-Next-ID and X-Next-Row-Number headers returned in the response.
 * See [Overview](https://developers.track.toggl.com/docs/reports_start#detailed-reports)
 */
export const postReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntries = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/search/time_entries',
        ...options
    });
};

/**
 * Export detailed report
 * Downloads detailed report in pdf format.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdf = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesPdfError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/search/time_entries.pdf',
        ...options
    });
};

/**
 * Export detailed report
 * Downloads detailed report in the specified format: csv or xlsx.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtension = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesByExtensionError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/search/time_entries.{extension}',
        ...options
    });
};

/**
 * Load totals detailed report
 * Returns totals sums for detailed report.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotals = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchTimeEntriesTotalsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/search/time_entries/totals',
        ...options
    });
};

/**
 * List users
 * Returns filtered users from a workspace.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdSearchUsers = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersResponse, PostReportsApiV3WorkspaceByWorkspaceIdSearchUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/search/users',
        ...options
    });
};

/**
 * Search time entries
 * Returns time entries for summary report according to the given filters.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntries = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesResponse, PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/summary/time_entries',
        ...options
    });
};

/**
 * Export summary report
 * Downloads summary report in pdf format.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdf = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfResponse, PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesPdfError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/summary/time_entries.pdf',
        ...options
    });
};

/**
 * Export summary report
 * Downloads summary report in the specified in the specified format: csv or xlsx.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtension = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionResponse, PostReportsApiV3WorkspaceByWorkspaceIdSummaryTimeEntriesByExtensionError, ThrowOnError>({
        url: '/reports/api/v3/workspace/{workspace_id}/summary/time_entries.{extension}',
        ...options
    });
};

/**
 * Search time entries
 * Returns time entries for weekly report according to the given filters.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntries = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesResponse, PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/weekly/time_entries',
        ...options
    });
};

/**
 * Export weekly report
 * Downloads weekly report in csv format.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsv = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvResponse, PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesCsvError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.csv',
        ...options
    });
};

/**
 * Export weekly report
 * Downloads weekly report in pdf format.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdf = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfResponse, PostReportsApiV3WorkspaceByWorkspaceIdWeeklyTimeEntriesPdfError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.pdf',
        ...options
    });
};

/**
 * List tasks
 * Returns filtered tasks from workspace.
 */
export const postReportsApiV3WorkspaceByWorkspaceIdByActionTasks = <ThrowOnError extends boolean = false>(options: Options<PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksResponse, PostReportsApiV3WorkspaceByWorkspaceIdByActionTasksError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/reports/api/v3/workspace/{workspace_id}/{action}/tasks',
        ...options
    });
};

/**
 * Get roles
 * Retrieves roles based on product ID.
 */
export const getRolesByProductId = <ThrowOnError extends boolean = false>(options: Options<GetRolesByProductIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRolesByProductIdResponse, GetRolesByProductIdError, ThrowOnError>({
        url: '/roles/{product_id}',
        ...options
    });
};

/**
 * Find role
 * Finds a role within a product by code, optional organization ID.
 */
export const postRolesByProductIdFind = <ThrowOnError extends boolean = false>(options: Options<PostRolesByProductIdFindData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRolesByProductIdFindResponse, PostRolesByProductIdFindError, ThrowOnError>({
        url: '/roles/{product_id}/find',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get organization roles
 * Retrieves all roles for a specific organization and product.
 */
export const getRolesByProductIdByOrganizationId = <ThrowOnError extends boolean = false>(options: Options<GetRolesByProductIdByOrganizationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRolesByProductIdByOrganizationIdResponse, GetRolesByProductIdByOrganizationIdError, ThrowOnError>({
        url: '/roles/{product_id}/{organization_id}',
        ...options
    });
};

/**
 * Create organization role
 * Creates a new role within an organization with the specified product.
 */
export const postRolesByProductIdByOrganizationId = <ThrowOnError extends boolean = false>(options: Options<PostRolesByProductIdByOrganizationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRolesByProductIdByOrganizationIdResponse, PostRolesByProductIdByOrganizationIdError, ThrowOnError>({
        url: '/roles/{product_id}/{organization_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get organization roles for users
 * Retrieves the list of roles for a given user list in a organization.
 */
export const postRolesByProductIdByOrganizationIdUsers = <ThrowOnError extends boolean = false>(options: Options<PostRolesByProductIdByOrganizationIdUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRolesByProductIdByOrganizationIdUsersResponse, PostRolesByProductIdByOrganizationIdUsersError, ThrowOnError>({
        url: '/roles/{product_id}/{organization_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete organization role
 * Deletes a specific role within an organization by role ID.
 */
export const deleteRolesByProductIdByOrganizationIdByRoleId = <ThrowOnError extends boolean = false>(options: Options<DeleteRolesByProductIdByOrganizationIdByRoleIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRolesByProductIdByOrganizationIdByRoleIdResponse, DeleteRolesByProductIdByOrganizationIdByRoleIdError, ThrowOnError>({
        url: '/roles/{product_id}/{organization_id}/{role_id}',
        ...options
    });
};

/**
 * Get specific organization role
 * Retrieves a specific role by ID for a given organization and product.
 */
export const getRolesByProductIdByOrganizationIdByRoleId = <ThrowOnError extends boolean = false>(options: Options<GetRolesByProductIdByOrganizationIdByRoleIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRolesByProductIdByOrganizationIdByRoleIdResponse, GetRolesByProductIdByOrganizationIdByRoleIdError, ThrowOnError>({
        url: '/roles/{product_id}/{organization_id}/{role_id}',
        ...options
    });
};

/**
 * Update organization role
 * Updates an existing role within an organization by role ID.
 */
export const putRolesByProductIdByOrganizationIdByRoleId = <ThrowOnError extends boolean = false>(options: Options<PutRolesByProductIdByOrganizationIdByRoleIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutRolesByProductIdByOrganizationIdByRoleIdResponse, PutRolesByProductIdByOrganizationIdByRoleIdError, ThrowOnError>({
        url: '/roles/{product_id}/{organization_id}/{role_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Duplicate organization role
 * Duplicates a specific role within an organization by role ID with a new code.
 */
export const postRolesByProductIdByOrganizationIdByRoleIdDuplicate = <ThrowOnError extends boolean = false>(options: Options<PostRolesByProductIdByOrganizationIdByRoleIdDuplicateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRolesByProductIdByOrganizationIdByRoleIdDuplicateResponse, PostRolesByProductIdByOrganizationIdByRoleIdDuplicateError, ThrowOnError>({
        url: '/roles/{product_id}/{organization_id}/{role_id}/duplicate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Check if the given users are members of the organization.
 * Check if the given list of users are members of the given workspace within the organization.
 */
export const postSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsers = <ThrowOnError extends boolean = false>(options: Options<PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersResponse, PostSessionByProductIdOrganizationsByOrganizationIdWorkspacesByWorkspaceIdUsersError, ThrowOnError>({
        url: '/session/{product_id}/organizations/{organization_id}/workspaces/{workspace_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send an email to a contact
 * Send an email to a contact
 */
export const postSmailContact = <ThrowOnError extends boolean = false>(options?: Options<PostSmailContactData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSmailContactResponse, PostSmailContactError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/smail/contact',
        ...options
    });
};

/**
 * Send an email for a demo
 * Send an email for a demo
 */
export const postSmailDemo = <ThrowOnError extends boolean = false>(options?: Options<PostSmailDemoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSmailDemoResponse, PostSmailDemoError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/smail/demo',
        ...options
    });
};

/**
 * Send an email for meet
 * Send an email for meet with message and location
 */
export const postSmailMeet = <ThrowOnError extends boolean = false>(options?: Options<PostSmailMeetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSmailMeetResponse, PostSmailMeetError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/smail/meet',
        ...options
    });
};

/**
 * Status
 * Returns API status.
 */
export const getStatus = <ThrowOnError extends boolean = false>(options?: Options<GetStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStatusResponse, GetStatusError, ThrowOnError>({
        url: '/status',
        ...options
    });
};

/**
 * Get all available plans and features.
 * Get all available plans along with all features available per plan.
 */
export const getAllPlans = <ThrowOnError extends boolean = false>(options?: Options<GetAllPlansData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllPlansResponse, GetAllPlansError, ThrowOnError>({
        url: '/subscriptions/plans',
        ...options
    });
};

/**
 * Get a list of user goals
 * Gets all goals for the requesting user.
 */
export const getSyncServerMeGoals = <ThrowOnError extends boolean = false>(options?: Options<GetSyncServerMeGoalsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSyncServerMeGoalsResponse, GetSyncServerMeGoalsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/sync-server/me/goals',
        ...options
    });
};

/**
 * Delete all timeline data
 * Delete all timeline data for the current user
 */
export const deleteTimeline = <ThrowOnError extends boolean = false>(options?: Options<DeleteTimelineData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteTimelineError, ThrowOnError>({
        url: '/timeline',
        ...options
    });
};

/**
 * Get timeline events
 * Get timeline events
 */
export const getTimeline = <ThrowOnError extends boolean = false>(options?: Options<GetTimelineData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTimelineResponse, GetTimelineError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/timeline',
        ...options
    });
};

/**
 * Save timeline events
 * Save timeline events and returns timeline settings
 */
export const postTimeline = <ThrowOnError extends boolean = false>(options?: Options<PostTimelineData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTimelineResponse, PostTimelineError, ThrowOnError>({
        url: '/timeline',
        ...options
    });
};

/**
 * Timezones
 * Returns known timezones.
 */
export const getTimezones = <ThrowOnError extends boolean = false>(options?: Options<GetTimezonesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTimezonesResponse, GetTimezonesError, ThrowOnError>({
        url: '/timezones',
        ...options
    });
};

/**
 * Offsets
 * Returns known timezones with their offsets.
 */
export const getOffsets = <ThrowOnError extends boolean = false>(options?: Options<GetOffsetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOffsetsResponse, GetOffsetsError, ThrowOnError>({
        url: '/timezones/offsets',
        ...options
    });
};

/**
 * Change user role.
 * Changes user role. You can add, remove or update the role for a user withing the same product.
 */
export const postUserRolesByProductId = <ThrowOnError extends boolean = false>(options: Options<PostUserRolesByProductIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserRolesByProductIdResponse, PostUserRolesByProductIdError, ThrowOnError>({
        url: '/user_roles/{product_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Users matching search term
 * Returns user data containing the search term
 */
export const searchUser = <ThrowOnError extends boolean = false>(options?: Options<SearchUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SearchUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Post organization user entity roles
 * Creation user entity roles.
 */
export const postUsersByProductIdRoles = <ThrowOnError extends boolean = false>(options: Options<PostUsersByProductIdRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersByProductIdRolesResponse, PostUsersByProductIdRolesError, ThrowOnError>({
        url: '/users/{product_id}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get organization users for roles
 * Retrieves the list of users for a given role list in a organization.
 */
export const postUsersByProductIdByOrganizationIdRoles = <ThrowOnError extends boolean = false>(options: Options<PostUsersByProductIdByOrganizationIdRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersByProductIdByOrganizationIdRolesResponse, PostUsersByProductIdByOrganizationIdRolesError, ThrowOnError>({
        url: '/users/{product_id}/{organization_id}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * User data
 * Returns user data
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Delete user timeline data
 * Remove the user events and his desktop entry.
 */
export const userDeleteTimelineData = <ThrowOnError extends boolean = false>(options: Options<UserDeleteTimelineDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserDeleteTimelineDataResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/delete_timeline_data',
        ...options
    });
};

/**
 * Service notifications in DB for a given user
 * Provides visibility for  all service notifications that may exist for a user.
 */
export const getUserServiceNotifications = <ThrowOnError extends boolean = false>(options: Options<GetUserServiceNotificationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserServiceNotificationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/notifications',
        ...options
    });
};

/**
 * Update user preferences
 * Update user preferences.
 */
export const userUpdatePreferences = <ThrowOnError extends boolean = false>(options: Options<UserUpdatePreferencesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserUpdatePreferencesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/preferences',
        ...options
    });
};

/**
 * Restore user account.
 * Restore user account.
 */
export const userRestore = <ThrowOnError extends boolean = false>(options: Options<UserRestoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserRestoreResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/restore',
        ...options
    });
};

/**
 * Time entry data
 * Returns result of time_entries search
 */
export const getUsersTimeEntries = <ThrowOnError extends boolean = false>(options: Options<GetUsersTimeEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersTimeEntriesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/time_entries',
        ...options
    });
};

/**
 * Restores workspace user
 * UNdeletes workspace user
 */
export const workspaceUserRestore = <ThrowOnError extends boolean = false>(options: Options<WorkspaceUserRestoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WorkspaceUserRestoreResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/workspace_user/{workspace_user_id}/restore',
        ...options
    });
};

/**
 * Regenerates aggregations for a given set of workspace IDs.
 * Regenerates aggregations for a given set of workspace IDs. The type of aggregations to be regenerated will either be project-total-time or planed-task-total-time.
 */
export const generateAggregations = <ThrowOnError extends boolean = false>(options?: Options<GenerateAggregationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GenerateAggregationsResponse, GenerateAggregationsError, ThrowOnError>({
        url: '/warehouse/aggregations/generate',
        ...options
    });
};

/**
 * Workspaces containing search term
 * Returns workspaces data containing the search term
 */
export const searchWorkspace = <ThrowOnError extends boolean = false>(options?: Options<SearchWorkspaceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SearchWorkspaceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces',
        ...options
    });
};

/**
 * Public Subscription Plans
 * Lists Public subscription plans.
 */
export const getPublicSubscriptionPlans = <ThrowOnError extends boolean = false>(options?: Options<GetPublicSubscriptionPlansData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPublicSubscriptionPlansResponse, GetPublicSubscriptionPlansError, ThrowOnError>({
        url: '/workspaces/plans',
        ...options
    });
};

/**
 * Workspace data
 * Returns workspace data
 */
export const getWorkspace = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}',
        ...options
    });
};

/**
 * Update workspace
 * Update a specific workspace.
 */
export const putWorkspaces = <ThrowOnError extends boolean = false>(options: Options<PutWorkspacesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspacesResponse, PutWorkspacesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}',
        ...options
    });
};

/**
 * Add Workspace comment
 * Adds comment to a workspace.
 */
export const workspaceAddComment = <ThrowOnError extends boolean = false>(options: Options<WorkspaceAddCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WorkspaceAddCommentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/add_comment',
        ...options
    });
};

/**
 * Alerts
 * Returns a list of existing alerts
 */
export const getAlerts = <ThrowOnError extends boolean = false>(options?: Options<GetAlertsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAlertsResponse, GetAlertsError, ThrowOnError>({
        url: '/workspaces/{workspace_id}/alerts',
        ...options
    });
};

/**
 * Alerts
 * Handles POST alert requests.
 */
export const postAlerts = <ThrowOnError extends boolean = false>(options?: Options<PostAlertsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAlertsResponse, PostAlertsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/alerts',
        ...options
    });
};

/**
 * Return errors from alert log
 * Return errors from alert log
 */
export const workspaceGetAlertLog = <ThrowOnError extends boolean = false>(options: Options<WorkspaceGetAlertLogData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkspaceGetAlertLogResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/alerts/errors',
        ...options
    });
};

/**
 * Alerts
 * Handles DELETE alert requests.
 */
export const deleteAlerts = <ThrowOnError extends boolean = false>(options?: Options<DeleteAlertsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteAlertsResponse, DeleteAlertsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/alerts/{alert_id}',
        ...options
    });
};

/**
 * Alerts
 * Handles PUT alert requests.
 */
export const putAlerts = <ThrowOnError extends boolean = false>(options?: Options<PutAlertsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutAlertsResponse, PutAlertsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/alerts/{alert_id}',
        ...options
    });
};

/**
 * Delete alerts log
 * Delete alerts log.
 */
export const workspaceDeleteAlertLog = <ThrowOnError extends boolean = false>(options: Options<WorkspaceDeleteAlertLogData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<WorkspaceDeleteAlertLogResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/alerts/{alert_id}/logs/{log_id}',
        ...options
    });
};

/**
 * List clients
 * List clients from workspace.
 */
export const getWorkspaceClients = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceClientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceClientsResponse, GetWorkspaceClientsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/clients',
        ...options
    });
};

/**
 * Create client
 * Create workspace client.
 */
export const postWorkspaceClients = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceClientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceClientsResponse, PostWorkspaceClientsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/clients',
        ...options
    });
};

/**
 * Archives one or more clients in bulk
 * Archives workspace clients and related projects. Only for premium workspaces.
 */
export const archiveClients = <ThrowOnError extends boolean = false>(options: Options<ArchiveClientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ArchiveClientsResponse, ArchiveClientsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/clients/archive',
        ...options
    });
};

/**
 * List clients for given client_ids
 * List clients from workspace by client_ids
 */
export const getWorkspaceClientsData = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceClientsDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetWorkspaceClientsDataResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/clients/data',
        ...options
    });
};

/**
 * Delete clients
 * Delete one or more workspace clients.
 */
export const deleteWorkspaceClients = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceClientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeleteWorkspaceClientsResponse, DeleteWorkspaceClientsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/clients/delete',
        ...options
    });
};

/**
 * Delete client
 * Delete workspace client.
 */
export const deleteWorkspaceClient = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceClientResponse, DeleteWorkspaceClientError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/clients/{client_id}',
        ...options
    });
};

/**
 * Load client from ID
 * Load client from workspace.
 */
export const getWorkspaceClient = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceClientResponse, GetWorkspaceClientError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/clients/{client_id}',
        ...options
    });
};

/**
 * Change client
 * Update workspace client.
 *
 * Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.
 */
export const putWorkspaceClients = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceClientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceClientsResponse, PutWorkspaceClientsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/clients/{client_id}',
        ...options
    });
};

/**
 * Archives client
 * Archives a workspace client and related projects. Only for premium workspaces.
 */
export const archiveClient = <ThrowOnError extends boolean = false>(options: Options<ArchiveClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ArchiveClientResponse, ArchiveClientError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/clients/{client_id}/archive',
        ...options
    });
};

/**
 * Restores client and related projects.
 * Restores client and all related or specified projects from the given workspace.
 */
export const restoreClient = <ThrowOnError extends boolean = false>(options: Options<RestoreClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RestoreClientResponse, RestoreClientError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/clients/{client_id}/restore',
        ...options
    });
};

/**
 * Get workspace currencies
 * Get the currencies for a given workspace.
 */
export const getWorkspaceCurrencies = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceCurrenciesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceCurrenciesResponse, GetWorkspaceCurrenciesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/currencies',
        ...options
    });
};

/**
 * Get last activity for every workspace user
 * Dashboard's main purpose is to give an overview of what users in the workspace are doing and have been doing.
 * The activity object holds the data of 20 latest actions in the workspace or latest activity for every workspace user.
 * Activity object has the following properties
 * * user_id: user ID
 * * project_id: project ID (ID is 0 if time entry doesn't have project connected to it)
 * * duration: time entry duration in seconds. If the time entry is currently running, the duration attribute contains a negative value, denoting the start of the time entry in seconds since epoch (Jan 1 1970). The correct duration can be calculated as current_time + duration, where current_time is the current time in seconds since epoch.
 * * description: (Description property is not present if time entry description is empty)
 * * stop: time entry stop time (ISO 8601 date and time. Stop property is not present when time entry is still running)
 * * tid: task id, if applicable
 */
export const getWorkspaceAllActivities = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceAllActivitiesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceAllActivitiesResponse, GetWorkspaceAllActivitiesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/dashboard/all_activity',
        ...options
    });
};

/**
 * Get most active users
 * Dashboard's main purpose is to give an overview of what users in the workspace are doing and have been doing.
 * The most active user object holds the data of the top 5 users who have tracked the most time during last 7 days.
 * Most active user object has the following properties
 * * user_id: user ID
 * * duration: Sum of time entry durations that have been created during last 7 days.
 */
export const getWorkspaceMostActive = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceMostActiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceMostActiveResponse, GetWorkspaceMostActiveError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/dashboard/most_active',
        ...options
    });
};

/**
 * Get top activities
 * Dashboard's main purpose is to give an overview of what users in the workspace are doing and have been doing.
 * Return objects are same as with the `/workspaces/{workspace_id}/dashboard/all_activity` request.
 */
export const getWorkspaceTopActivity = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceTopActivityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceTopActivityResponse, GetWorkspaceTopActivityError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/dashboard/top_activity',
        ...options
    });
};

/**
 * Get a list with the workspace download requests
 * List of workspace download requests from a given workspace.
 */
export const getWorkspaceExports = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceExportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceExportsResponse, GetWorkspaceExportsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/exports',
        ...options
    });
};

/**
 * Post a list with the workspace to be downloaded
 * List of workspaces downloaded from a given workspace.
 */
export const postWorkspaceExports = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceExportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceExportsResponse, PostWorkspaceExportsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/exports',
        ...options
    });
};

/**
 * Get the zip file with workspace download requests
 * Send a zip file List of workspace download requests from a given workspace.
 */
export const getWorkspaceExportsDataUuidZip = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceExportsDataUuidZipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceExportsDataUuidZipResponse, GetWorkspaceExportsDataUuidZipError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/exports/data/{uuid}.zip',
        ...options
    });
};

/**
 * Get a list of favorites
 * Gets all favorites for the requesting user
 */
export const getWorkspaceFavorites = <ThrowOnError extends boolean = false>(options?: Options<GetWorkspaceFavoritesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkspaceFavoritesResponse, GetWorkspaceFavoritesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/favorites',
        ...options
    });
};

/**
 * Create a favorite
 * This endpoint allows the creation of a favorite.
 * Also, the user must have access to all resources being referenced in the favorite attributes, and these
 * resources should have valid relationships. For instance, if you want a favorite in a given workspace and
 * with some tags, the tags must belong to that workspace. In case of user having no access to an attribute,
 * a 403 status is returned, if the attributes don't relate correctly between themselves the status
 * returned will be 400.
 */
export const createWorkspaceFavorite = <ThrowOnError extends boolean = false>(options?: Options<CreateWorkspaceFavoriteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateWorkspaceFavoriteResponse, CreateWorkspaceFavoriteError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/favorites',
        ...options
    });
};

/**
 * Update an array of favorites
 * This endpoint allows updating an array of favorites. It follow all the requirements
 * and behavior from the [post] (Create Favorite) counterpart.
 */
export const updateWorkspaceFavorites = <ThrowOnError extends boolean = false>(options?: Options<UpdateWorkspaceFavoritesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateWorkspaceFavoritesResponse, UpdateWorkspaceFavoritesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/favorites',
        ...options
    });
};

/**
 * Generates and returns a list of suggested favorites.
 * It will create 3 favorites based on past user's TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won't be suggested favorites either.
 */
export const postWorkspaceFavoritesSuggestions = <ThrowOnError extends boolean = false>(options?: Options<PostWorkspaceFavoritesSuggestionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkspaceFavoritesSuggestionsResponse, PostWorkspaceFavoritesSuggestionsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/favorites/suggestions',
        ...options
    });
};

/**
 * Deletes a given favorite
 * Deletes a given favorite logically from database, as well as its tags.
 */
export const deleteWorkspaceFavorite = <ThrowOnError extends boolean = false>(options?: Options<DeleteWorkspaceFavoriteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteWorkspaceFavoriteError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/favorites/{favorite_id}',
        ...options
    });
};

/**
 * Get a list of goals
 * Gets all goals for the requesting user in the workspace.
 */
export const getWorkspacesByWorkspaceIdGoals = <ThrowOnError extends boolean = false>(options?: Options<GetWorkspacesByWorkspaceIdGoalsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkspacesByWorkspaceIdGoalsResponse, GetWorkspacesByWorkspaceIdGoalsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/goals',
        ...options
    });
};

/**
 * Create a Goal
 * Create a Goal object with its parameters.
 */
export const postWorkspacesByWorkspaceIdGoals = <ThrowOnError extends boolean = false>(options?: Options<PostWorkspacesByWorkspaceIdGoalsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWorkspacesByWorkspaceIdGoalsResponse, PostWorkspacesByWorkspaceIdGoalsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/goals',
        ...options
    });
};

/**
 * Delete one goal
 * Delete a goal that was created by the calling user
 */
export const deleteWorkspacesByWorkspaceIdGoalsByGoalId = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspacesByWorkspaceIdGoalsByGoalIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteWorkspacesByWorkspaceIdGoalsByGoalIdError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/goals/{goal_id}',
        ...options
    });
};

/**
 * Get one goal
 * Gets a goal that relates to the calling user in the specified workspace.
 */
export const getWorkspacesByWorkspaceIdGoalsByGoalId = <ThrowOnError extends boolean = false>(options: Options<GetWorkspacesByWorkspaceIdGoalsByGoalIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspacesByWorkspaceIdGoalsByGoalIdResponse, GetWorkspacesByWorkspaceIdGoalsByGoalIdError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/goals/{goal_id}',
        ...options
    });
};

/**
 * Update a Goal
 * Update a goal with the updatable parameters given by UpdatePayload
 */
export const putWorkspacesByWorkspaceIdGoalsByGoalId = <ThrowOnError extends boolean = false>(options?: Options<PutWorkspacesByWorkspaceIdGoalsByGoalIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutWorkspacesByWorkspaceIdGoalsByGoalIdResponse, PutWorkspacesByWorkspaceIdGoalsByGoalIdError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/goals/{goal_id}',
        ...options
    });
};

/**
 * @deprecated
 * Get workspace groups
 * Returns a list of groups for the specified workspace.
 */
export const getWorkspaceGroups = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceGroupsResponse, GetWorkspaceGroupsError, ThrowOnError>({
        url: '/workspaces/{workspace_id}/groups',
        ...options
    });
};

/**
 * Create group
 * Creates a group in the specified workspace
 */
export const postWorkspaceGroup = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceGroupResponse, PostWorkspaceGroupError, ThrowOnError>({
        url: '/workspaces/{workspace_id}/groups',
        ...options
    });
};

/**
 * Delete group
 * Deletes the group.
 */
export const deleteWorkspaceGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteWorkspaceGroupError, ThrowOnError>({
        url: '/workspaces/{workspace_id}/groups/{group_id}',
        ...options
    });
};

/**
 * Update group
 * Updates the group.
 */
export const putWorkspaceGroup = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceGroupResponse, PutWorkspaceGroupError, ThrowOnError>({
        url: '/workspaces/{workspace_id}/groups/{group_id}',
        ...options
    });
};

/**
 * Reset iCal token
 * Reset the iCal token for a given workspace.
 */
export const postWorkspaceIcalReset = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceIcalResetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceIcalResetResponse, PostWorkspaceIcalResetError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/ical/reset',
        ...options
    });
};

/**
 * Toggle the iCal token
 * Toggle the iCal token on/off for a given workspace.
 */
export const postWorkspaceIcalToggle = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceIcalToggleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceIcalToggleResponse, PostWorkspaceIcalToggleError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/ical/toggle',
        ...options
    });
};

/**
 * Get workspace invoices.
 * Get invoices for given workspace with pagination.
 */
export const getWorkspaceInvoices = <ThrowOnError extends boolean = false>(options?: Options<GetWorkspaceInvoicesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkspaceInvoicesResponse, GetWorkspaceInvoicesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/invoices',
        ...options
    });
};

/**
 * Create user invoice
 * Creates new user invoice.
 */
export const postWorkspaceUserInvoice = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceUserInvoiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceUserInvoiceResponse, PostWorkspaceUserInvoiceError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/invoices',
        ...options
    });
};

/**
 * InvoicePdf
 * Returns an Invoice document in PDF form.
 */
export const getWorkspaceInvoice = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceInvoiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceInvoiceResponse, GetWorkspaceInvoiceError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/invoices/{invoice_id}.pdf',
        ...options
    });
};

/**
 * Delete user invoice.
 * Deletes user invoice by ID if exists.
 */
export const deleteWorkspaceInvoice = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceInvoiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceInvoiceResponse, DeleteWorkspaceInvoiceError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/invoices/{user_invoice_id}',
        ...options
    });
};

/**
 * Get linked SSO profiles for a workspace
 * Returns a list of SSO profiles that are linked to the given workspace.
 */
export const getWorkspaceSso = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceSsoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceSsoResponse, GetWorkspaceSsoError, ThrowOnError>({
        url: '/workspaces/{workspace_id}/linked_sso_profiles',
        ...options
    });
};

/**
 * Unlink the workspace from an SSO profile.
 * Unlink the workspace from an SSO profile.
 */
export const deleteWorkspaceLinkedSsoProfiles = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceLinkedSsoProfilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceLinkedSsoProfilesResponse, DeleteWorkspaceLinkedSsoProfilesError, ThrowOnError>({
        url: '/workspaces/{workspace_id}/linked_sso_profiles/{sso_profile_id}',
        ...options
    });
};

/**
 * Link SSO profile to a workspace
 * Link the workspace with the given ID to an SSO profile with the given ID.
 */
export const putWorkspaceSso = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceSsoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceSsoResponse, PutWorkspaceSsoError, ThrowOnError>({
        url: '/workspaces/{workspace_id}/linked_sso_profiles/{sso_profile_id}',
        ...options
    });
};

/**
 * Delete workspace logo
 * Delete the logo for a given workspace.
 */
export const deleteWorkspaceLogo = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceLogoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceLogoResponse, DeleteWorkspaceLogoError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/logo',
        ...options
    });
};

/**
 * Get workspace logo
 * Get the logo for a given workspace.
 */
export const getWorkspaceLogo = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceLogoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceLogoResponse, GetWorkspaceLogoError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/logo',
        ...options
    });
};

/**
 * Post workspace logo
 * Post the logo for a given workspace.
 */
export const postWorkspaceLogo = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceLogoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceLogoResponse, PostWorkspaceLogoError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/logo',
        ...options
    });
};

/**
 * Add workspace option.
 * Add workspace option.
 */
export const workspaceOptionAdd = <ThrowOnError extends boolean = false>(options: Options<WorkspaceOptionAddData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WorkspaceOptionAddResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/options',
        ...options
    });
};

/**
 * Delete workspace option.
 * Delete workspace option.
 */
export const workspaceOptionDelete = <ThrowOnError extends boolean = false>(options: Options<WorkspaceOptionDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<WorkspaceOptionDeleteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/options/{key}',
        ...options
    });
};

/**
 * PaymentReceipts
 * Returns payment receipt pdf file.
 */
export const getWorkspacePaymentReceipts = <ThrowOnError extends boolean = false>(options: Options<GetWorkspacePaymentReceiptsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspacePaymentReceiptsResponse, GetWorkspacePaymentReceiptsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/payment_receipts/{payment_id}.pdf',
        ...options
    });
};

/**
 * Get workspace preferences
 * Get the preferences for a given workspace.
 */
export const getWorkspacePreferences = <ThrowOnError extends boolean = false>(options: Options<GetWorkspacePreferencesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspacePreferencesResponse, GetWorkspacePreferencesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/preferences',
        ...options
    });
};

/**
 * Update workspace preferences
 * Update the preferences for a given workspace.
 */
export const postWorkspacePreferences = <ThrowOnError extends boolean = false>(options: Options<PostWorkspacePreferencesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspacePreferencesResponse, PostWorkspacePreferencesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/preferences',
        ...options
    });
};

/**
 * Get workspace project groups.
 * Get project groups for given workspace.
 */
export const getProjectGroups = <ThrowOnError extends boolean = false>(options: Options<GetProjectGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectGroupsResponse, GetProjectGroupsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/project_groups',
        ...options
    });
};

/**
 * Adds group to project.
 * Adds group to project for given workspace.
 */
export const postProjectGroup = <ThrowOnError extends boolean = false>(options: Options<PostProjectGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProjectGroupResponse, PostProjectGroupError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/project_groups',
        ...options
    });
};

/**
 * Remove project group.
 * Remove project group for a given workspace.
 */
export const deleteProjectGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectGroupResponse, DeleteProjectGroupError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/project_groups/{project_group_id}',
        ...options
    });
};

/**
 * Get workspace projects users
 * List all projects users for a given workspace.
 */
export const getWorkspaceProjectUsers = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceProjectUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceProjectUsersResponse, GetWorkspaceProjectUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/project_users',
        ...options
    });
};

/**
 * Add an user into workspace projects users
 * Include a project user for a given workspace.
 */
export const postWorkspaceProjectUsers = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceProjectUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceProjectUsersResponse, PostWorkspaceProjectUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/project_users',
        ...options
    });
};

/**
 * Get workspace projects users paginated
 * List projects users for a given workspace and set of project IDs paginated.
 */
export const postWorkspaceProjectUsersPaginated = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceProjectUsersPaginatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceProjectUsersPaginatedResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/project_users/paginated',
        ...options
    });
};

/**
 * Patch project users from workspace
 * Patch a list of project users for a given workspace.
 */
export const patchWorkspaceProjectUsersIds = <ThrowOnError extends boolean = false>(options: Options<PatchWorkspaceProjectUsersIdsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchWorkspaceProjectUsersIdsResponse, PatchWorkspaceProjectUsersIdsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/workspaces/{workspace_id}/project_users/{project_user_ids}',
        ...options
    });
};

/**
 * Delete a project user from workspace projects users
 * Delete a project user for a given workspace.
 */
export const deleteWorkspaceProjectUsers = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceProjectUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceProjectUsersResponse, DeleteWorkspaceProjectUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/project_users/{project_user_id}',
        ...options
    });
};

/**
 * Update an user into workspace projects users
 * Update the data for a project user for a given workspace.
 */
export const putWorkspaceProjectUsers = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceProjectUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceProjectUsersResponse, PutWorkspaceProjectUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/project_users/{project_user_id}',
        ...options
    });
};

/**
 * WorkspaceProjects
 * Get projects for given workspace.
 */
export const getProjects = <ThrowOnError extends boolean = false>(options: Options<GetProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectsResponse, GetProjectsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects',
        ...options
    });
};

/**
 * WorkspaceProjects
 * Create project for given workspace.
 */
export const postWorkspaceProjectCreate = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceProjectCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceProjectCreateResponse, PostWorkspaceProjectCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Projects
 * Get projects billable amounts
 */
export const postWorkspacesByWorkspaceIdProjectsBillableAmounts = <ThrowOnError extends boolean = false>(options: Options<PostWorkspacesByWorkspaceIdProjectsBillableAmountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspacesByWorkspaceIdProjectsBillableAmountsResponse, PostWorkspacesByWorkspaceIdProjectsBillableAmountsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/billable-amounts',
        ...options
    });
};

/**
 * WorkspaceProjectsTaskCount
 * Retrieves the task count for the specified projects
 */
export const workspaceProjectsTaskCount = <ThrowOnError extends boolean = false>(options: Options<WorkspaceProjectsTaskCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WorkspaceProjectsTaskCountResponse, WorkspaceProjectsTaskCountError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/task_count',
        ...options
    });
};

/**
 * WorkspaceProjectsTemplates
 * Get projects templates for given workspace.
 */
export const getProjectsTemplates = <ThrowOnError extends boolean = false>(options: Options<GetProjectsTemplatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectsTemplatesResponse, GetProjectsTemplatesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/templates',
        ...options
    });
};

/**
 * WorkspaceProjects
 * Bulk editing workspace projects.
 */
export const patchWorkspaceProjects = <ThrowOnError extends boolean = false>(options: Options<PatchWorkspaceProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchWorkspaceProjectsResponse, PatchWorkspaceProjectsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_ids}',
        ...options
    });
};

/**
 * WorkspaceProject
 * Delete project for given workspace.
 */
export const deleteWorkspaceProject = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceProjectResponse, DeleteWorkspaceProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_id}',
        ...options
    });
};

/**
 * WorkspaceProject
 * Get project for given workspace.
 */
export const getWorkspacesByWorkspaceIdProjectsByProjectId = <ThrowOnError extends boolean = false>(options: Options<GetWorkspacesByWorkspaceIdProjectsByProjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspacesByWorkspaceIdProjectsByProjectIdResponse, GetWorkspacesByWorkspaceIdProjectsByProjectIdError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_id}',
        ...options
    });
};

/**
 * WorkspaceProject
 * Update project for given workspace.
 */
export const putWorkspaceProject = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceProjectResponse, PutWorkspaceProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_id}',
        ...options
    });
};

/**
 * Get Recurring Project Periods
 * Get recurring project periods for given workspace.
 */
export const getWorkspaceProjectPeriods = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceProjectPeriodsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceProjectPeriodsResponse, GetWorkspaceProjectPeriodsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_id}/periods',
        ...options
    });
};

/**
 * WorkspaceProjects
 * Pin or unpin a project to top of user's project list
 */
export const postPinnedProject = <ThrowOnError extends boolean = false>(options: Options<PostPinnedProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PostPinnedProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_id}/pin',
        ...options
    });
};

/**
 * WorkspaceProject
 * Get statistics for given workspace and project. For time entry related information, this endpoint does not consider running ones.
 */
export const getWorkspacesByWorkspaceIdProjectsByProjectIdStatistics = <ThrowOnError extends boolean = false>(options: Options<GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsResponse, GetWorkspacesByWorkspaceIdProjectsByProjectIdStatisticsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_id}/statistics',
        ...options
    });
};

/**
 * WorkspaceProjectTasks
 * Get project tasks for given workspace.
 */
export const getWorkspaceProjectTasks = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceProjectTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceProjectTasksResponse, GetWorkspaceProjectTasksError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_id}/tasks',
        ...options
    });
};

/**
 * WorkspaceProjectTasks
 * Post project tasks for given workspace.
 */
export const postWorkspaceProjectTasks = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceProjectTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceProjectTasksResponse, PostWorkspaceProjectTasksError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_id}/tasks',
        ...options
    });
};

/**
 * WorkspaceProjectTasks
 * Patch project tasks for given workspace.
 */
export const patchWorkspaceProjectTasks = <ThrowOnError extends boolean = false>(options: Options<PatchWorkspaceProjectTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchWorkspaceProjectTasksResponse, PatchWorkspaceProjectTasksError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_ids}',
        ...options
    });
};

/**
 * WorkspaceProjectTask
 * Delete projects task for given workspace.
 */
export const deleteWorkspaceProjectTask = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceProjectTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceProjectTaskResponse, DeleteWorkspaceProjectTaskError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}',
        ...options
    });
};

/**
 * WorkspaceProjectTask
 * Get project task for given task id.
 */
export const getWorkspaceProjectTask = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceProjectTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceProjectTaskResponse, GetWorkspaceProjectTaskError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}',
        ...options
    });
};

/**
 * WorkspaceProjectTask
 * Put project task for given workspace.
 */
export const putWorkspaceProjectTask = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceProjectTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceProjectTaskResponse, PutWorkspaceProjectTaskError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}',
        ...options
    });
};

/**
 * Rates creation
 * Creates a new rate.
 */
export const createRate = <ThrowOnError extends boolean = false>(options: Options<CreateRateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateRateError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/rates',
        ...options
    });
};

/**
 * Rates list
 * Get rates by level(workspace|project|task|user).
 */
export const getRatesByLevel = <ThrowOnError extends boolean = false>(options: Options<GetRatesByLevelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRatesByLevelResponse, GetRatesByLevelError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/rates/{level}/{level_id}',
        ...options
    });
};

/**
 * workspace.SharedReport
 * Get shared report.
 */
export const getSharedReport = <ThrowOnError extends boolean = false>(options: Options<GetSharedReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSharedReportResponse, GetSharedReportError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/reports/shared',
        ...options
    });
};

/**
 * workspace.SharedReport
 * Add shared report.
 */
export const postSharedReport = <ThrowOnError extends boolean = false>(options: Options<PostSharedReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSharedReportResponse, PostSharedReportError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/reports/shared',
        ...options
    });
};

/**
 * workspace.SharedReport
 * Change shared report.
 */
export const putSharedReport = <ThrowOnError extends boolean = false>(options: Options<PutSharedReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutSharedReportResponse, PutSharedReportError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/reports/shared',
        ...options
    });
};

/**
 * SavedReport
 * Bulk delete saved reports.
 */
export const bulkDeleteSavedReportResource = <ThrowOnError extends boolean = false>(options: Options<BulkDeleteSavedReportResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BulkDeleteSavedReportResourceResponse, BulkDeleteSavedReportResourceError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/reports/shared/bulk_delete',
        ...options
    });
};

/**
 * models.SavedReport
 * Delete saved report.
 */
export const deleteSavedReportResource = <ThrowOnError extends boolean = false>(options: Options<DeleteSavedReportResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSavedReportResourceResponse, DeleteSavedReportResourceError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/reports/shared/{report_id}',
        ...options
    });
};

/**
 * models.SavedReport
 * Get a saved report.
 */
export const getSavedReportResource = <ThrowOnError extends boolean = false>(options: Options<GetSavedReportResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSavedReportResourceResponse, GetSavedReportResourceError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/reports/shared/{report_id}',
        ...options
    });
};

/**
 * models.SavedReport
 * Change saved report.
 */
export const putSavedReportResource = <ThrowOnError extends boolean = false>(options: Options<PutSavedReportResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutSavedReportResourceResponse, PutSavedReportResourceError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/reports/shared/{report_id}',
        ...options
    });
};

/**
 * Workspace restoration
 * UNdeletes the workspace
 */
export const restoreWorkspace = <ThrowOnError extends boolean = false>(options: Options<RestoreWorkspaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RestoreWorkspaceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/restore',
        ...options
    });
};

/**
 * ScheduledReports
 * Lists scheduled reports.
 */
export const getWorkspaceScheduledReports = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceScheduledReportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceScheduledReportsResponse, GetWorkspaceScheduledReportsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/scheduled_reports',
        ...options
    });
};

/**
 * ScheduledReports
 * Endpoint for setting up a scheduled report.
 */
export const postWorkspaceScheduledReports = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceScheduledReportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceScheduledReportsResponse, PostWorkspaceScheduledReportsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/scheduled_reports',
        ...options
    });
};

/**
 * ScheduledReport
 * Endpoint for delete a scheduled report.
 */
export const deleteWorkspaceScheduledReports = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceScheduledReportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceScheduledReportsResponse, DeleteWorkspaceScheduledReportsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/scheduled_reports/{report_id}',
        ...options
    });
};

/**
 * Workspace statistics
 * Returns workspace admins list, members count and groups count
 */
export const getWorkspaceStatistics = <ThrowOnError extends boolean = false>(options?: Options<GetWorkspaceStatisticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkspaceStatisticsResponse, GetWorkspaceStatisticsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/statistics',
        ...options
    });
};

/**
 * Subscription
 * Returns subscription data.
 */
export const getWorkspaceSubscription = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceSubscriptionResponse, GetWorkspaceSubscriptionError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/subscription',
        ...options
    });
};

/**
 * PurchaseOrderPdf
 * Returns a Purchase Order document in PDF form.
 */
export const getWorkspacePurchaseOrderPdf = <ThrowOnError extends boolean = false>(options: Options<GetWorkspacePurchaseOrderPdfData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspacePurchaseOrderPdfResponse, GetWorkspacePurchaseOrderPdfError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/subscription/purchase_orders/{purchase_order_id}.pdf',
        ...options
    });
};

/**
 * Tags
 * List Workspace tags.
 */
export const getWorkspaceTag = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceTagResponse, GetWorkspaceTagError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/tags',
        ...options
    });
};

/**
 * Bulk delete tags
 * Patch will not be executed if there are errors with some records.
 */
export const patchWorkspaceTags = <ThrowOnError extends boolean = false>(options: Options<PatchWorkspaceTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchWorkspaceTagsResponse, PatchWorkspaceTagsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/tags',
        ...options
    });
};

/**
 * Create tag
 * Create workspace tags.
 */
export const postWorkspaceTag = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceTagResponse, PostWorkspaceTagError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/tags',
        ...options
    });
};

/**
 * Delete tag
 * Delete workspace tags.
 */
export const deleteWorkspaceTag = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceTagResponse, DeleteWorkspaceTagError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/tags/{tag_id}',
        ...options
    });
};

/**
 * Update tag
 * Update workspace tags.
 */
export const putWorkspaceTag = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceTagResponse, PutWorkspaceTagError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/tags/{tag_id}',
        ...options
    });
};

/**
 * Tasks
 * List Workspace tasks.
 */
export const getWorkspaceTasks = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceTasksResponse, GetWorkspaceTasksError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/tasks',
        ...options
    });
};

/**
 * Tasks
 * List Workspace tasks.
 */
export const getWorkspaceTasksBasic = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceTasksBasicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceTasksBasicResponse, GetWorkspaceTasksBasicError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/tasks/basic',
        ...options
    });
};

/**
 * List tasks for given project_ids
 * List tasks from workspace by project_ids
 */
export const getWorkspaceTasksData = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceTasksDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetWorkspaceTasksDataResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/tasks/data',
        ...options
    });
};

/**
 * TimeEntries
 * Creates a new workspace TimeEntry.
 */
export const postWorkspaceTimeEntries = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceTimeEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceTimeEntriesResponse, PostWorkspaceTimeEntriesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/time_entries',
        ...options
    });
};

/**
 * Bulk editing time entries
 * In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback.
 */
export const patchTimeEntries = <ThrowOnError extends boolean = false>(options: Options<PatchTimeEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchTimeEntriesResponse, PatchTimeEntriesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/time_entries/{time_entry_ids}',
        ...options
    });
};

/**
 * TimeEntries
 * Deletes a workspace time entry.
 */
export const deleteWorkspaceTimeEntries = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceTimeEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceTimeEntriesResponse, DeleteWorkspaceTimeEntriesError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/time_entries/{time_entry_id}',
        ...options
    });
};

/**
 * TimeEntries
 * Updates a workspace time entry.
 */
export const putWorkspaceTimeEntryHandler = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceTimeEntryHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceTimeEntryHandlerResponse, PutWorkspaceTimeEntryHandlerError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/time_entries/{time_entry_id}',
        ...options
    });
};

/**
 * Stop TimeEntry
 * Stops a workspace time entry.
 */
export const patchWorkspaceStopTimeEntryHandler = <ThrowOnError extends boolean = false>(options: Options<PatchWorkspaceStopTimeEntryHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchWorkspaceStopTimeEntryHandlerResponse, PatchWorkspaceStopTimeEntryHandlerError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/time_entries/{time_entry_id}/stop',
        ...options
    });
};

/**
 * Get workspace time entry constraints
 * Get the time entry constraints for a given workspace.
 */
export const getWorkspaceTimeEntryConstraints = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceTimeEntryConstraintsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceTimeEntryConstraintsResponse, GetWorkspaceTimeEntryConstraintsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/time_entry_constraints',
        ...options
    });
};

/**
 * Post workspace time entry constraints
 * Post the time entry constraints for a given workspace.
 */
export const postWorkspaceTimeEntryConstraints = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceTimeEntryConstraintsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceTimeEntryConstraintsResponse, PostWorkspaceTimeEntryConstraintsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/time_entry_constraints',
        ...options
    });
};

/**
 * TimeEntries
 * Get invitations for time entries
 */
export const getWorkspaceTimeEntryInvitations = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceTimeEntryInvitationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceTimeEntryInvitationsResponse, GetWorkspaceTimeEntryInvitationsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/time_entry_invitations',
        ...options
    });
};

/**
 * TimeEntries
 * Accept or reject an invitation for a time entry
 */
export const postWorkspaceTimeEntryInvitationAction = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceTimeEntryInvitationActionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceTimeEntryInvitationActionResponse, PostWorkspaceTimeEntryInvitationActionError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/time_entry_invitations/{time_entry_invitation_id}/{action}',
        ...options
    });
};

/**
 * Get timesheet setups
 * Get timesheet setups for a given workspace.
 */
export const getTimesheetSetups = <ThrowOnError extends boolean = false>(options: Options<GetTimesheetSetupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTimesheetSetupsResponse, GetTimesheetSetupsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/timesheet_setups',
        ...options
    });
};

/**
 * Create a timesheet setup
 * Create timesheet setups.
 */
export const postTimesheetSetups = <ThrowOnError extends boolean = false>(options: Options<PostTimesheetSetupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTimesheetSetupsResponse, PostTimesheetSetupsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/timesheet_setups',
        ...options
    });
};

/**
 * Delete a timesheet setup
 * Delete a timesheet setup for a given workspace.
 */
export const deleteTimesheetSetups = <ThrowOnError extends boolean = false>(options: Options<DeleteTimesheetSetupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTimesheetSetupsResponse, DeleteTimesheetSetupsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/timesheet_setups/{setup_id}',
        ...options
    });
};

/**
 * Update a timesheet setup
 * Updates a timesheet setups.
 */
export const putTimesheetSetups = <ThrowOnError extends boolean = false>(options: Options<PutTimesheetSetupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PutTimesheetSetupsResponse, PutTimesheetSetupsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/timesheet_setups/{setup_id}',
        ...options
    });
};

/**
 * Get timesheets
 * Get timesheets applying various filters.
 */
export const getWorkspaceTimesheetsHandler = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceTimesheetsHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceTimesheetsHandlerResponse, GetWorkspaceTimesheetsHandlerError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/timesheets',
        ...options
    });
};

/**
 * Update a batch of timesheets
 * Updates a batch of timesheets.
 */
export const putWorkspaceTimesheets = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceTimesheetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceTimesheetsResponse, PutWorkspaceTimesheetsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/timesheets',
        ...options
    });
};

/**
 * Get timesheets hours
 * Get timesheet working hours and total tracked seconds.
 */
export const getWorkspaceTimesheetHoursHandler = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceTimesheetHoursHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetWorkspaceTimesheetHoursHandlerResponse, GetWorkspaceTimesheetHoursHandlerError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/timesheets/hours',
        ...options
    });
};

/**
 * Update timesheets
 * Updates a timesheet.
 */
export const putWorkspaceTimesheet = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceTimesheetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceTimesheetResponse, PutWorkspaceTimesheetError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}',
        ...options
    });
};

/**
 * Get timesheet time entries
 * Get the time entries from within a timesheet timeframe.
 */
export const getWorkspaceTimesheetTimeEntriesHandler = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceTimesheetTimeEntriesHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceTimesheetTimeEntriesHandlerResponse, GetWorkspaceTimesheetTimeEntriesHandlerError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}/time_entries',
        ...options
    });
};

/**
 * TrackReminders
 * Returns a list of track reminders.
 */
export const getWorkspaceTrackReminders = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceTrackRemindersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceTrackRemindersResponse, GetWorkspaceTrackRemindersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/track_reminders',
        ...options
    });
};

/**
 * TrackReminders
 * Creates a workspace tracking reminder.
 */
export const postWorkspaceTrackReminders = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceTrackRemindersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceTrackRemindersResponse, PostWorkspaceTrackRemindersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/track_reminders',
        ...options
    });
};

/**
 * TrackReminder
 * Deletes a workspace tracking reminder.
 */
export const deleteWorkspaceTrackReminder = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceTrackReminderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceTrackReminderResponse, DeleteWorkspaceTrackReminderError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/track_reminders/{reminder_id}',
        ...options
    });
};

/**
 * TrackReminder
 * Updates a workspace tracking reminder.
 */
export const putWorkspaceTrackReminder = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceTrackReminderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceTrackReminderResponse, PutWorkspaceTrackReminderError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/track_reminders/{reminder_id}',
        ...options
    });
};

/**
 * Remove Workspace suspension
 * Remove Workspace from suspended state
 */
export const unsuspendWorkspace = <ThrowOnError extends boolean = false>(options: Options<UnsuspendWorkspaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UnsuspendWorkspaceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/unsuspend',
        ...options
    });
};

/**
 * Get workspace users
 * List all users for a given workspace.
 */
export const getWorkspaceUsers = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceUsersResponse, GetWorkspaceUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/users',
        ...options
    });
};

/**
 * Get workspace users data
 * List of the specified workspace users basic data for a given workspace.
 */
export const postWorkspaceUsersData = <ThrowOnError extends boolean = false>(options: Options<PostWorkspaceUsersDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkspaceUsersDataResponse, PostWorkspaceUsersDataError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/users/data',
        ...options
    });
};

/**
 * Update workspace user
 * Update the data for a user in a given workspace.
 */
export const putWorkspaceUsers = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceUsersResponse, PutWorkspaceUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/users/{user_id}',
        ...options
    });
};

/**
 * Validates VAT for a given country and tax number
 * Validates VAT for a given country and tax number
 */
export const validateTax = <ThrowOnError extends boolean = false>(options: Options<ValidateTaxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ValidateTaxResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/validate_vat',
        ...options
    });
};

/**
 * Get workspace workspace-users
 * List all workspace_users for a given workspace.
 */
export const getWorkspaceWorkspaceUsers = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceWorkspaceUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceWorkspaceUsersResponse, GetWorkspaceWorkspaceUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/workspace_users',
        ...options
    });
};

/**
 * Delete workspace user
 * Removes user from workspace
 */
export const deleteWorkspaceUser = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteWorkspaceUserError, ThrowOnError>({
        url: '/workspaces/{workspace_id}/workspace_users/{workspace_user_id}',
        ...options
    });
};

/**
 * Update workspace-user
 * Update the data for a workspace_user in a given workspace.
 */
export const putWorkspaceWorkspaceUsers = <ThrowOnError extends boolean = false>(options: Options<PutWorkspaceWorkspaceUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWorkspaceWorkspaceUsersResponse, PutWorkspaceWorkspaceUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspace_id}/workspace_users/{workspace_user_id}',
        ...options
    });
};