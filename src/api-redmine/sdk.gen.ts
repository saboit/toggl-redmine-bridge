// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  GetIssuesData,
  GetIssuesResponse,
  CreateIssueData,
  CreateIssueResponse,
  DeleteIssueData,
  DeleteIssueResponse,
  GetIssueData,
  GetIssueResponse,
  UpdateIssueData,
  UpdateIssueResponse,
  AddWatcherData,
  AddWatcherResponse,
  RemoveWatcherData,
  RemoveWatcherResponse,
  GetProjectsData,
  GetProjectsResponse,
  CreateProjectData,
  CreateProjectResponse,
  CreateProjectError,
  DeleteProjectData,
  DeleteProjectResponse,
  GetProjectData,
  GetProjectResponse,
  UpdateProjectData,
  UpdateProjectResponse,
  ArchiveProjectData,
  ArchiveProjectResponse,
  UnarchiveProjectData,
  UnarchiveProjectResponse,
  GetMembershipsData,
  GetMembershipsResponse,
  CreateMembershipData,
  CreateMembershipResponse,
  DeleteMembershipData,
  DeleteMembershipResponse,
  GetMembershipData,
  GetMembershipResponse,
  UpdateMembershipData,
  UpdateMembershipResponse,
  UpdateMembershipError,
  CloseProjectData,
  CloseProjectResponse,
  ReopenProjectData,
  ReopenProjectResponse,
  GetUsersData,
  GetUsersResponse,
  CreateUserData,
  CreateUserResponse,
  CreateUserError,
  DeleteUserData,
  DeleteUserResponse,
  GetUserData,
  GetUserResponse,
  UpdateUserData,
  UpdateUserResponse,
  UpdateUserError,
  GetCurrentUserData,
  GetCurrentUserResponse,
  GetTimeEntriesData,
  GetTimeEntriesResponse,
  CreateTimeEntryData,
  CreateTimeEntryResponse,
  CreateTimeEntryError,
  DeleteTimeEntryData,
  DeleteTimeEntryResponse,
  GetTimeEntryData,
  GetTimeEntryResponse,
  UpdateTimeEntryData,
  UpdateTimeEntryResponse,
  UpdateTimeEntryError,
  GetNewsListData,
  GetNewsListResponse,
  DeleteNewsData,
  DeleteNewsResponse,
  GetNewsData,
  GetNewsResponse,
  UpdateNewsData,
  UpdateNewsResponse,
  GetNewsListByProjectData,
  GetNewsListByProjectResponse,
  CreateNewsData,
  CreateNewsResponse,
  GetIssueRelationsData,
  GetIssueRelationsResponse,
  CreateIssueRelationData,
  CreateIssueRelationResponse,
  CreateIssueRelationError,
  DeleteIssueRelationData,
  DeleteIssueRelationResponse,
  DeleteIssueRelationError,
  GetIssueRelationData,
  GetIssueRelationResponse,
  GetVersionsByProjectData,
  GetVersionsByProjectResponse,
  CreateVersionData,
  CreateVersionResponse,
  CreateVersionError,
  DeleteVersionData,
  DeleteVersionResponse,
  DeleteVersionError,
  GetVersionsData,
  GetVersionsResponse,
  UpdateVersionData,
  UpdateVersionResponse,
  UpdateVersionError,
  GetWikiPagesData,
  GetWikiPagesResponse,
  DeleteWikiPageData,
  DeleteWikiPageResponse,
  GetWikiPageData,
  GetWikiPageResponse,
  UpdateWikiPageData,
  UpdateWikiPageResponse,
  UpdateWikiPageError,
  GetWikiPageByVersionData,
  GetWikiPageByVersionResponse,
  GetQueriesData,
  GetQueriesResponse,
  DeleteAttachmentData,
  DeleteAttachmentResponse,
  GetAttachmentData,
  GetAttachmentResponse,
  UpdateAttachmentData,
  UpdateAttachmentResponse,
  DownloadAttachmentFileData,
  DownloadAttachmentFileResponse,
  DownloadThumbnailData,
  DownloadThumbnailResponse,
  GetIssueStatusesData,
  GetIssueStatusesResponse,
  GetTrackersData,
  GetTrackersResponse,
  GetIssueCategoriesData,
  GetIssueCategoriesResponse,
  CreateIssueCategoryData,
  CreateIssueCategoryResponse,
  CreateIssueCategoryError,
  GetIssuePrioritiesData,
  GetIssuePrioritiesResponse,
  GetTimeEntryActivitiesData,
  GetTimeEntryActivitiesResponse,
  GetDocumentCategoriesData,
  GetDocumentCategoriesResponse,
  DeleteIssueCategoryData,
  DeleteIssueCategoryResponse,
  GetIssueCategoryData,
  GetIssueCategoryResponse,
  UpdateIssueCategoryData,
  UpdateIssueCategoryResponse,
  UpdateIssueCategoryError,
  GetRolesData,
  GetRolesResponse,
  GetRoleData,
  GetRoleResponse,
  GetGroupsData,
  GetGroupsResponse,
  CreateGroupData,
  CreateGroupResponse,
  CreateGroupError,
  DeleteGroupData,
  DeleteGroupResponse,
  GetGroupData,
  GetGroupResponse,
  UpdateGroupData,
  UpdateGroupResponse,
  AddUserToGroupData,
  AddUserToGroupResponse,
  RemoveUserFromGroupData,
  RemoveUserFromGroupResponse,
  GetCustomFieldsData,
  GetCustomFieldsResponse,
  SearchData,
  SearchResponse,
  GetFilesData,
  GetFilesResponse,
  CreateFileData,
  CreateFileResponse,
  GetMyAccountData,
  GetMyAccountResponse,
  UpdateMyAccountData,
  UpdateMyAccountResponse,
  UpdateMyAccountError,
  UpdateJournalData,
  UpdateJournalResponse,
  UploadAttachmentFileData,
  UploadAttachmentFileResponse,
  UploadAttachmentFileError,
  AddRelatedIssueData,
  AddRelatedIssueResponse,
  RemoveRelatedIssueData,
  RemoveRelatedIssueResponse,
} from "./types.gen.js";
import { client as _heyApiClient } from "./client.gen.js";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List issues
 */
export const getIssues = <ThrowOnError extends boolean = false>(
  options: Options<GetIssuesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetIssuesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/issues.{format}",
    ...options,
  });
};

/**
 * Create issue
 */
export const createIssue = <ThrowOnError extends boolean = false>(
  options: Options<CreateIssueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateIssueResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/issues.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete issue
 */
export const deleteIssue = <ThrowOnError extends boolean = false>(
  options: Options<DeleteIssueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteIssueResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/issues/{issue_id}.{format}",
    ...options,
  });
};

/**
 * Show issue
 */
export const getIssue = <ThrowOnError extends boolean = false>(
  options: Options<GetIssueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetIssueResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/issues/{issue_id}.{format}",
    ...options,
  });
};

/**
 * Update issue
 */
export const updateIssue = <ThrowOnError extends boolean = false>(
  options: Options<UpdateIssueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateIssueResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/issues/{issue_id}.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Add watcher
 */
export const addWatcher = <ThrowOnError extends boolean = false>(
  options: Options<AddWatcherData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddWatcherResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/issues/{issue_id}/watchers.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Remove watcher
 */
export const removeWatcher = <ThrowOnError extends boolean = false>(
  options: Options<RemoveWatcherData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveWatcherResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/issues/{issue_id}/watchers/{user_id}.{format}",
    ...options,
  });
};

/**
 * List projects
 */
export const getProjects = <ThrowOnError extends boolean = false>(
  options: Options<GetProjectsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetProjectsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/projects.{format}",
    ...options,
  });
};

/**
 * Crete project
 */
export const createProject = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectResponse,
    CreateProjectError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete project
 */
export const deleteProject = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}.{format}",
    ...options,
  });
};

/**
 * Show project
 */
export const getProject = <ThrowOnError extends boolean = false>(
  options: Options<GetProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetProjectResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/projects/{project_id}.{format}",
    ...options,
  });
};

/**
 * Update project
 */
export const updateProject = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Archive project
 */
export const archiveProject = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    ArchiveProjectResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/archive.{format}",
    ...options,
  });
};

/**
 * Unarchive project
 */
export const unarchiveProject = <ThrowOnError extends boolean = false>(
  options: Options<UnarchiveProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UnarchiveProjectResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/unarchive.{format}",
    ...options,
  });
};

/**
 * List memberships
 */
export const getMemberships = <ThrowOnError extends boolean = false>(
  options: Options<GetMembershipsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetMembershipsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/memberships.{format}",
    ...options,
  });
};

/**
 * Create membership
 */
export const createMembership = <ThrowOnError extends boolean = false>(
  options: Options<CreateMembershipData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateMembershipResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/memberships.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete membership
 */
export const deleteMembership = <ThrowOnError extends boolean = false>(
  options: Options<DeleteMembershipData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteMembershipResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/memberships/{membership_id}.{format}",
    ...options,
  });
};

/**
 * Show membership
 */
export const getMembership = <ThrowOnError extends boolean = false>(
  options: Options<GetMembershipData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetMembershipResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/memberships/{membership_id}.{format}",
    ...options,
  });
};

/**
 * Update membership
 */
export const updateMembership = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMembershipData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateMembershipResponse,
    UpdateMembershipError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/memberships/{membership_id}.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Close project
 */
export const closeProject = <ThrowOnError extends boolean = false>(
  options: Options<CloseProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    CloseProjectResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/close.{format}",
    ...options,
  });
};

/**
 * Reopen project
 */
export const reopenProject = <ThrowOnError extends boolean = false>(
  options: Options<ReopenProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    ReopenProjectResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/reopen.{format}",
    ...options,
  });
};

/**
 * List users
 */
export const getUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUsersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/users.{format}",
    ...options,
  });
};

/**
 * Create user
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserResponse,
    CreateUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/users.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/users/{user_id}.{format}",
    ...options,
  });
};

/**
 * Show user
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options: Options<GetUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/users/{user_id}.{format}",
    ...options,
  });
};

/**
 * Update user
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserResponse,
    UpdateUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/users/{user_id}.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Show current user
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(
  options: Options<GetCurrentUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCurrentUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/users/current.{format}",
    ...options,
  });
};

/**
 * List time entries
 */
export const getTimeEntries = <ThrowOnError extends boolean = false>(
  options: Options<GetTimeEntriesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTimeEntriesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/time_entries.{format}",
    ...options,
  });
};

/**
 * Create time entry
 */
export const createTimeEntry = <ThrowOnError extends boolean = false>(
  options: Options<CreateTimeEntryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateTimeEntryResponse,
    CreateTimeEntryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/time_entries.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete time entry
 */
export const deleteTimeEntry = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTimeEntryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteTimeEntryResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/time_entries/{time_entry_id}.{format}",
    ...options,
  });
};

/**
 * Show time entry
 */
export const getTimeEntry = <ThrowOnError extends boolean = false>(
  options: Options<GetTimeEntryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTimeEntryResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/time_entries/{time_entry_id}.{format}",
    ...options,
  });
};

/**
 * Update time entry
 */
export const updateTimeEntry = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTimeEntryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateTimeEntryResponse,
    UpdateTimeEntryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/time_entries/{time_entry_id}.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List news
 */
export const getNewsList = <ThrowOnError extends boolean = false>(
  options: Options<GetNewsListData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetNewsListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/news.{format}",
    ...options,
  });
};

/**
 * Delete news
 */
export const deleteNews = <ThrowOnError extends boolean = false>(
  options: Options<DeleteNewsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteNewsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/news/{news_id}.{format}",
    ...options,
  });
};

/**
 * Show news
 */
export const getNews = <ThrowOnError extends boolean = false>(
  options: Options<GetNewsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetNewsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/news/{news_id}.{format}",
    ...options,
  });
};

/**
 * Update news
 */
export const updateNews = <ThrowOnError extends boolean = false>(
  options: Options<UpdateNewsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateNewsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/news/{news_id}.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List news by project
 */
export const getNewsListByProject = <ThrowOnError extends boolean = false>(
  options: Options<GetNewsListByProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetNewsListByProjectResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/news.{format}",
    ...options,
  });
};

/**
 * Create news
 */
export const createNews = <ThrowOnError extends boolean = false>(
  options: Options<CreateNewsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateNewsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/news.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List issue relations
 */
export const getIssueRelations = <ThrowOnError extends boolean = false>(
  options: Options<GetIssueRelationsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetIssueRelationsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/issues/{issue_id}/relations.{format}",
    ...options,
  });
};

/**
 * Create issue relation
 */
export const createIssueRelation = <ThrowOnError extends boolean = false>(
  options: Options<CreateIssueRelationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateIssueRelationResponse,
    CreateIssueRelationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/issues/{issue_id}/relations.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete issue relation
 */
export const deleteIssueRelation = <ThrowOnError extends boolean = false>(
  options: Options<DeleteIssueRelationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteIssueRelationResponse,
    DeleteIssueRelationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/relations/{issue_relation_id}.{format}",
    ...options,
  });
};

/**
 * Show issue relation
 */
export const getIssueRelation = <ThrowOnError extends boolean = false>(
  options: Options<GetIssueRelationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetIssueRelationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/relations/{issue_relation_id}.{format}",
    ...options,
  });
};

/**
 * List versions by project
 */
export const getVersionsByProject = <ThrowOnError extends boolean = false>(
  options: Options<GetVersionsByProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetVersionsByProjectResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/versions.{format}",
    ...options,
  });
};

/**
 * Create version
 */
export const createVersion = <ThrowOnError extends boolean = false>(
  options: Options<CreateVersionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateVersionResponse,
    CreateVersionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/versions.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete version
 */
export const deleteVersion = <ThrowOnError extends boolean = false>(
  options: Options<DeleteVersionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteVersionResponse,
    DeleteVersionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/versions/{version_id}.{format}",
    ...options,
  });
};

/**
 * Show version
 */
export const getVersions = <ThrowOnError extends boolean = false>(
  options: Options<GetVersionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetVersionsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/versions/{version_id}.{format}",
    ...options,
  });
};

/**
 * Update version
 */
export const updateVersion = <ThrowOnError extends boolean = false>(
  options: Options<UpdateVersionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateVersionResponse,
    UpdateVersionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/versions/{version_id}.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List wiki pages
 */
export const getWikiPages = <ThrowOnError extends boolean = false>(
  options: Options<GetWikiPagesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetWikiPagesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/wiki/index.{format}",
    ...options,
  });
};

/**
 * Delete wiki page
 */
export const deleteWikiPage = <ThrowOnError extends boolean = false>(
  options: Options<DeleteWikiPageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteWikiPageResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/wiki/{wiki_page_title}.{format}",
    ...options,
  });
};

/**
 * Show wiki page
 */
export const getWikiPage = <ThrowOnError extends boolean = false>(
  options: Options<GetWikiPageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetWikiPageResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/wiki/{wiki_page_title}.{format}",
    ...options,
  });
};

/**
 * Create or update wiki page
 */
export const updateWikiPage = <ThrowOnError extends boolean = false>(
  options: Options<UpdateWikiPageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateWikiPageResponse,
    UpdateWikiPageError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/wiki/{wiki_page_title}.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Show wiki page by specific version
 */
export const getWikiPageByVersion = <ThrowOnError extends boolean = false>(
  options: Options<GetWikiPageByVersionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetWikiPageByVersionResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/wiki/{wiki_page_title}/{version_id}.{format}",
    ...options,
  });
};

/**
 * List queries
 */
export const getQueries = <ThrowOnError extends boolean = false>(
  options: Options<GetQueriesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetQueriesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/queries.{format}",
    ...options,
  });
};

/**
 * Delete attachment
 */
export const deleteAttachment = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAttachmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAttachmentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/attachments/{attachment_id}.{format}",
    ...options,
  });
};

/**
 * Show attachment
 */
export const getAttachment = <ThrowOnError extends boolean = false>(
  options: Options<GetAttachmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAttachmentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/attachments/{attachment_id}.{format}",
    ...options,
  });
};

/**
 * Update attachment
 */
export const updateAttachment = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAttachmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateAttachmentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/attachments/{attachment_id}.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Download attachment file
 */
export const downloadAttachmentFile = <ThrowOnError extends boolean = false>(
  options: Options<DownloadAttachmentFileData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadAttachmentFileResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/attachments/download/{attachment_id}/{filename}",
    ...options,
  });
};

/**
 * Download thumbnail
 */
export const downloadThumbnail = <ThrowOnError extends boolean = false>(
  options: Options<DownloadThumbnailData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadThumbnailResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/attachments/thumbnail/{attachment_id}",
    ...options,
  });
};

/**
 * List issue statuses
 */
export const getIssueStatuses = <ThrowOnError extends boolean = false>(
  options: Options<GetIssueStatusesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetIssueStatusesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/issue_statuses.{format}",
    ...options,
  });
};

/**
 * List trackers
 */
export const getTrackers = <ThrowOnError extends boolean = false>(
  options: Options<GetTrackersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTrackersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/trackers.{format}",
    ...options,
  });
};

/**
 * List issue categories
 */
export const getIssueCategories = <ThrowOnError extends boolean = false>(
  options: Options<GetIssueCategoriesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetIssueCategoriesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/issue_categories.{format}",
    ...options,
  });
};

/**
 * Create issue category
 */
export const createIssueCategory = <ThrowOnError extends boolean = false>(
  options: Options<CreateIssueCategoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateIssueCategoryResponse,
    CreateIssueCategoryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/issue_categories.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List issue priorities
 */
export const getIssuePriorities = <ThrowOnError extends boolean = false>(
  options: Options<GetIssuePrioritiesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetIssuePrioritiesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/enumerations/issue_priorities.{format}",
    ...options,
  });
};

/**
 * List time entry activities
 */
export const getTimeEntryActivities = <ThrowOnError extends boolean = false>(
  options: Options<GetTimeEntryActivitiesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTimeEntryActivitiesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/enumerations/time_entry_activities.{format}",
    ...options,
  });
};

/**
 * List document categories
 */
export const getDocumentCategories = <ThrowOnError extends boolean = false>(
  options: Options<GetDocumentCategoriesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetDocumentCategoriesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/enumerations/document_categories.{format}",
    ...options,
  });
};

/**
 * Delete issue category
 */
export const deleteIssueCategory = <ThrowOnError extends boolean = false>(
  options: Options<DeleteIssueCategoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteIssueCategoryResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/issue_categories/{issue_category_id}.{format}",
    ...options,
  });
};

/**
 * Show issue category
 */
export const getIssueCategory = <ThrowOnError extends boolean = false>(
  options: Options<GetIssueCategoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetIssueCategoryResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/issue_categories/{issue_category_id}.{format}",
    ...options,
  });
};

/**
 * Update issue category
 */
export const updateIssueCategory = <ThrowOnError extends boolean = false>(
  options: Options<UpdateIssueCategoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateIssueCategoryResponse,
    UpdateIssueCategoryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/issue_categories/{issue_category_id}.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List roles
 */
export const getRoles = <ThrowOnError extends boolean = false>(
  options: Options<GetRolesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRolesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/roles.{format}",
    ...options,
  });
};

/**
 * Show role
 */
export const getRole = <ThrowOnError extends boolean = false>(
  options: Options<GetRoleData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRoleResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/roles/{role_id}.{format}",
    ...options,
  });
};

/**
 * List groups
 */
export const getGroups = <ThrowOnError extends boolean = false>(
  options: Options<GetGroupsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetGroupsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/groups.{format}",
    ...options,
  });
};

/**
 * Create group
 */
export const createGroup = <ThrowOnError extends boolean = false>(
  options: Options<CreateGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGroupResponse,
    CreateGroupError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/groups.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete group
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGroupResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/groups/{group_id}.{format}",
    ...options,
  });
};

/**
 * Show group
 */
export const getGroup = <ThrowOnError extends boolean = false>(
  options: Options<GetGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetGroupResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/groups/{group_id}.{format}",
    ...options,
  });
};

/**
 * Update group
 */
export const updateGroup = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateGroupResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/groups/{group_id}.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Add user to group
 */
export const addUserToGroup = <ThrowOnError extends boolean = false>(
  options: Options<AddUserToGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddUserToGroupResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/groups/{group_id}/users.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Remove user from group
 */
export const removeUserFromGroup = <ThrowOnError extends boolean = false>(
  options: Options<RemoveUserFromGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveUserFromGroupResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/groups/{group_id}/users/{user_id}.{format}",
    ...options,
  });
};

/**
 * List custom fields
 */
export const getCustomFields = <ThrowOnError extends boolean = false>(
  options: Options<GetCustomFieldsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCustomFieldsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/custom_fields.{format}",
    ...options,
  });
};

/**
 * Search
 */
export const search = <ThrowOnError extends boolean = false>(
  options: Options<SearchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/search.{format}",
    ...options,
  });
};

/**
 * List files
 */
export const getFiles = <ThrowOnError extends boolean = false>(
  options: Options<GetFilesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetFilesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/files.{format}",
    ...options,
  });
};

/**
 * Create file
 */
export const createFile = <ThrowOnError extends boolean = false>(
  options: Options<CreateFileData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateFileResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/files.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Show my account
 */
export const getMyAccount = <ThrowOnError extends boolean = false>(
  options: Options<GetMyAccountData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetMyAccountResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/my/account.{format}",
    ...options,
  });
};

/**
 * Update my account
 */
export const updateMyAccount = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMyAccountData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateMyAccountResponse,
    UpdateMyAccountError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/my/account.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update journal
 */
export const updateJournal = <ThrowOnError extends boolean = false>(
  options: Options<UpdateJournalData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateJournalResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/journals/{journal_id}.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Upload attachment file
 */
export const uploadAttachmentFile = <ThrowOnError extends boolean = false>(
  options: Options<UploadAttachmentFileData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UploadAttachmentFileResponse,
    UploadAttachmentFileError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/uploads.{format}",
    ...options,
    headers: {
      "Content-Type": "application/octet-stream",
      ...options?.headers,
    },
  });
};

/**
 * Add related issue
 */
export const addRelatedIssue = <ThrowOnError extends boolean = false>(
  options: Options<AddRelatedIssueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddRelatedIssueResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/repository/{repository_id}/revisions/{revision}/issues.{format}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Remove related issue
 */
export const removeRelatedIssue = <ThrowOnError extends boolean = false>(
  options: Options<RemoveRelatedIssueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveRelatedIssueResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "basic",
        type: "http",
      },
      {
        name: "X-Redmine-API-Key",
        type: "apiKey",
      },
      {
        in: "query",
        name: "key",
        type: "apiKey",
      },
    ],
    url: "/projects/{project_id}/repository/{repository_id}/revisions/{revision}/issues/{issue_id}.{format}",
    ...options,
  });
};
