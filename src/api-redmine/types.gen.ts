// This file is auto-generated by @hey-api/openapi-ts

export type IdName = {
    id: number;
    name: string;
};

export type IssueStatus = {
    id: number;
    name: string;
    is_closed: boolean;
};

export type CustomFieldValue = {
    id: number;
    name: string;
    multiple?: boolean;
    [key: string]: unknown | number | string | boolean | undefined;
};

export type IssueSimple = {
    id: number;
    project: IdName;
    tracker: IdName;
    status: IssueStatus;
    priority: IdName;
    author: IdName;
    assigned_to?: IdName;
    category?: IdName;
    subject: string;
    description: string | null;
    start_date: string | null;
    due_date: string | null;
    done_ratio: number;
    is_private: boolean;
    estimated_hours: number | null;
    total_estimated_hours: number | null;
    spent_hours?: number;
    total_spent_hours?: number;
    custom_fields?: Array<CustomFieldValue>;
    created_on: string;
    updated_on: string;
    closed_on: string | null;
};

export type CustomFields = Array<{
    id: number;
    [key: string]: unknown | number;
}>;

export type CustomFieldValues = {};

export type Uploads = Array<{
    token?: string;
    filename?: string;
    description?: string;
    content_type?: string;
}>;

export type Issue = {
    id: number;
    project: IdName;
    tracker: IdName;
    status: IssueStatus;
    priority: IdName;
    author: IdName;
    assigned_to?: IdName;
    category?: IdName;
    subject: string;
    description: string | null;
    start_date: string | null;
    due_date: string | null;
    done_ratio: number;
    is_private: boolean;
    estimated_hours: number | null;
    total_estimated_hours: number | null;
    spent_hours?: number;
    total_spent_hours?: number;
    custom_fields?: Array<CustomFieldValue>;
    created_on: string;
    updated_on: string;
    closed_on: string | null;
    changesets?: Array<string>;
    children?: Array<{
        id: number;
        tracker: IdName;
        subject: string;
    }>;
    attachments?: Array<{
        id: number;
        filename: string;
        filesize: number;
        content_type: string;
        description: string;
        content_url: string;
        author: IdName;
        created_on: string;
        thumbnail_url?: string;
    }>;
    relations?: Array<{
        id?: number;
        issue_id?: number;
        issue_to_id?: number;
        relation_type?: string;
        delay?: number | null;
    }>;
    journals?: Array<{
        id: number;
        user: IdName;
        notes: string;
        created_on: string;
        private_notes: boolean;
        details: Array<{
            property: string;
            name: string;
            old_value: string | null;
            new_value: string | null;
        }>;
    }>;
    watchers?: Array<IdName>;
    allowed_statuses?: Array<IssueStatus>;
};

export type ProjectSimple = {
    id: number;
    name: string;
    identifier: string;
    description: string | null;
    parent?: IdName;
    status: number;
    is_public: boolean;
    inherit_members: boolean;
    custom_fields?: Array<CustomFieldValue>;
    trackers?: Array<IdName>;
    issue_categories?: Array<IdName>;
    time_entry_activities?: Array<IdName>;
    enabled_modules?: Array<IdName>;
    issue_custom_fields?: Array<IdName>;
    created_on: string;
    updated_on: string;
};

export type Project = {
    id: number;
    name: string;
    identifier: string;
    description: string | null;
    homepage?: string | null;
    parent?: IdName;
    status: number;
    is_public: boolean;
    inherit_members: boolean;
    default_version?: IdName;
    default_assignee?: IdName;
    custom_fields?: Array<CustomFieldValue>;
    trackers?: Array<IdName>;
    issue_categories?: Array<IdName>;
    time_entry_activities?: Array<IdName>;
    enabled_modules?: Array<IdName>;
    issue_custom_fields?: Array<IdName>;
    created_on: string;
    updated_on: string;
};

export type Errors = {
    errors: Array<string>;
};

export type Membership = {
    id: number;
    project: IdName;
    user?: IdName;
    group?: IdName;
    roles: Array<IdName>;
};

export type UserSimple = {
    id: number;
    login: string;
    admin: boolean;
    firstname: string;
    lastname: string;
    mail: string;
    created_on: string;
    updated_on: string;
    last_login_on: string | null;
    passwd_changed_on: string | null;
    twofa_scheme: {
        [key: string]: unknown;
    } | null;
    custom_fields?: Array<CustomFieldValue>;
};

export type Pref = {
    hide_mail?: boolean;
    time_zone?: string | null;
    comments_sorting?: 'asc' | 'desc';
    warn_on_leaving_unsaved?: boolean;
    no_self_notified?: boolean;
    notify_about_high_priority_issues?: boolean;
    textarea_font?: 'monospace' | 'proportional';
    recently_used_projects?: number;
    history_default_tab?: 'notes' | 'history' | 'properties' | 'time_entries' | 'changesets' | 'last_tab_visited';
    toolbar_language_options?: string;
    default_issue_query?: number | null;
    default_project_query?: number | null;
    auto_watch_on?: 'issue_contributed_to';
};

export type User = {
    id: number;
    login: string;
    admin: boolean;
    firstname: string;
    lastname: string;
    mail: string;
    created_on: string;
    updated_on: string;
    last_login_on: string | null;
    passwd_changed_on: string | null;
    twofa_scheme: {
        [key: string]: unknown;
    } | null;
    api_key: string;
    status: number;
    custom_fields?: Array<CustomFieldValue>;
    groups?: Array<IdName>;
    memberships?: Array<{
        id: number;
        project: IdName;
        roles: Array<{
            id: number;
            name: string;
            inherited?: boolean;
        }>;
    }>;
};

export type TimeEntry = {
    id: number;
    project?: IdName;
    issue?: {
        id: number;
    };
    user: IdName;
    activity: IdName;
    hours: number;
    comments: string | null;
    spent_on: string;
    created_on: string;
    updated_on: string;
    custom_fields?: Array<CustomFieldValue>;
};

export type Attachment = {
    id: number;
    filename: string;
    filesize: number;
    content_type: string;
    description: string;
    content_url: string;
    thumbnail_url?: string;
    author: IdName;
    created_on: string;
};

export type NewsComment = {
    id: number;
    author: IdName;
    content: string;
};

export type News = {
    id: number;
    project: IdName;
    author: IdName;
    title: string;
    summary?: string;
    description: string;
    created_on: string;
    attachments?: Array<Attachment>;
    comments?: Array<NewsComment>;
};

export type IssueRelation = {
    id: number;
    issue_id: number;
    issue_to_id: number;
    relation_type: string;
    delay: number | null;
};

export type VersionSimple = {
    id: number;
    project: IdName;
    name: string;
    description: string | null;
    status: 'open' | 'locked' | 'closed';
    due_date: string | null;
    sharing: 'none' | 'descendants' | 'hierarchy' | 'tree' | 'system';
    wiki_page_title: string | null;
    custom_fields?: Array<CustomFieldValue>;
    created_on: string;
    updated_on: string;
};

export type Version = {
    id: number;
    project: IdName;
    name: string;
    description: string | null;
    status: 'open' | 'locked' | 'closed';
    due_date: string | null;
    sharing: 'none' | 'descendants' | 'hierarchy' | 'tree' | 'system';
    wiki_page_title: string | null;
    estimated_hours?: number;
    spent_hours?: number;
    custom_fields?: Array<CustomFieldValue>;
    created_on: string;
    updated_on: string;
};

export type WikiPages = {
    title: number;
    parent?: {
        title: string;
    };
    version: number;
    created_on: string;
    updated_on: string;
};

export type WikiPage = {
    title: string;
    parent?: {
        title: string;
    };
    text: string;
    version: number;
    author: IdName;
    comments: string | null;
    created_on: string;
    updated_on: string;
    attachments?: Array<Attachment>;
};

export type Query = {
    id: number;
    name: string;
    is_public: boolean;
    project_id: number | null;
};

export type Tracker = {
    id?: number;
    name?: string;
    default_status?: IdName;
    description?: string | null;
    enabled_standard_fields?: Array<string>;
};

export type IssueCategory = {
    id: number;
    project: IdName;
    name: string;
    assigned_to?: IdName;
};

export type IssuePriority = {
    id: number;
    name: string;
    is_default: boolean;
    active: boolean;
    custom_fields?: Array<CustomFieldValue>;
};

export type TimeEntryActivity = {
    id: number;
    name: string;
    is_default: boolean;
    active: boolean;
    custom_fields?: Array<CustomFieldValue>;
};

export type DocumentCategory = {
    id: number;
    name: string;
    is_default: boolean;
    active: boolean;
    custom_fields?: Array<CustomFieldValue>;
};

export type Role = {
    id: number;
    name: string;
    assignable: boolean;
    issues_visibility?: string;
    time_entries_visibility: string;
    users_visibility: string;
    permissions: Array<string>;
};

export type GroupSimple = {
    id: number;
    name: string;
    custom_fields?: Array<CustomFieldValue>;
};

export type Group = {
    id: number;
    name: string;
    custom_fields?: Array<CustomFieldValue>;
    users?: Array<IdName>;
    memberships?: Array<{
        id: number;
        project: IdName;
        roles: Array<IdName>;
    }>;
};

export type CustomField = {
    id?: number;
    name?: string;
    customized_type?: 'issue' | 'time_entry' | 'project' | 'version' | 'document' | 'user' | 'group' | 'time_entry_activity' | 'issue_priority' | 'document_category';
    field_format?: 'enumeration' | 'string' | 'version' | 'attachment' | 'user' | 'list' | 'link' | 'float' | 'int' | 'date' | 'bool' | 'text';
    regexp?: string;
    min_length?: number | null;
    max_length?: number | null;
    is_required?: boolean;
    is_filter?: boolean;
    searchable?: boolean;
    multiple?: boolean;
    default_value?: string | null;
    visible?: boolean;
    trackers?: Array<IdName>;
    roles?: Array<Role>;
    possible_values?: Array<{
        value?: string;
        label?: string;
    }>;
};

export type Search = {
    id: number;
    title: string;
    type: string;
    url: string;
    description: string;
    datetime: string;
};

export type File = {
    id: number;
    filename: string;
    filesize: number;
    content_type: string;
    description: string;
    content_url: string;
    thumbnail_url?: string;
    author: IdName;
    created_on: string;
    version?: IdName;
    digest: string;
    downloads: number;
};

export type MyAccount = {
    user: {
        id: number;
        login: string;
        admin: boolean;
        firstname: string;
        lastname: string;
        mail: string;
        created_on: string;
        last_login_on: string;
        api_key: string;
        custom_fields?: Array<CustomFieldValue>;
    };
};

export type Format = 'json' | 'xml';

export type Offset = number;

export type Limit = number;

export type Nometa = 1;

export type XRedmineSwitchUser = string;

export type XRedmineNometa = 1;

export type IssueId = number;

export type UserId = number;

export type ProjectId = number;

export type MembershipId = number;

export type TimeEntryId = number;

export type NewsId = number;

export type IssueRelationId = number;

export type VersionId = number;

export type WikiPageTitle = string;

export type AttachmentId = number;

export type Filename = string;

export type IssueCategoryId = number;

export type RoleId = number;

export type GroupId = number;

export type JournalId = number;

export type RepositoryId = number;

export type Revision = string;

export type GetIssuesData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
        'X-Redmine-Nometa'?: 1;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: {
        offset?: number;
        limit?: number;
        nometa?: 1;
        sort?: string;
        include?: Array<'attachments' | 'relations'>;
        issue_id?: Array<string>;
        project_id?: Array<string>;
        subproject_id?: Array<string>;
        tracker_id?: Array<string>;
        status_id?: Array<string>;
        assigned_to_id?: Array<string>;
        parent_id?: Array<string>;
        cf_x?: {
            [key: string]: string;
        };
        author_id?: Array<string>;
        member_of_group?: Array<string>;
        assigned_to_role?: Array<string>;
        fixed_version_id?: Array<string>;
        'fixed_version.due_date'?: string;
        'fixed_version.status'?: Array<string>;
        category_id?: Array<string>;
        subject?: string;
        description?: string;
        notes?: string;
        created_on?: string;
        updated_on?: string;
        closed_on?: string;
        start_date?: string;
        due_date?: string;
        estimated_hours?: string;
        spent_time?: string;
        done_ratio?: string;
        is_private?: string;
        attachment?: string;
        attachment_description?: string;
        watcher_id?: Array<string>;
        updated_by?: Array<string>;
        last_updated_by?: Array<string>;
        'project.status'?: number;
        relation_type?: Array<string>;
        child_id?: Array<string>;
        query_id?: number;
    };
    url: '/issues.{format}';
};

export type GetIssuesResponses = {
    200: {
        issues: Array<IssueSimple>;
        total_count?: number;
        offset?: number;
        limit?: number;
    };
};

export type GetIssuesResponse = GetIssuesResponses[keyof GetIssuesResponses];

export type CreateIssueData = {
    body?: {
        issue: {
            project_id: number;
            tracker_id?: number;
            status_id?: number;
            priority_id?: number;
            subject: string;
            description?: string | null;
            start_date?: string | null;
            due_date?: string | null;
            done_ratio?: number;
            category_id?: number | null;
            fixed_version_id?: number | null;
            assigned_to_id?: number | null;
            parent_issue_id?: number | null;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
            watcher_user_ids?: Array<number>;
            is_private?: boolean;
            estimated_hours?: number | null;
            uploads?: Uploads;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/issues.{format}';
};

export type CreateIssueResponses = {
    201: {
        issue: IssueSimple;
    };
};

export type CreateIssueResponse = CreateIssueResponses[keyof CreateIssueResponses];

export type DeleteIssueData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        issue_id: number;
    };
    query?: never;
    url: '/issues/{issue_id}.{format}';
};

export type DeleteIssueResponses = {
    204: void;
};

export type DeleteIssueResponse = DeleteIssueResponses[keyof DeleteIssueResponses];

export type GetIssueData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        issue_id: number;
    };
    query?: {
        include?: Array<'children' | 'attachments' | 'relations' | 'changesets' | 'journals' | 'watchers' | 'allowed_statuses'>;
    };
    url: '/issues/{issue_id}.{format}';
};

export type GetIssueResponses = {
    200: {
        issue: Issue;
    };
};

export type GetIssueResponse = GetIssueResponses[keyof GetIssueResponses];

export type UpdateIssueData = {
    body?: {
        issue?: {
            project_id?: number;
            tracker_id?: number;
            status_id?: number;
            priority_id?: number;
            subject?: string;
            description?: string | null;
            start_date?: string | null;
            due_date?: string | null;
            done_ratio?: number;
            category_id?: number | null;
            fixed_version_id?: number | null;
            assigned_to_id?: number | null;
            parent_issue_id?: number | null;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
            watcher_user_ids?: Array<number>;
            is_private?: boolean;
            estimated_hours?: number | null;
            notes?: string;
            private_notes?: string;
            uploads?: Uploads;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        issue_id: number;
    };
    query?: never;
    url: '/issues/{issue_id}.{format}';
};

export type UpdateIssueResponses = {
    204: void;
};

export type UpdateIssueResponse = UpdateIssueResponses[keyof UpdateIssueResponses];

export type AddWatcherData = {
    body?: {
        user_id: number;
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        issue_id: number;
    };
    query?: never;
    url: '/issues/{issue_id}/watchers.{format}';
};

export type AddWatcherResponses = {
    204: void;
};

export type AddWatcherResponse = AddWatcherResponses[keyof AddWatcherResponses];

export type RemoveWatcherData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        issue_id: number;
        user_id: number;
    };
    query?: never;
    url: '/issues/{issue_id}/watchers/{user_id}.{format}';
};

export type RemoveWatcherResponses = {
    204: void;
};

export type RemoveWatcherResponse = RemoveWatcherResponses[keyof RemoveWatcherResponses];

export type GetProjectsData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
        'X-Redmine-Nometa'?: 1;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: {
        offset?: number;
        limit?: number;
        nometa?: 1;
        include?: Array<'trackers' | 'issue_categories' | 'time_entry_activities' | 'enabled_modules' | 'issue_custom_fields'>;
        status?: Array<number>;
        id?: Array<string>;
        name?: string;
        description?: string;
        parent_id?: Array<string>;
        is_public?: Array<'0' | '1'>;
        created_on?: string;
    };
    url: '/projects.{format}';
};

export type GetProjectsResponses = {
    200: {
        projects: Array<ProjectSimple>;
        total_count?: number;
        offset?: number;
        limit?: number;
    };
};

export type GetProjectsResponse = GetProjectsResponses[keyof GetProjectsResponses];

export type CreateProjectData = {
    body?: {
        project: {
            name: string;
            identifier: string;
            description?: string | null;
            homepage?: string | null;
            is_public?: boolean;
            parent_id?: number | null;
            inherit_members?: boolean;
            default_assigned_to_id?: number | null;
            default_version_id?: number | null;
            tracker_ids?: Array<number>;
            enabled_module_names?: Array<string>;
            issue_custom_field_ids?: Array<number>;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/projects.{format}';
};

export type CreateProjectErrors = {
    422: Errors;
};

export type CreateProjectError = CreateProjectErrors[keyof CreateProjectErrors];

export type CreateProjectResponses = {
    201: {
        project: Project;
    };
};

export type CreateProjectResponse = CreateProjectResponses[keyof CreateProjectResponses];

export type DeleteProjectData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}.{format}';
};

export type DeleteProjectResponses = {
    204: void;
};

export type DeleteProjectResponse = DeleteProjectResponses[keyof DeleteProjectResponses];

export type GetProjectData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: {
        include?: Array<'trackers' | 'issue_categories' | 'time_entry_activities' | 'enabled_modules' | 'issue_custom_fields'>;
    };
    url: '/projects/{project_id}.{format}';
};

export type GetProjectResponses = {
    200: {
        project: Project;
    };
};

export type GetProjectResponse = GetProjectResponses[keyof GetProjectResponses];

export type UpdateProjectData = {
    body?: {
        project?: {
            name?: string;
            description?: string | null;
            homepage?: string | null;
            is_public?: boolean;
            parent_id?: number | null;
            inherit_members?: boolean;
            default_assigned_to_id?: number | null;
            default_version_id?: number | null;
            tracker_ids?: Array<number>;
            enabled_module_names?: Array<string>;
            issue_custom_field_ids?: Array<number>;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}.{format}';
};

export type UpdateProjectResponses = {
    204: void;
};

export type UpdateProjectResponse = UpdateProjectResponses[keyof UpdateProjectResponses];

export type ArchiveProjectData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}/archive.{format}';
};

export type ArchiveProjectResponses = {
    204: void;
};

export type ArchiveProjectResponse = ArchiveProjectResponses[keyof ArchiveProjectResponses];

export type UnarchiveProjectData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}/unarchive.{format}';
};

export type UnarchiveProjectResponses = {
    204: void;
};

export type UnarchiveProjectResponse = UnarchiveProjectResponses[keyof UnarchiveProjectResponses];

export type GetMembershipsData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
        'X-Redmine-Nometa'?: 1;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: {
        offset?: number;
        limit?: number;
        nometa?: 1;
    };
    url: '/projects/{project_id}/memberships.{format}';
};

export type GetMembershipsResponses = {
    200: {
        memberships: Array<Membership>;
        total_count?: number;
        offset?: number;
        limit?: number;
    };
};

export type GetMembershipsResponse = GetMembershipsResponses[keyof GetMembershipsResponses];

export type CreateMembershipData = {
    body?: {
        membership: {
            user_id: number;
            role_ids: Array<number>;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}/memberships.{format}';
};

export type CreateMembershipResponses = {
    201: {
        membership: Membership;
    };
};

export type CreateMembershipResponse = CreateMembershipResponses[keyof CreateMembershipResponses];

export type DeleteMembershipData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        membership_id: number;
    };
    query?: never;
    url: '/memberships/{membership_id}.{format}';
};

export type DeleteMembershipResponses = {
    204: void;
};

export type DeleteMembershipResponse = DeleteMembershipResponses[keyof DeleteMembershipResponses];

export type GetMembershipData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        membership_id: number;
    };
    query?: never;
    url: '/memberships/{membership_id}.{format}';
};

export type GetMembershipResponses = {
    200: {
        membership: Membership;
    };
};

export type GetMembershipResponse = GetMembershipResponses[keyof GetMembershipResponses];

export type UpdateMembershipData = {
    body?: {
        membership?: {
            role_ids: Array<number>;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        membership_id: number;
    };
    query?: never;
    url: '/memberships/{membership_id}.{format}';
};

export type UpdateMembershipErrors = {
    422: Errors;
};

export type UpdateMembershipError = UpdateMembershipErrors[keyof UpdateMembershipErrors];

export type UpdateMembershipResponses = {
    204: void;
};

export type UpdateMembershipResponse = UpdateMembershipResponses[keyof UpdateMembershipResponses];

export type CloseProjectData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}/close.{format}';
};

export type CloseProjectResponses = {
    204: void;
};

export type CloseProjectResponse = CloseProjectResponses[keyof CloseProjectResponses];

export type ReopenProjectData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}/reopen.{format}';
};

export type ReopenProjectResponses = {
    204: void;
};

export type ReopenProjectResponse = ReopenProjectResponses[keyof ReopenProjectResponses];

export type GetUsersData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
        'X-Redmine-Nometa'?: 1;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: {
        offset?: number;
        limit?: number;
        nometa?: 1;
        status?: number;
        name?: string;
        group_id?: number;
    };
    url: '/users.{format}';
};

export type GetUsersResponses = {
    200: {
        users: Array<UserSimple>;
        total_count?: number;
        offset?: number;
        limit?: number;
    };
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type CreateUserData = {
    body?: {
        user: {
            login: string;
            admin?: boolean;
            password?: string;
            firstname: string;
            lastname: string;
            mail: string;
            language?: string;
            auth_source_id?: number | null;
            mail_notification?: 'all' | 'selected' | 'only_my_events' | 'only_assigned' | 'only_owner' | 'none';
            notified_project_ids?: Array<number>;
            must_change_passwd?: boolean;
            generate_password?: boolean;
            status?: number;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
        };
        send_information?: boolean;
        pref?: Pref;
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/users.{format}';
};

export type CreateUserErrors = {
    422: Errors;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    201: {
        user?: User;
    };
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}.{format}';
};

export type DeleteUserResponses = {
    204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        user_id: number;
    };
    query?: {
        include?: Array<'memberships' | 'groups'>;
    };
    url: '/users/{user_id}.{format}';
};

export type GetUserResponses = {
    200: {
        user: User;
    };
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
    body?: {
        user?: {
            login?: string;
            admin?: boolean;
            password?: string;
            firstname?: string;
            lastname?: string;
            mail?: string;
            language?: string;
            auth_source_id?: number | null;
            mail_notification?: 'all' | 'selected' | 'only_my_events' | 'only_assigned' | 'only_owner' | 'none';
            notified_project_ids?: Array<number>;
            must_change_passwd?: boolean;
            generate_password?: boolean;
            status?: number;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
            group_ids?: Array<number>;
        };
        send_information?: boolean;
        pref?: Pref;
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}.{format}';
};

export type UpdateUserErrors = {
    422: Errors;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
    204: void;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type GetCurrentUserData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: {
        include?: Array<'memberships' | 'groups'>;
    };
    url: '/users/current.{format}';
};

export type GetCurrentUserResponses = {
    200: {
        user: User;
    };
};

export type GetCurrentUserResponse = GetCurrentUserResponses[keyof GetCurrentUserResponses];

export type GetTimeEntriesData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
        'X-Redmine-Nometa'?: 1;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: {
        offset?: number;
        limit?: number;
        nometa?: 1;
        user_id?: Array<string>;
        project_id?: Array<string>;
        spent_on?: string;
        from?: string;
        to?: string;
        subproject_id?: Array<string>;
        issue_id?: Array<string>;
        'issue.tracker_id'?: Array<string>;
        'issue.status_id'?: Array<string>;
        'issue.fixed_version_id'?: Array<string>;
        'issue.category_id'?: Array<string>;
        author_id?: Array<string>;
        activity_id?: Array<string>;
        'project.status'?: Array<string>;
        comments?: string;
        hours?: string;
        sort?: string;
    };
    url: '/time_entries.{format}';
};

export type GetTimeEntriesResponses = {
    200: {
        time_entries: Array<TimeEntry>;
        total_count?: number;
        offset?: number;
        limit?: number;
    };
};

export type GetTimeEntriesResponse = GetTimeEntriesResponses[keyof GetTimeEntriesResponses];

export type CreateTimeEntryData = {
    body?: {
        time_entry: {
            issue_id?: number;
            project_id?: number;
            spent_on?: string;
            hours: number;
            activity_id?: number;
            comments?: string;
            user_id?: number;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/time_entries.{format}';
};

export type CreateTimeEntryErrors = {
    422: Errors;
};

export type CreateTimeEntryError = CreateTimeEntryErrors[keyof CreateTimeEntryErrors];

export type CreateTimeEntryResponses = {
    201: {
        time_entry: TimeEntry;
    };
};

export type CreateTimeEntryResponse = CreateTimeEntryResponses[keyof CreateTimeEntryResponses];

export type DeleteTimeEntryData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        time_entry_id: number;
    };
    query?: never;
    url: '/time_entries/{time_entry_id}.{format}';
};

export type DeleteTimeEntryResponses = {
    204: void;
};

export type DeleteTimeEntryResponse = DeleteTimeEntryResponses[keyof DeleteTimeEntryResponses];

export type GetTimeEntryData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        time_entry_id: number;
    };
    query?: never;
    url: '/time_entries/{time_entry_id}.{format}';
};

export type GetTimeEntryResponses = {
    200: {
        time_entry: TimeEntry;
    };
};

export type GetTimeEntryResponse = GetTimeEntryResponses[keyof GetTimeEntryResponses];

export type UpdateTimeEntryData = {
    body?: {
        time_entry?: {
            issue_id?: number;
            project_id?: number;
            spent_on?: string;
            hours: number;
            activity_id?: number;
            comments?: string;
            user_id?: number;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        time_entry_id: number;
    };
    query?: never;
    url: '/time_entries/{time_entry_id}.{format}';
};

export type UpdateTimeEntryErrors = {
    422: Errors;
};

export type UpdateTimeEntryError = UpdateTimeEntryErrors[keyof UpdateTimeEntryErrors];

export type UpdateTimeEntryResponses = {
    204: void;
};

export type UpdateTimeEntryResponse = UpdateTimeEntryResponses[keyof UpdateTimeEntryResponses];

export type GetNewsListData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
        'X-Redmine-Nometa'?: 1;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: {
        offset?: number;
        limit?: number;
        nometa?: 1;
    };
    url: '/news.{format}';
};

export type GetNewsListResponses = {
    200: {
        news: Array<News>;
        total_count?: number;
        offset?: number;
        limit?: number;
    };
};

export type GetNewsListResponse = GetNewsListResponses[keyof GetNewsListResponses];

export type DeleteNewsData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        news_id: number;
    };
    query?: never;
    url: '/news/{news_id}.{format}';
};

export type DeleteNewsResponses = {
    204: void;
};

export type DeleteNewsResponse = DeleteNewsResponses[keyof DeleteNewsResponses];

export type GetNewsData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        news_id: number;
    };
    query?: {
        include?: Array<'attachments' | 'comments'>;
    };
    url: '/news/{news_id}.{format}';
};

export type GetNewsResponses = {
    200: {
        news: News;
    };
};

export type GetNewsResponse = GetNewsResponses[keyof GetNewsResponses];

export type UpdateNewsData = {
    body?: {
        news?: {
            title?: string;
            summary?: string;
            description?: string;
            uploads?: Array<{
                token?: string;
                filename?: string;
                description?: string;
                content_type?: string;
            }>;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        news_id: number;
    };
    query?: never;
    url: '/news/{news_id}.{format}';
};

export type UpdateNewsResponses = {
    204: void;
};

export type UpdateNewsResponse = UpdateNewsResponses[keyof UpdateNewsResponses];

export type GetNewsListByProjectData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
        'X-Redmine-Nometa'?: 1;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: {
        offset?: number;
        limit?: number;
        nometa?: 1;
    };
    url: '/projects/{project_id}/news.{format}';
};

export type GetNewsListByProjectResponses = {
    200: {
        news: Array<News>;
        total_count?: number;
        offset?: number;
        limit?: number;
    };
};

export type GetNewsListByProjectResponse = GetNewsListByProjectResponses[keyof GetNewsListByProjectResponses];

export type CreateNewsData = {
    body?: {
        news: {
            title?: string;
            summary?: string;
            description?: string;
            uploads?: Array<{
                token?: string;
                filename?: string;
                description?: string;
                content_type?: string;
            }>;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}/news.{format}';
};

export type CreateNewsResponses = {
    204: void;
};

export type CreateNewsResponse = CreateNewsResponses[keyof CreateNewsResponses];

export type GetIssueRelationsData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        issue_id: number;
    };
    query?: never;
    url: '/issues/{issue_id}/relations.{format}';
};

export type GetIssueRelationsResponses = {
    200: {
        relations: Array<IssueRelation>;
    };
};

export type GetIssueRelationsResponse = GetIssueRelationsResponses[keyof GetIssueRelationsResponses];

export type CreateIssueRelationData = {
    body?: {
        relation: {
            issue_to_id: number;
            relation_type: 'relates' | 'duplicates' | 'duplicated' | 'blocks' | 'blocked' | 'precedes' | 'follows' | 'copied_to' | 'copied_from';
            delay?: number | null;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        issue_id: number;
    };
    query?: never;
    url: '/issues/{issue_id}/relations.{format}';
};

export type CreateIssueRelationErrors = {
    422: Errors;
};

export type CreateIssueRelationError = CreateIssueRelationErrors[keyof CreateIssueRelationErrors];

export type CreateIssueRelationResponses = {
    201: {
        relation: IssueRelation;
    };
};

export type CreateIssueRelationResponse = CreateIssueRelationResponses[keyof CreateIssueRelationResponses];

export type DeleteIssueRelationData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        issue_relation_id: number;
    };
    query?: never;
    url: '/relations/{issue_relation_id}.{format}';
};

export type DeleteIssueRelationErrors = {
    422: Errors;
};

export type DeleteIssueRelationError = DeleteIssueRelationErrors[keyof DeleteIssueRelationErrors];

export type DeleteIssueRelationResponses = {
    204: void;
};

export type DeleteIssueRelationResponse = DeleteIssueRelationResponses[keyof DeleteIssueRelationResponses];

export type GetIssueRelationData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        issue_relation_id: number;
    };
    query?: never;
    url: '/relations/{issue_relation_id}.{format}';
};

export type GetIssueRelationResponses = {
    200: {
        relation: IssueRelation;
    };
};

export type GetIssueRelationResponse = GetIssueRelationResponses[keyof GetIssueRelationResponses];

export type GetVersionsByProjectData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
        'X-Redmine-Nometa'?: 1;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: {
        nometa?: 1;
    };
    url: '/projects/{project_id}/versions.{format}';
};

export type GetVersionsByProjectResponses = {
    200: {
        versions: Array<VersionSimple>;
        total_count?: number;
    };
};

export type GetVersionsByProjectResponse = GetVersionsByProjectResponses[keyof GetVersionsByProjectResponses];

export type CreateVersionData = {
    body?: {
        version: {
            name: string;
            status?: 'open' | 'locked' | 'closed';
            sharing?: 'none' | 'descendants' | 'hierarchy' | 'tree' | 'system';
            due_date?: string | null;
            description?: string;
            wiki_page_title?: string | null;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}/versions.{format}';
};

export type CreateVersionErrors = {
    422: Errors;
};

export type CreateVersionError = CreateVersionErrors[keyof CreateVersionErrors];

export type CreateVersionResponses = {
    201: {
        version: Version;
    };
};

export type CreateVersionResponse = CreateVersionResponses[keyof CreateVersionResponses];

export type DeleteVersionData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        version_id: number;
    };
    query?: never;
    url: '/versions/{version_id}.{format}';
};

export type DeleteVersionErrors = {
    422: Errors;
};

export type DeleteVersionError = DeleteVersionErrors[keyof DeleteVersionErrors];

export type DeleteVersionResponses = {
    204: void;
};

export type DeleteVersionResponse = DeleteVersionResponses[keyof DeleteVersionResponses];

export type GetVersionsData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        version_id: number;
    };
    query?: never;
    url: '/versions/{version_id}.{format}';
};

export type GetVersionsResponses = {
    200: {
        version: Version;
    };
};

export type GetVersionsResponse = GetVersionsResponses[keyof GetVersionsResponses];

export type UpdateVersionData = {
    body?: {
        version?: {
            name?: string;
            status?: 'open' | 'locked' | 'closed';
            sharing?: 'none' | 'descendants' | 'hierarchy' | 'tree' | 'system';
            due_date?: string | null;
            description?: string;
            wiki_page_title?: string | null;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        version_id: number;
    };
    query?: never;
    url: '/versions/{version_id}.{format}';
};

export type UpdateVersionErrors = {
    422: Errors;
};

export type UpdateVersionError = UpdateVersionErrors[keyof UpdateVersionErrors];

export type UpdateVersionResponses = {
    204: void;
};

export type UpdateVersionResponse = UpdateVersionResponses[keyof UpdateVersionResponses];

export type GetWikiPagesData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}/wiki/index.{format}';
};

export type GetWikiPagesResponses = {
    200: {
        wiki_pages: Array<WikiPages>;
    };
};

export type GetWikiPagesResponse = GetWikiPagesResponses[keyof GetWikiPagesResponses];

export type DeleteWikiPageData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
        wiki_page_title: string;
    };
    query?: never;
    url: '/projects/{project_id}/wiki/{wiki_page_title}.{format}';
};

export type DeleteWikiPageResponses = {
    204: void;
};

export type DeleteWikiPageResponse = DeleteWikiPageResponses[keyof DeleteWikiPageResponses];

export type GetWikiPageData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
        wiki_page_title: string;
    };
    query?: {
        include?: 'attachments';
    };
    url: '/projects/{project_id}/wiki/{wiki_page_title}.{format}';
};

export type GetWikiPageResponses = {
    200: {
        wiki_page: WikiPage;
    };
};

export type GetWikiPageResponse = GetWikiPageResponses[keyof GetWikiPageResponses];

export type UpdateWikiPageData = {
    body?: {
        wiki_page?: {
            text: string;
            comments?: string;
            version?: number;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
        wiki_page_title: string;
    };
    query?: never;
    url: '/projects/{project_id}/wiki/{wiki_page_title}.{format}';
};

export type UpdateWikiPageErrors = {
    409: Errors;
    422: Errors;
};

export type UpdateWikiPageError = UpdateWikiPageErrors[keyof UpdateWikiPageErrors];

export type UpdateWikiPageResponses = {
    201: {
        wiki_page: WikiPage;
    };
    204: void;
};

export type UpdateWikiPageResponse = UpdateWikiPageResponses[keyof UpdateWikiPageResponses];

export type GetWikiPageByVersionData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
        wiki_page_title: string;
        version_id: number;
    };
    query?: {
        include?: 'attachments';
    };
    url: '/projects/{project_id}/wiki/{wiki_page_title}/{version_id}.{format}';
};

export type GetWikiPageByVersionResponses = {
    200: {
        wiki_page: WikiPage;
    };
};

export type GetWikiPageByVersionResponse = GetWikiPageByVersionResponses[keyof GetWikiPageByVersionResponses];

export type GetQueriesData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
        'X-Redmine-Nometa'?: 1;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: {
        offset?: number;
        limit?: number;
        nometa?: 1;
    };
    url: '/queries.{format}';
};

export type GetQueriesResponses = {
    200: {
        queries: Array<Query>;
        total_count?: number;
        offset?: number;
        limit?: number;
    };
};

export type GetQueriesResponse = GetQueriesResponses[keyof GetQueriesResponses];

export type DeleteAttachmentData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        attachment_id: number;
    };
    query?: never;
    url: '/attachments/{attachment_id}.{format}';
};

export type DeleteAttachmentResponses = {
    204: void;
};

export type DeleteAttachmentResponse = DeleteAttachmentResponses[keyof DeleteAttachmentResponses];

export type GetAttachmentData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        attachment_id: number;
    };
    query?: never;
    url: '/attachments/{attachment_id}.{format}';
};

export type GetAttachmentResponses = {
    200: {
        attachment: Attachment;
    };
};

export type GetAttachmentResponse = GetAttachmentResponses[keyof GetAttachmentResponses];

export type UpdateAttachmentData = {
    body?: {
        attachment?: {
            filename?: string;
            description?: string;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        attachment_id: number;
    };
    query?: never;
    url: '/attachments/{attachment_id}.{format}';
};

export type UpdateAttachmentResponses = {
    204: void;
};

export type UpdateAttachmentResponse = UpdateAttachmentResponses[keyof UpdateAttachmentResponses];

export type DownloadAttachmentFileData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        attachment_id: number;
        filename: string;
    };
    query?: never;
    url: '/attachments/download/{attachment_id}/{filename}';
};

export type DownloadAttachmentFileResponses = {
    200: Blob | File;
};

export type DownloadAttachmentFileResponse = DownloadAttachmentFileResponses[keyof DownloadAttachmentFileResponses];

export type DownloadThumbnailData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        attachment_id: number;
    };
    query?: never;
    url: '/attachments/thumbnail/{attachment_id}';
};

export type DownloadThumbnailResponses = {
    200: Blob | File;
};

export type DownloadThumbnailResponse = DownloadThumbnailResponses[keyof DownloadThumbnailResponses];

export type GetIssueStatusesData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/issue_statuses.{format}';
};

export type GetIssueStatusesResponses = {
    200: {
        issue_statuses: Array<IssueStatus>;
    };
};

export type GetIssueStatusesResponse = GetIssueStatusesResponses[keyof GetIssueStatusesResponses];

export type GetTrackersData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/trackers.{format}';
};

export type GetTrackersResponses = {
    200: {
        trackers: Array<Tracker>;
    };
};

export type GetTrackersResponse = GetTrackersResponses[keyof GetTrackersResponses];

export type GetIssueCategoriesData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
        'X-Redmine-Nometa'?: 1;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: {
        nometa?: 1;
    };
    url: '/projects/{project_id}/issue_categories.{format}';
};

export type GetIssueCategoriesResponses = {
    200: {
        issue_categories: Array<IssueCategory>;
        total_count?: number;
    };
};

export type GetIssueCategoriesResponse = GetIssueCategoriesResponses[keyof GetIssueCategoriesResponses];

export type CreateIssueCategoryData = {
    body?: {
        issue_category: {
            name: string;
            assigned_to_id?: number;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}/issue_categories.{format}';
};

export type CreateIssueCategoryErrors = {
    422: Errors;
};

export type CreateIssueCategoryError = CreateIssueCategoryErrors[keyof CreateIssueCategoryErrors];

export type CreateIssueCategoryResponses = {
    201: {
        issue_category: IssueCategory;
    };
};

export type CreateIssueCategoryResponse = CreateIssueCategoryResponses[keyof CreateIssueCategoryResponses];

export type GetIssuePrioritiesData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/enumerations/issue_priorities.{format}';
};

export type GetIssuePrioritiesResponses = {
    200: {
        issue_priorities: Array<IssuePriority>;
    };
};

export type GetIssuePrioritiesResponse = GetIssuePrioritiesResponses[keyof GetIssuePrioritiesResponses];

export type GetTimeEntryActivitiesData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/enumerations/time_entry_activities.{format}';
};

export type GetTimeEntryActivitiesResponses = {
    200: {
        time_entry_activities: Array<TimeEntryActivity>;
    };
};

export type GetTimeEntryActivitiesResponse = GetTimeEntryActivitiesResponses[keyof GetTimeEntryActivitiesResponses];

export type GetDocumentCategoriesData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/enumerations/document_categories.{format}';
};

export type GetDocumentCategoriesResponses = {
    200: {
        document_categories: Array<DocumentCategory>;
    };
};

export type GetDocumentCategoriesResponse = GetDocumentCategoriesResponses[keyof GetDocumentCategoriesResponses];

export type DeleteIssueCategoryData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        issue_category_id: number;
    };
    query?: {
        reassign_to_id?: number;
    };
    url: '/issue_categories/{issue_category_id}.{format}';
};

export type DeleteIssueCategoryResponses = {
    204: void;
};

export type DeleteIssueCategoryResponse = DeleteIssueCategoryResponses[keyof DeleteIssueCategoryResponses];

export type GetIssueCategoryData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        issue_category_id: number;
    };
    query?: never;
    url: '/issue_categories/{issue_category_id}.{format}';
};

export type GetIssueCategoryResponses = {
    200: {
        issue_category: IssueCategory;
    };
};

export type GetIssueCategoryResponse = GetIssueCategoryResponses[keyof GetIssueCategoryResponses];

export type UpdateIssueCategoryData = {
    body?: {
        issue_category?: {
            name?: string;
            assigned_to_id?: number;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        issue_category_id: number;
    };
    query?: never;
    url: '/issue_categories/{issue_category_id}.{format}';
};

export type UpdateIssueCategoryErrors = {
    422: Errors;
};

export type UpdateIssueCategoryError = UpdateIssueCategoryErrors[keyof UpdateIssueCategoryErrors];

export type UpdateIssueCategoryResponses = {
    204: void;
};

export type UpdateIssueCategoryResponse = UpdateIssueCategoryResponses[keyof UpdateIssueCategoryResponses];

export type GetRolesData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/roles.{format}';
};

export type GetRolesResponses = {
    200: {
        roles: Array<IdName>;
    };
};

export type GetRolesResponse = GetRolesResponses[keyof GetRolesResponses];

export type GetRoleData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        role_id: number;
    };
    query?: never;
    url: '/roles/{role_id}.{format}';
};

export type GetRoleResponses = {
    200: {
        role: Role;
    };
};

export type GetRoleResponse = GetRoleResponses[keyof GetRoleResponses];

export type GetGroupsData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/groups.{format}';
};

export type GetGroupsResponses = {
    200: {
        groups: Array<GroupSimple>;
    };
};

export type GetGroupsResponse = GetGroupsResponses[keyof GetGroupsResponses];

export type CreateGroupData = {
    body?: {
        group: {
            name?: string;
            user_ids?: Array<number>;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/groups.{format}';
};

export type CreateGroupErrors = {
    422: Errors;
};

export type CreateGroupError = CreateGroupErrors[keyof CreateGroupErrors];

export type CreateGroupResponses = {
    201: {
        group?: GroupSimple;
    };
};

export type CreateGroupResponse = CreateGroupResponses[keyof CreateGroupResponses];

export type DeleteGroupData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        group_id: number;
    };
    query?: never;
    url: '/groups/{group_id}.{format}';
};

export type DeleteGroupResponses = {
    204: void;
};

export type DeleteGroupResponse = DeleteGroupResponses[keyof DeleteGroupResponses];

export type GetGroupData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        group_id: number;
    };
    query?: {
        include?: Array<'users' | 'memberships'>;
    };
    url: '/groups/{group_id}.{format}';
};

export type GetGroupResponses = {
    200: {
        group: Group;
    };
};

export type GetGroupResponse = GetGroupResponses[keyof GetGroupResponses];

export type UpdateGroupData = {
    body?: {
        group?: {
            name?: string;
            user_ids?: Array<number>;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        group_id: number;
    };
    query?: never;
    url: '/groups/{group_id}.{format}';
};

export type UpdateGroupResponses = {
    204: void;
};

export type UpdateGroupResponse = UpdateGroupResponses[keyof UpdateGroupResponses];

export type AddUserToGroupData = {
    body?: {
        user_id: number;
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        group_id: number;
    };
    query?: never;
    url: '/groups/{group_id}/users.{format}';
};

export type AddUserToGroupResponses = {
    204: void;
};

export type AddUserToGroupResponse = AddUserToGroupResponses[keyof AddUserToGroupResponses];

export type RemoveUserFromGroupData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        group_id: number;
        user_id: number;
    };
    query?: never;
    url: '/groups/{group_id}/users/{user_id}.{format}';
};

export type RemoveUserFromGroupResponses = {
    204: void;
};

export type RemoveUserFromGroupResponse = RemoveUserFromGroupResponses[keyof RemoveUserFromGroupResponses];

export type GetCustomFieldsData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/custom_fields.{format}';
};

export type GetCustomFieldsResponses = {
    200: {
        custom_fields: Array<CustomField>;
    };
};

export type GetCustomFieldsResponse = GetCustomFieldsResponses[keyof GetCustomFieldsResponses];

export type SearchData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
        'X-Redmine-Nometa'?: 1;
    };
    path: {
        format: 'json' | 'xml';
    };
    query: {
        limit?: number;
        offset?: number;
        nometa?: 1;
        q: string;
        scope?: 'all' | 'my_project' | 'subprojects';
        all_words?: 1;
        titles_only?: 1;
        issues?: 1;
        news?: 1;
        wiki_pages?: 1;
        projects?: 1;
        documents?: 1;
        changesets?: 1;
        messages?: 1;
        open_issues?: 1;
        attachments?: '0' | '1' | 'only';
    };
    url: '/search.{format}';
};

export type SearchResponses = {
    200: {
        results: Array<Search>;
        total_count?: number;
        offset?: number;
        limit?: number;
    };
};

export type SearchResponse = SearchResponses[keyof SearchResponses];

export type GetFilesData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}/files.{format}';
};

export type GetFilesResponses = {
    200: {
        files: Array<File>;
    };
};

export type GetFilesResponse = GetFilesResponses[keyof GetFilesResponses];

export type CreateFileData = {
    body?: {
        file: {
            token: string;
            version_id?: number;
            filename?: string;
            description?: string;
            content_type?: string;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
    };
    query?: never;
    url: '/projects/{project_id}/files.{format}';
};

export type CreateFileResponses = {
    204: void;
};

export type CreateFileResponse = CreateFileResponses[keyof CreateFileResponses];

export type GetMyAccountData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/my/account.{format}';
};

export type GetMyAccountResponses = {
    200: MyAccount;
};

export type GetMyAccountResponse = GetMyAccountResponses[keyof GetMyAccountResponses];

export type UpdateMyAccountData = {
    body?: {
        user?: {
            login?: string;
            admin?: boolean;
            password?: string;
            firstname?: string;
            lastname?: string;
            mail?: string;
            language?: string;
            auth_source_id?: number | null;
            mail_notification?: 'all' | 'selected' | 'only_my_events' | 'only_assigned' | 'only_owner' | 'none';
            notified_project_ids?: Array<number>;
            must_change_passwd?: boolean;
            generate_password?: boolean;
            status?: number;
            custom_fields?: CustomFields;
            custom_field_values?: CustomFieldValues;
            group_ids?: Array<number>;
        };
        pref?: Pref;
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: never;
    url: '/my/account.{format}';
};

export type UpdateMyAccountErrors = {
    422: Errors;
};

export type UpdateMyAccountError = UpdateMyAccountErrors[keyof UpdateMyAccountErrors];

export type UpdateMyAccountResponses = {
    204: void;
};

export type UpdateMyAccountResponse = UpdateMyAccountResponses[keyof UpdateMyAccountResponses];

export type UpdateJournalData = {
    body?: {
        journal?: {
            notes?: string | null;
            private_notes?: boolean;
        };
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        journal_id: number;
    };
    query?: never;
    url: '/journals/{journal_id}.{format}';
};

export type UpdateJournalResponses = {
    204: void;
};

export type UpdateJournalResponse = UpdateJournalResponses[keyof UpdateJournalResponses];

export type UploadAttachmentFileData = {
    body?: Blob | File;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
    };
    query?: {
        filename?: string;
    };
    url: '/uploads.{format}';
};

export type UploadAttachmentFileErrors = {
    406: Errors;
};

export type UploadAttachmentFileError = UploadAttachmentFileErrors[keyof UploadAttachmentFileErrors];

export type UploadAttachmentFileResponses = {
    201: {
        upload: {
            id: number;
            token: string;
        };
    };
};

export type UploadAttachmentFileResponse = UploadAttachmentFileResponses[keyof UploadAttachmentFileResponses];

export type AddRelatedIssueData = {
    body?: {
        issue_id: number;
    };
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
        repository_id: number;
        revision: string;
    };
    query?: never;
    url: '/projects/{project_id}/repository/{repository_id}/revisions/{revision}/issues.{format}';
};

export type AddRelatedIssueResponses = {
    204: void;
};

export type AddRelatedIssueResponse = AddRelatedIssueResponses[keyof AddRelatedIssueResponses];

export type RemoveRelatedIssueData = {
    body?: never;
    headers?: {
        'X-Redmine-Switch-User'?: string;
    };
    path: {
        format: 'json' | 'xml';
        project_id: number;
        repository_id: number;
        revision: string;
        issue_id: number;
    };
    query?: never;
    url: '/projects/{project_id}/repository/{repository_id}/revisions/{revision}/issues/{issue_id}.{format}';
};

export type RemoveRelatedIssueResponses = {
    204: void;
};

export type RemoveRelatedIssueResponse = RemoveRelatedIssueResponses[keyof RemoveRelatedIssueResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};